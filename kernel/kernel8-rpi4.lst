
kernel8-rpi4.elf:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000080000 <_start>:
   80000:	d5384240 	mrs	x0, currentel
   80004:	f100101f 	cmp	x0, #0x4
   80008:	54000380 	b.eq	80078 <_start+0x78>  // b.none
   8000c:	58000420 	ldr	x0, 80090 <_start+0x90>
   80010:	d51c4100 	msr	sp_el1, x0
   80014:	58000420 	ldr	x0, 80098 <_start+0x98>
   80018:	d51cc000 	msr	vbar_el2, x0
   8001c:	d53ce100 	mrs	x0, cnthctl_el2
   80020:	b2400400 	orr	x0, x0, #0x3
   80024:	d51ce100 	msr	cnthctl_el2, x0
   80028:	d51ce07f 	msr	cntvoff_el2, xzr
   8002c:	d5380000 	mrs	x0, midr_el1
   80030:	d53800a1 	mrs	x1, mpidr_el1
   80034:	d51c0000 	msr	vpidr_el2, x0
   80038:	d51c00a1 	msr	vmpidr_el2, x1
   8003c:	d2867fe0 	mov	x0, #0x33ff                	// #13311
   80040:	d51c1140 	msr	cptr_el2, x0
   80044:	d51c117f 	msr	hstr_el2, xzr
   80048:	d2a00600 	mov	x0, #0x300000              	// #3145728
   8004c:	d5181040 	msr	cpacr_el1, x0
   80050:	d2b00000 	mov	x0, #0x80000000            	// #2147483648
   80054:	d51c1100 	msr	hcr_el2, x0
   80058:	d2810000 	mov	x0, #0x800                 	// #2048
   8005c:	f2a61a00 	movk	x0, #0x30d0, lsl #16
   80060:	d5181000 	msr	sctlr_el1, x0
   80064:	d2807880 	mov	x0, #0x3c4                 	// #964
   80068:	d51c4000 	msr	spsr_el2, x0
   8006c:	10000060 	adr	x0, 80078 <_start+0x78>
   80070:	d51c4020 	msr	elr_el2, x0
   80074:	d69f03e0 	eret
   80078:	58000140 	ldr	x0, 800a0 <_start+0xa0>
   8007c:	9100001f 	mov	sp, x0
   80080:	580000c0 	ldr	x0, 80098 <_start+0x98>
   80084:	d518c000 	msr	vbar_el1, x0
   80088:	14002e3e 	b	8b980 <sysinit>
   8008c:	00000000 	udf	#0
   80090:	00308000 	.word	0x00308000
   80094:	00000000 	.word	0x00000000
   80098:	00091000 	.word	0x00091000
   8009c:	00000000 	.word	0x00000000
   800a0:	002a0000 	.word	0x002a0000
   800a4:	00000000 	.word	0x00000000

Disassembly of section .text:

0000000000080800 <delay>:
   80800:	f1000400 	subs	x0, x0, #0x1
   80804:	54ffffe1 	b.ne	80800 <delay>  // b.any
   80808:	d65f03c0 	ret

000000000008080c <put32>:
   8080c:	b9000001 	str	w1, [x0]
   80810:	d65f03c0 	ret

0000000000080814 <get32>:
   80814:	b9400000 	ldr	w0, [x0]
   80818:	d65f03c0 	ret

000000000008081c <get_el>:
   8081c:	d5384240 	mrs	x0, currentel
   80820:	d342fc00 	lsr	x0, x0, #2
   80824:	d65f03c0 	ret

0000000000080828 <code_EXIT>:
   80828:	f8408695 	ldr	x21, [x20], #8
   8082c:	f84086a0 	ldr	x0, [x21], #8
   80830:	f9400001 	ldr	x1, [x0]
   80834:	d61f0020 	br	x1

0000000000080838 <code_DROP>:
   80838:	91002273 	add	x19, x19, #0x8
   8083c:	f84086a0 	ldr	x0, [x21], #8
   80840:	f9400001 	ldr	x1, [x0]
   80844:	d61f0020 	br	x1

0000000000080848 <code_DUP>:
   80848:	f9400260 	ldr	x0, [x19]
   8084c:	f81f8e60 	str	x0, [x19, #-8]!
   80850:	f84086a0 	ldr	x0, [x21], #8
   80854:	f9400001 	ldr	x1, [x0]
   80858:	d61f0020 	br	x1

000000000008085c <code_OVER>:
   8085c:	f9400660 	ldr	x0, [x19, #8]
   80860:	f81f8e60 	str	x0, [x19, #-8]!
   80864:	f84086a0 	ldr	x0, [x21], #8
   80868:	f9400001 	ldr	x1, [x0]
   8086c:	d61f0020 	br	x1

0000000000080870 <code_SWAP>:
   80870:	f9400660 	ldr	x0, [x19, #8]
   80874:	f9400261 	ldr	x1, [x19]
   80878:	f9000260 	str	x0, [x19]
   8087c:	f9000661 	str	x1, [x19, #8]
   80880:	f84086a0 	ldr	x0, [x21], #8
   80884:	f9400001 	ldr	x1, [x0]
   80888:	d61f0020 	br	x1

000000000008088c <code_ROT>:
   8088c:	f8408660 	ldr	x0, [x19], #8
   80890:	f8408661 	ldr	x1, [x19], #8
   80894:	f8408662 	ldr	x2, [x19], #8
   80898:	f81f8e61 	str	x1, [x19, #-8]!
   8089c:	f81f8e60 	str	x0, [x19, #-8]!
   808a0:	f81f8e62 	str	x2, [x19, #-8]!
   808a4:	f84086a0 	ldr	x0, [x21], #8
   808a8:	f9400001 	ldr	x1, [x0]
   808ac:	d61f0020 	br	x1

00000000000808b0 <code_NROT>:
   808b0:	f8408660 	ldr	x0, [x19], #8
   808b4:	f8408661 	ldr	x1, [x19], #8
   808b8:	f8408662 	ldr	x2, [x19], #8
   808bc:	f81f8e60 	str	x0, [x19, #-8]!
   808c0:	f81f8e62 	str	x2, [x19, #-8]!
   808c4:	f81f8e61 	str	x1, [x19, #-8]!
   808c8:	f84086a0 	ldr	x0, [x21], #8
   808cc:	f9400001 	ldr	x1, [x0]
   808d0:	d61f0020 	br	x1

00000000000808d4 <code_ROLL>:
   808d4:	f8408660 	ldr	x0, [x19], #8
   808d8:	d37df001 	lsl	x1, x0, #3
   808dc:	8b130022 	add	x2, x1, x19
   808e0:	f85f8445 	ldr	x5, [x2], #-8
   808e4:	91002043 	add	x3, x2, #0x8
   808e8:	14000003 	b	808f4 <code_ROLL+0x20>
   808ec:	f85f8444 	ldr	x4, [x2], #-8
   808f0:	f81f8464 	str	x4, [x3], #-8
   808f4:	eb13007f 	cmp	x3, x19
   808f8:	54ffffa1 	b.ne	808ec <code_ROLL+0x18>  // b.any
   808fc:	f9000265 	str	x5, [x19]
   80900:	f84086a0 	ldr	x0, [x21], #8
   80904:	f9400001 	ldr	x1, [x0]
   80908:	d61f0020 	br	x1

000000000008090c <code_NIP>:
   8090c:	f8408660 	ldr	x0, [x19], #8
   80910:	f9000260 	str	x0, [x19]
   80914:	f84086a0 	ldr	x0, [x21], #8
   80918:	f9400001 	ldr	x1, [x0]
   8091c:	d61f0020 	br	x1

0000000000080920 <code_TUCK>:
   80920:	f8408660 	ldr	x0, [x19], #8
   80924:	f8408661 	ldr	x1, [x19], #8
   80928:	f81f8e60 	str	x0, [x19, #-8]!
   8092c:	f81f8e61 	str	x1, [x19, #-8]!
   80930:	f81f8e60 	str	x0, [x19, #-8]!
   80934:	f84086a0 	ldr	x0, [x21], #8
   80938:	f9400001 	ldr	x1, [x0]
   8093c:	d61f0020 	br	x1

0000000000080940 <code_TWODROP>:
   80940:	91004273 	add	x19, x19, #0x10
   80944:	f84086a0 	ldr	x0, [x21], #8
   80948:	f9400001 	ldr	x1, [x0]
   8094c:	d61f0020 	br	x1

0000000000080950 <code_TWODUP>:
   80950:	f9400260 	ldr	x0, [x19]
   80954:	f9400661 	ldr	x1, [x19, #8]
   80958:	f81f8e61 	str	x1, [x19, #-8]!
   8095c:	f81f8e60 	str	x0, [x19, #-8]!
   80960:	f84086a0 	ldr	x0, [x21], #8
   80964:	f9400001 	ldr	x1, [x0]
   80968:	d61f0020 	br	x1

000000000008096c <code_TWOSWAP>:
   8096c:	f8408663 	ldr	x3, [x19], #8
   80970:	f8408662 	ldr	x2, [x19], #8
   80974:	f8408661 	ldr	x1, [x19], #8
   80978:	f8408660 	ldr	x0, [x19], #8
   8097c:	f81f8e62 	str	x2, [x19, #-8]!
   80980:	f81f8e63 	str	x3, [x19, #-8]!
   80984:	f81f8e60 	str	x0, [x19, #-8]!
   80988:	f81f8e61 	str	x1, [x19, #-8]!
   8098c:	f84086a0 	ldr	x0, [x21], #8
   80990:	f9400001 	ldr	x1, [x0]
   80994:	d61f0020 	br	x1

0000000000080998 <code_TWOOVER>:
   80998:	f9400a60 	ldr	x0, [x19, #16]
   8099c:	f9400e61 	ldr	x1, [x19, #24]
   809a0:	f81f8e61 	str	x1, [x19, #-8]!
   809a4:	f81f8e60 	str	x0, [x19, #-8]!
   809a8:	f84086a0 	ldr	x0, [x21], #8
   809ac:	f9400001 	ldr	x1, [x0]
   809b0:	d61f0020 	br	x1

00000000000809b4 <code_PICK>:
   809b4:	f8408660 	ldr	x0, [x19], #8
   809b8:	f8607a60 	ldr	x0, [x19, x0, lsl #3]
   809bc:	f81f8e60 	str	x0, [x19, #-8]!
   809c0:	f84086a0 	ldr	x0, [x21], #8
   809c4:	f9400001 	ldr	x1, [x0]
   809c8:	d61f0020 	br	x1

00000000000809cc <code_QDUP>:
   809cc:	f9400260 	ldr	x0, [x19]
   809d0:	b4000040 	cbz	x0, 809d8 <code_QDUP+0xc>
   809d4:	f81f8e60 	str	x0, [x19, #-8]!
   809d8:	f84086a0 	ldr	x0, [x21], #8
   809dc:	f9400001 	ldr	x1, [x0]
   809e0:	d61f0020 	br	x1

00000000000809e4 <code_TOR>:
   809e4:	f8408660 	ldr	x0, [x19], #8
   809e8:	f81f8e80 	str	x0, [x20, #-8]!
   809ec:	f84086a0 	ldr	x0, [x21], #8
   809f0:	f9400001 	ldr	x1, [x0]
   809f4:	d61f0020 	br	x1

00000000000809f8 <code_RFROM>:
   809f8:	f8408680 	ldr	x0, [x20], #8
   809fc:	f81f8e60 	str	x0, [x19, #-8]!
   80a00:	f84086a0 	ldr	x0, [x21], #8
   80a04:	f9400001 	ldr	x1, [x0]
   80a08:	d61f0020 	br	x1

0000000000080a0c <code_TWOTOR>:
   80a0c:	f8408660 	ldr	x0, [x19], #8
   80a10:	f8408661 	ldr	x1, [x19], #8
   80a14:	f81f8e81 	str	x1, [x20, #-8]!
   80a18:	f81f8e80 	str	x0, [x20, #-8]!
   80a1c:	f84086a0 	ldr	x0, [x21], #8
   80a20:	f9400001 	ldr	x1, [x0]
   80a24:	d61f0020 	br	x1

0000000000080a28 <code_TWORFROM>:
   80a28:	f8408680 	ldr	x0, [x20], #8
   80a2c:	f8408681 	ldr	x1, [x20], #8
   80a30:	f81f8e61 	str	x1, [x19, #-8]!
   80a34:	f81f8e60 	str	x0, [x19, #-8]!
   80a38:	f84086a0 	ldr	x0, [x21], #8
   80a3c:	f9400001 	ldr	x1, [x0]
   80a40:	d61f0020 	br	x1

0000000000080a44 <code_RFETCH>:
   80a44:	f9400280 	ldr	x0, [x20]
   80a48:	f81f8e60 	str	x0, [x19, #-8]!
   80a4c:	f84086a0 	ldr	x0, [x21], #8
   80a50:	f9400001 	ldr	x1, [x0]
   80a54:	d61f0020 	br	x1

0000000000080a58 <code_TWORFETCH>:
   80a58:	f9400280 	ldr	x0, [x20]
   80a5c:	f9400681 	ldr	x1, [x20, #8]
   80a60:	f81f8e61 	str	x1, [x19, #-8]!
   80a64:	f81f8e60 	str	x0, [x19, #-8]!
   80a68:	f84086a0 	ldr	x0, [x21], #8
   80a6c:	f9400001 	ldr	x1, [x0]
   80a70:	d61f0020 	br	x1

0000000000080a74 <code_LIDXFETCH>:
   80a74:	f9400280 	ldr	x0, [x20]
   80a78:	f9400681 	ldr	x1, [x20, #8]
   80a7c:	f81f8e61 	str	x1, [x19, #-8]!
   80a80:	f81f8e60 	str	x0, [x19, #-8]!
   80a84:	f84086a0 	ldr	x0, [x21], #8
   80a88:	f9400001 	ldr	x1, [x0]
   80a8c:	d61f0020 	br	x1

0000000000080a90 <code_LIDXSTORE>:
   80a90:	f8408661 	ldr	x1, [x19], #8
   80a94:	f8408660 	ldr	x0, [x19], #8
   80a98:	f9000281 	str	x1, [x20]
   80a9c:	f9000680 	str	x0, [x20, #8]
   80aa0:	f84086a0 	ldr	x0, [x21], #8
   80aa4:	f9400001 	ldr	x1, [x0]
   80aa8:	d61f0020 	br	x1

0000000000080aac <code_LINCRFETCH>:
   80aac:	f9400a80 	ldr	x0, [x20, #16]
   80ab0:	f81f8e60 	str	x0, [x19, #-8]!
   80ab4:	f84086a0 	ldr	x0, [x21], #8
   80ab8:	f9400001 	ldr	x1, [x0]
   80abc:	d61f0020 	br	x1

0000000000080ac0 <code_LTEST>:
   80ac0:	d2800020 	mov	x0, #0x1                   	// #1
   80ac4:	14000002 	b	80acc <looptest_impl>

0000000000080ac8 <code_PLTEST>:
   80ac8:	f8408660 	ldr	x0, [x19], #8

0000000000080acc <looptest_impl>:
   80acc:	f9400281 	ldr	x1, [x20]
   80ad0:	f9400682 	ldr	x2, [x20, #8]
   80ad4:	cb020023 	sub	x3, x1, x2
   80ad8:	d2f00004 	mov	x4, #0x8000000000000000    	// #-9223372036854775808
   80adc:	8b040063 	add	x3, x3, x4
   80ae0:	ab030005 	adds	x5, x0, x3
   80ae4:	da9f73e6 	csetm	x6, vs
   80ae8:	8b010000 	add	x0, x0, x1
   80aec:	f9000280 	str	x0, [x20]
   80af0:	f81f8e66 	str	x6, [x19, #-8]!
   80af4:	f84086a0 	ldr	x0, [x21], #8
   80af8:	f9400001 	ldr	x1, [x0]
   80afc:	d61f0020 	br	x1

0000000000080b00 <code_IIMPL>:
   80b00:	f9400280 	ldr	x0, [x20]
   80b04:	f81f8e60 	str	x0, [x19, #-8]!
   80b08:	f84086a0 	ldr	x0, [x21], #8
   80b0c:	f9400001 	ldr	x1, [x0]
   80b10:	d61f0020 	br	x1

0000000000080b14 <code_JIMPL>:
   80b14:	f9400a80 	ldr	x0, [x20, #16]
   80b18:	f81f8e60 	str	x0, [x19, #-8]!
   80b1c:	f84086a0 	ldr	x0, [x21], #8
   80b20:	f9400001 	ldr	x1, [x0]
   80b24:	d61f0020 	br	x1

0000000000080b28 <code_RDROP>:
   80b28:	91002294 	add	x20, x20, #0x8
   80b2c:	f84086a0 	ldr	x0, [x21], #8
   80b30:	f9400001 	ldr	x1, [x0]
   80b34:	d61f0020 	br	x1

0000000000080b38 <code_TWORDROP>:
   80b38:	91004294 	add	x20, x20, #0x10
   80b3c:	f84086a0 	ldr	x0, [x21], #8
   80b40:	f9400001 	ldr	x1, [x0]
   80b44:	d61f0020 	br	x1

0000000000080b48 <code_INC>:
   80b48:	f9400260 	ldr	x0, [x19]
   80b4c:	91000400 	add	x0, x0, #0x1
   80b50:	f9000260 	str	x0, [x19]
   80b54:	f84086a0 	ldr	x0, [x21], #8
   80b58:	f9400001 	ldr	x1, [x0]
   80b5c:	d61f0020 	br	x1

0000000000080b60 <code_DEC>:
   80b60:	f9400260 	ldr	x0, [x19]
   80b64:	d1000400 	sub	x0, x0, #0x1
   80b68:	f9000260 	str	x0, [x19]
   80b6c:	f84086a0 	ldr	x0, [x21], #8
   80b70:	f9400001 	ldr	x1, [x0]
   80b74:	d61f0020 	br	x1

0000000000080b78 <code_INCX2>:
   80b78:	f9400260 	ldr	x0, [x19]
   80b7c:	91000800 	add	x0, x0, #0x2
   80b80:	f9000260 	str	x0, [x19]
   80b84:	f84086a0 	ldr	x0, [x21], #8
   80b88:	f9400001 	ldr	x1, [x0]
   80b8c:	d61f0020 	br	x1

0000000000080b90 <code_DECX2>:
   80b90:	f9400260 	ldr	x0, [x19]
   80b94:	d1000800 	sub	x0, x0, #0x2
   80b98:	f9000260 	str	x0, [x19]
   80b9c:	f84086a0 	ldr	x0, [x21], #8
   80ba0:	f9400001 	ldr	x1, [x0]
   80ba4:	d61f0020 	br	x1

0000000000080ba8 <code_INCX4>:
   80ba8:	f9400260 	ldr	x0, [x19]
   80bac:	91001000 	add	x0, x0, #0x4
   80bb0:	f9000260 	str	x0, [x19]
   80bb4:	f84086a0 	ldr	x0, [x21], #8
   80bb8:	f9400001 	ldr	x1, [x0]
   80bbc:	d61f0020 	br	x1

0000000000080bc0 <code_DECX4>:
   80bc0:	f9400260 	ldr	x0, [x19]
   80bc4:	d1001000 	sub	x0, x0, #0x4
   80bc8:	f9000260 	str	x0, [x19]
   80bcc:	f84086a0 	ldr	x0, [x21], #8
   80bd0:	f9400001 	ldr	x1, [x0]
   80bd4:	d61f0020 	br	x1

0000000000080bd8 <code_INCX8>:
   80bd8:	f9400260 	ldr	x0, [x19]
   80bdc:	91002000 	add	x0, x0, #0x8
   80be0:	f9000260 	str	x0, [x19]
   80be4:	f84086a0 	ldr	x0, [x21], #8
   80be8:	f9400001 	ldr	x1, [x0]
   80bec:	d61f0020 	br	x1

0000000000080bf0 <code_DECX8>:
   80bf0:	f9400260 	ldr	x0, [x19]
   80bf4:	d1002000 	sub	x0, x0, #0x8
   80bf8:	f9000260 	str	x0, [x19]
   80bfc:	f84086a0 	ldr	x0, [x21], #8
   80c00:	f9400001 	ldr	x1, [x0]
   80c04:	d61f0020 	br	x1

0000000000080c08 <code_ADD>:
   80c08:	f8408660 	ldr	x0, [x19], #8
   80c0c:	f8408661 	ldr	x1, [x19], #8
   80c10:	8b000020 	add	x0, x1, x0
   80c14:	f81f8e60 	str	x0, [x19, #-8]!
   80c18:	f84086a0 	ldr	x0, [x21], #8
   80c1c:	f9400001 	ldr	x1, [x0]
   80c20:	d61f0020 	br	x1

0000000000080c24 <code_SUB>:
   80c24:	f8408660 	ldr	x0, [x19], #8
   80c28:	f8408661 	ldr	x1, [x19], #8
   80c2c:	cb000020 	sub	x0, x1, x0
   80c30:	f81f8e60 	str	x0, [x19, #-8]!
   80c34:	f84086a0 	ldr	x0, [x21], #8
   80c38:	f9400001 	ldr	x1, [x0]
   80c3c:	d61f0020 	br	x1

0000000000080c40 <code_MUL2>:
   80c40:	f8408660 	ldr	x0, [x19], #8
   80c44:	d37ff800 	lsl	x0, x0, #1
   80c48:	f81f8e60 	str	x0, [x19, #-8]!
   80c4c:	f84086a0 	ldr	x0, [x21], #8
   80c50:	f9400001 	ldr	x1, [x0]
   80c54:	d61f0020 	br	x1

0000000000080c58 <code_DIV2>:
   80c58:	f8408660 	ldr	x0, [x19], #8
   80c5c:	9341fc00 	asr	x0, x0, #1
   80c60:	f81f8e60 	str	x0, [x19, #-8]!
   80c64:	f84086a0 	ldr	x0, [x21], #8
   80c68:	f9400001 	ldr	x1, [x0]
   80c6c:	d61f0020 	br	x1

0000000000080c70 <code_MUL4>:
   80c70:	f8408660 	ldr	x0, [x19], #8
   80c74:	d37ef400 	lsl	x0, x0, #2
   80c78:	f81f8e60 	str	x0, [x19, #-8]!
   80c7c:	f84086a0 	ldr	x0, [x21], #8
   80c80:	f9400001 	ldr	x1, [x0]
   80c84:	d61f0020 	br	x1

0000000000080c88 <code_DIV4>:
   80c88:	f8408660 	ldr	x0, [x19], #8
   80c8c:	9342fc00 	asr	x0, x0, #2
   80c90:	f81f8e60 	str	x0, [x19, #-8]!
   80c94:	f84086a0 	ldr	x0, [x21], #8
   80c98:	f9400001 	ldr	x1, [x0]
   80c9c:	d61f0020 	br	x1

0000000000080ca0 <code_MUL8>:
   80ca0:	f8408660 	ldr	x0, [x19], #8
   80ca4:	d37df000 	lsl	x0, x0, #3
   80ca8:	f81f8e60 	str	x0, [x19, #-8]!
   80cac:	f84086a0 	ldr	x0, [x21], #8
   80cb0:	f9400001 	ldr	x1, [x0]
   80cb4:	d61f0020 	br	x1

0000000000080cb8 <code_DIV8>:
   80cb8:	f8408660 	ldr	x0, [x19], #8
   80cbc:	9343fc00 	asr	x0, x0, #3
   80cc0:	f81f8e60 	str	x0, [x19, #-8]!
   80cc4:	f84086a0 	ldr	x0, [x21], #8
   80cc8:	f9400001 	ldr	x1, [x0]
   80ccc:	d61f0020 	br	x1

0000000000080cd0 <code_UMUL>:
   80cd0:	f8408660 	ldr	x0, [x19], #8
   80cd4:	f8408661 	ldr	x1, [x19], #8
   80cd8:	9b007c22 	mul	x2, x1, x0
   80cdc:	f81f8e62 	str	x2, [x19, #-8]!
   80ce0:	f84086a0 	ldr	x0, [x21], #8
   80ce4:	f9400001 	ldr	x1, [x0]
   80ce8:	d61f0020 	br	x1

0000000000080cec <code_MUL>:
   80cec:	f8408660 	ldr	x0, [x19], #8
   80cf0:	f8408661 	ldr	x1, [x19], #8
   80cf4:	9b007c22 	mul	x2, x1, x0
   80cf8:	f81f8e62 	str	x2, [x19, #-8]!
   80cfc:	f84086a0 	ldr	x0, [x21], #8
   80d00:	f9400001 	ldr	x1, [x0]
   80d04:	d61f0020 	br	x1

0000000000080d08 <code_MMUL>:
   80d08:	f8408660 	ldr	x0, [x19], #8
   80d0c:	f8408661 	ldr	x1, [x19], #8
   80d10:	9b007c23 	mul	x3, x1, x0
   80d14:	9b407c22 	smulh	x2, x1, x0
   80d18:	f81f8e62 	str	x2, [x19, #-8]!
   80d1c:	f81f8e63 	str	x3, [x19, #-8]!
   80d20:	f84086a0 	ldr	x0, [x21], #8
   80d24:	f9400001 	ldr	x1, [x0]
   80d28:	d61f0020 	br	x1

0000000000080d2c <code_UMMUL>:
   80d2c:	f8408660 	ldr	x0, [x19], #8
   80d30:	f8408661 	ldr	x1, [x19], #8
   80d34:	9b007c23 	mul	x3, x1, x0
   80d38:	9bc07c22 	umulh	x2, x1, x0
   80d3c:	f81f8e62 	str	x2, [x19, #-8]!
   80d40:	f81f8e63 	str	x3, [x19, #-8]!
   80d44:	f84086a0 	ldr	x0, [x21], #8
   80d48:	f9400001 	ldr	x1, [x0]
   80d4c:	d61f0020 	br	x1

0000000000080d50 <code_DIV>:
   80d50:	f8408660 	ldr	x0, [x19], #8
   80d54:	f8408661 	ldr	x1, [x19], #8
   80d58:	9ac00c22 	sdiv	x2, x1, x0
   80d5c:	f81f8e62 	str	x2, [x19, #-8]!
   80d60:	f84086a0 	ldr	x0, [x21], #8
   80d64:	f9400001 	ldr	x1, [x0]
   80d68:	d61f0020 	br	x1

0000000000080d6c <code_MOD>:
   80d6c:	f8408660 	ldr	x0, [x19], #8
   80d70:	f8408661 	ldr	x1, [x19], #8
   80d74:	9ac00c22 	sdiv	x2, x1, x0
   80d78:	9b007c43 	mul	x3, x2, x0
   80d7c:	cb030020 	sub	x0, x1, x3
   80d80:	f81f8e60 	str	x0, [x19, #-8]!
   80d84:	f84086a0 	ldr	x0, [x21], #8
   80d88:	f9400001 	ldr	x1, [x0]
   80d8c:	d61f0020 	br	x1

0000000000080d90 <code_DIVMOD>:
   80d90:	f8408660 	ldr	x0, [x19], #8
   80d94:	f8408661 	ldr	x1, [x19], #8
   80d98:	9ac00c22 	sdiv	x2, x1, x0
   80d9c:	9b007c43 	mul	x3, x2, x0
   80da0:	cb030020 	sub	x0, x1, x3
   80da4:	f81f8e60 	str	x0, [x19, #-8]!
   80da8:	f81f8e62 	str	x2, [x19, #-8]!
   80dac:	f84086a0 	ldr	x0, [x21], #8
   80db0:	f9400001 	ldr	x1, [x0]
   80db4:	d61f0020 	br	x1

0000000000080db8 <code_UDIV>:
   80db8:	f8408660 	ldr	x0, [x19], #8
   80dbc:	f8408661 	ldr	x1, [x19], #8
   80dc0:	9ac00822 	udiv	x2, x1, x0
   80dc4:	f81f8e62 	str	x2, [x19, #-8]!
   80dc8:	f84086a0 	ldr	x0, [x21], #8
   80dcc:	f9400001 	ldr	x1, [x0]
   80dd0:	d61f0020 	br	x1

0000000000080dd4 <code_UMOD>:
   80dd4:	f8408660 	ldr	x0, [x19], #8
   80dd8:	f8408661 	ldr	x1, [x19], #8
   80ddc:	9ac00822 	udiv	x2, x1, x0
   80de0:	9b007c43 	mul	x3, x2, x0
   80de4:	cb030020 	sub	x0, x1, x3
   80de8:	f81f8e60 	str	x0, [x19, #-8]!
   80dec:	f84086a0 	ldr	x0, [x21], #8
   80df0:	f9400001 	ldr	x1, [x0]
   80df4:	d61f0020 	br	x1

0000000000080df8 <code_UDIVMOD>:
   80df8:	f8408660 	ldr	x0, [x19], #8
   80dfc:	f8408661 	ldr	x1, [x19], #8
   80e00:	9ac00822 	udiv	x2, x1, x0
   80e04:	9b007c43 	mul	x3, x2, x0
   80e08:	cb030020 	sub	x0, x1, x3
   80e0c:	f81f8e60 	str	x0, [x19, #-8]!
   80e10:	f81f8e62 	str	x2, [x19, #-8]!
   80e14:	f84086a0 	ldr	x0, [x21], #8
   80e18:	f9400001 	ldr	x1, [x0]
   80e1c:	d61f0020 	br	x1

0000000000080e20 <code_LSHIFT>:
   80e20:	f8408660 	ldr	x0, [x19], #8
   80e24:	f8408661 	ldr	x1, [x19], #8
   80e28:	9ac02020 	lsl	x0, x1, x0
   80e2c:	f81f8e60 	str	x0, [x19, #-8]!
   80e30:	f84086a0 	ldr	x0, [x21], #8
   80e34:	f9400001 	ldr	x1, [x0]
   80e38:	d61f0020 	br	x1

0000000000080e3c <code_RSHIFT>:
   80e3c:	f8408660 	ldr	x0, [x19], #8
   80e40:	f8408661 	ldr	x1, [x19], #8
   80e44:	9ac02420 	lsr	x0, x1, x0
   80e48:	f81f8e60 	str	x0, [x19, #-8]!
   80e4c:	f84086a0 	ldr	x0, [x21], #8
   80e50:	f9400001 	ldr	x1, [x0]
   80e54:	d61f0020 	br	x1

0000000000080e58 <code_RSHIFTA>:
   80e58:	f8408660 	ldr	x0, [x19], #8
   80e5c:	f8408661 	ldr	x1, [x19], #8
   80e60:	9ac02820 	asr	x0, x1, x0
   80e64:	f81f8e60 	str	x0, [x19, #-8]!
   80e68:	f84086a0 	ldr	x0, [x21], #8
   80e6c:	f9400001 	ldr	x1, [x0]
   80e70:	d61f0020 	br	x1

0000000000080e74 <code_NEGATE>:
   80e74:	f9400260 	ldr	x0, [x19]
   80e78:	cb0003e0 	neg	x0, x0
   80e7c:	f9000260 	str	x0, [x19]
   80e80:	f84086a0 	ldr	x0, [x21], #8
   80e84:	f9400001 	ldr	x1, [x0]
   80e88:	d61f0020 	br	x1

0000000000080e8c <code_INVERT>:
   80e8c:	f9400260 	ldr	x0, [x19]
   80e90:	ca3f0000 	eon	x0, x0, xzr
   80e94:	f9000260 	str	x0, [x19]
   80e98:	f84086a0 	ldr	x0, [x21], #8
   80e9c:	f9400001 	ldr	x1, [x0]
   80ea0:	d61f0020 	br	x1

0000000000080ea4 <code_AND>:
   80ea4:	f8408660 	ldr	x0, [x19], #8
   80ea8:	f8408661 	ldr	x1, [x19], #8
   80eac:	8a000020 	and	x0, x1, x0
   80eb0:	f81f8e60 	str	x0, [x19, #-8]!
   80eb4:	f84086a0 	ldr	x0, [x21], #8
   80eb8:	f9400001 	ldr	x1, [x0]
   80ebc:	d61f0020 	br	x1

0000000000080ec0 <code_OR>:
   80ec0:	f8408660 	ldr	x0, [x19], #8
   80ec4:	f8408661 	ldr	x1, [x19], #8
   80ec8:	aa000020 	orr	x0, x1, x0
   80ecc:	f81f8e60 	str	x0, [x19, #-8]!
   80ed0:	f84086a0 	ldr	x0, [x21], #8
   80ed4:	f9400001 	ldr	x1, [x0]
   80ed8:	d61f0020 	br	x1

0000000000080edc <code_XOR>:
   80edc:	f8408660 	ldr	x0, [x19], #8
   80ee0:	f8408661 	ldr	x1, [x19], #8
   80ee4:	ca000020 	eor	x0, x1, x0
   80ee8:	f81f8e60 	str	x0, [x19, #-8]!
   80eec:	f84086a0 	ldr	x0, [x21], #8
   80ef0:	f9400001 	ldr	x1, [x0]
   80ef4:	d61f0020 	br	x1

0000000000080ef8 <code_ABS>:
   80ef8:	f8408660 	ldr	x0, [x19], #8
   80efc:	eb0003ff 	cmp	xzr, x0
   80f00:	da80b401 	cneg	x1, x0, ge	// ge = tcont
   80f04:	f81f8e61 	str	x1, [x19, #-8]!
   80f08:	f84086a0 	ldr	x0, [x21], #8
   80f0c:	f9400001 	ldr	x1, [x0]
   80f10:	d61f0020 	br	x1

0000000000080f14 <code_UMDIVMOD>:
   80f14:	f8408662 	ldr	x2, [x19], #8
   80f18:	f8408660 	ldr	x0, [x19], #8
   80f1c:	f8408661 	ldr	x1, [x19], #8
   80f20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   80f24:	94000007 	bl	80f40 <umdivmod_impl>
   80f28:	a8c27bfd 	ldp	x29, x30, [sp], #32
   80f2c:	f81f8e68 	str	x8, [x19, #-8]!
   80f30:	f81f8e60 	str	x0, [x19, #-8]!
   80f34:	f84086a0 	ldr	x0, [x21], #8
   80f38:	f9400001 	ldr	x1, [x0]
   80f3c:	d61f0020 	br	x1

0000000000080f40 <umdivmod_impl>:
   80f40:	eb02001f 	cmp	x0, x2
   80f44:	54000562 	b.cs	80ff0 <umdivmod_impl+0xb0>  // b.hs, b.nlast
   80f48:	dac01048 	clz	x8, x2
   80f4c:	9ac82049 	lsl	x9, x2, x8
   80f50:	9ac8200a 	lsl	x10, x0, x8
   80f54:	4b0803eb 	neg	w11, w8
   80f58:	9acb242b 	lsr	x11, x1, x11
   80f5c:	f100011f 	cmp	x8, #0x0
   80f60:	9a8b03eb 	csel	x11, xzr, x11, eq	// eq = none
   80f64:	aa0a016a 	orr	x10, x11, x10
   80f68:	9ac8202b 	lsl	x11, x1, x8
   80f6c:	d360fd2c 	lsr	x12, x9, #32
   80f70:	9acc094d 	udiv	x13, x10, x12
   80f74:	1b0ca9ae 	msub	w14, w13, w12, w10
   80f78:	92407d2f 	and	x15, x9, #0xffffffff
   80f7c:	9b0f7db0 	mul	x16, x13, x15
   80f80:	93cb81ce 	extr	x14, x14, x11, #32
   80f84:	eb0e0211 	subs	x17, x16, x14
   80f88:	eb09023f 	cmp	x17, x9
   80f8c:	92800031 	mov	x17, #0xfffffffffffffffe    	// #-2
   80f90:	9a918631 	cinc	x17, x17, ls	// ls = plast
   80f94:	eb0e021f 	cmp	x16, x14
   80f98:	9a9f822e 	csel	x14, x17, xzr, hi	// hi = pmore
   80f9c:	8b0d01cd 	add	x13, x14, x13
   80fa0:	93cb814a 	extr	x10, x10, x11, #32
   80fa4:	92407dae 	and	x14, x13, #0xffffffff
   80fa8:	9b09a9ca 	msub	x10, x14, x9, x10
   80fac:	9acc094e 	udiv	x14, x10, x12
   80fb0:	1b0ca9cc 	msub	w12, w14, w12, w10
   80fb4:	9b0f7dcf 	mul	x15, x14, x15
   80fb8:	aa0b03f0 	mov	x16, x11
   80fbc:	b3607d90 	bfi	x16, x12, #32, #32
   80fc0:	eb1001ec 	subs	x12, x15, x16
   80fc4:	eb09019f 	cmp	x12, x9
   80fc8:	1280002c 	mov	w12, #0xfffffffe            	// #-2
   80fcc:	1a8c858c 	cinc	w12, w12, ls	// ls = plast
   80fd0:	eb1001ff 	cmp	x15, x16
   80fd4:	1a9f818c 	csel	w12, w12, wzr, hi	// hi = pmore
   80fd8:	0b0e018c 	add	w12, w12, w14
   80fdc:	b3607d4b 	bfi	x11, x10, #32, #32
   80fe0:	9b09ad89 	msub	x9, x12, x9, x11
   80fe4:	9ac82528 	lsr	x8, x9, x8
   80fe8:	aa0d8180 	orr	x0, x12, x13, lsl #32
   80fec:	d65f03c0 	ret
   80ff0:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   80ff4:	92800008 	mov	x8, #0xffffffffffffffff    	// #-1
   80ff8:	d65f03c0 	ret

0000000000080ffc <code_SMREM>:
   80ffc:	f8408662 	ldr	x2, [x19], #8
   81000:	f8408660 	ldr	x0, [x19], #8
   81004:	f8408661 	ldr	x1, [x19], #8
   81008:	ca020009 	eor	x9, x0, x2
   8100c:	9280000a 	mov	x10, #0xffffffffffffffff    	// #-1
   81010:	d341fd4a 	lsr	x10, x10, #1
   81014:	8a0a0129 	and	x9, x9, x10
   81018:	8a0a0000 	and	x0, x0, x10
   8101c:	8a0a0042 	and	x2, x2, x10
   81020:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81024:	97ffffc7 	bl	80f40 <umdivmod_impl>
   81028:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8102c:	aa0a0000 	orr	x0, x0, x10
   81030:	f81f8e68 	str	x8, [x19, #-8]!
   81034:	f81f8e60 	str	x0, [x19, #-8]!
   81038:	f84086a0 	ldr	x0, [x21], #8
   8103c:	f9400001 	ldr	x1, [x0]
   81040:	d61f0020 	br	x1

0000000000081044 <code_DADD>:
   81044:	f8408663 	ldr	x3, [x19], #8
   81048:	f8408662 	ldr	x2, [x19], #8
   8104c:	f8408661 	ldr	x1, [x19], #8
   81050:	f8408660 	ldr	x0, [x19], #8
   81054:	ab020005 	adds	x5, x0, x2
   81058:	9a030026 	adc	x6, x1, x3
   8105c:	f81f8e65 	str	x5, [x19, #-8]!
   81060:	f81f8e66 	str	x6, [x19, #-8]!
   81064:	f84086a0 	ldr	x0, [x21], #8
   81068:	f9400001 	ldr	x1, [x0]
   8106c:	d61f0020 	br	x1

0000000000081070 <code_DTOS>:
   81070:	91002273 	add	x19, x19, #0x8
   81074:	f84086a0 	ldr	x0, [x21], #8
   81078:	f9400001 	ldr	x1, [x0]
   8107c:	d61f0020 	br	x1

0000000000081080 <code_DNEGATE>:
   81080:	f8408661 	ldr	x1, [x19], #8
   81084:	f8408660 	ldr	x0, [x19], #8

0000000000081088 <dnegate_impl>:
   81088:	eb0003e2 	negs	x2, x0
   8108c:	da0103e3 	ngc	x3, x1
   81090:	f81f8e62 	str	x2, [x19, #-8]!
   81094:	f81f8e63 	str	x3, [x19, #-8]!
   81098:	f84086a0 	ldr	x0, [x21], #8
   8109c:	f9400001 	ldr	x1, [x0]
   810a0:	d61f0020 	br	x1

00000000000810a4 <code_DPLUSMINUS>:
   810a4:	f8408662 	ldr	x2, [x19], #8
   810a8:	f8408661 	ldr	x1, [x19], #8
   810ac:	f8408660 	ldr	x0, [x19], #8
   810b0:	ca020023 	eor	x3, x1, x2
   810b4:	eb1f007f 	cmp	x3, xzr
   810b8:	54fffe8b 	b.lt	81088 <dnegate_impl>  // b.tstop
   810bc:	f81f8e60 	str	x0, [x19, #-8]!
   810c0:	f81f8e61 	str	x1, [x19, #-8]!
   810c4:	f84086a0 	ldr	x0, [x21], #8
   810c8:	f9400001 	ldr	x1, [x0]
   810cc:	d61f0020 	br	x1

00000000000810d0 <code_TRUE>:
   810d0:	aa3f03e0 	mvn	x0, xzr
   810d4:	f81f8e60 	str	x0, [x19, #-8]!
   810d8:	f84086a0 	ldr	x0, [x21], #8
   810dc:	f9400001 	ldr	x1, [x0]
   810e0:	d61f0020 	br	x1

00000000000810e4 <code_FALSE>:
   810e4:	aa1f03e0 	mov	x0, xzr
   810e8:	f81f8e60 	str	x0, [x19, #-8]!
   810ec:	f84086a0 	ldr	x0, [x21], #8
   810f0:	f9400001 	ldr	x1, [x0]
   810f4:	d61f0020 	br	x1

00000000000810f8 <code_EQ>:
   810f8:	f8408660 	ldr	x0, [x19], #8
   810fc:	f8408661 	ldr	x1, [x19], #8
   81100:	eb00003f 	cmp	x1, x0
   81104:	da9f13e0 	csetm	x0, eq	// eq = none
   81108:	f81f8e60 	str	x0, [x19, #-8]!
   8110c:	f84086a0 	ldr	x0, [x21], #8
   81110:	f9400001 	ldr	x1, [x0]
   81114:	d61f0020 	br	x1

0000000000081118 <code_NEQ>:
   81118:	f8408660 	ldr	x0, [x19], #8
   8111c:	f8408661 	ldr	x1, [x19], #8
   81120:	eb00003f 	cmp	x1, x0
   81124:	da9f03e0 	csetm	x0, ne	// ne = any
   81128:	f81f8e60 	str	x0, [x19, #-8]!
   8112c:	f84086a0 	ldr	x0, [x21], #8
   81130:	f9400001 	ldr	x1, [x0]
   81134:	d61f0020 	br	x1

0000000000081138 <code_LT>:
   81138:	f8408660 	ldr	x0, [x19], #8
   8113c:	f8408661 	ldr	x1, [x19], #8
   81140:	eb00003f 	cmp	x1, x0
   81144:	da9fa3e0 	csetm	x0, lt	// lt = tstop
   81148:	f81f8e60 	str	x0, [x19, #-8]!
   8114c:	f84086a0 	ldr	x0, [x21], #8
   81150:	f9400001 	ldr	x1, [x0]
   81154:	d61f0020 	br	x1

0000000000081158 <code_GT>:
   81158:	f8408660 	ldr	x0, [x19], #8
   8115c:	f8408661 	ldr	x1, [x19], #8
   81160:	eb00003f 	cmp	x1, x0
   81164:	da9fd3e0 	csetm	x0, gt
   81168:	f81f8e60 	str	x0, [x19, #-8]!
   8116c:	f84086a0 	ldr	x0, [x21], #8
   81170:	f9400001 	ldr	x1, [x0]
   81174:	d61f0020 	br	x1

0000000000081178 <code_LEQ>:
   81178:	f8408660 	ldr	x0, [x19], #8
   8117c:	f8408661 	ldr	x1, [x19], #8
   81180:	eb00003f 	cmp	x1, x0
   81184:	da9fc3e0 	csetm	x0, le
   81188:	f81f8e60 	str	x0, [x19, #-8]!
   8118c:	f84086a0 	ldr	x0, [x21], #8
   81190:	f9400001 	ldr	x1, [x0]
   81194:	d61f0020 	br	x1

0000000000081198 <code_GEQ>:
   81198:	f8408660 	ldr	x0, [x19], #8
   8119c:	f8408661 	ldr	x1, [x19], #8
   811a0:	eb00003f 	cmp	x1, x0
   811a4:	da9fb3e0 	csetm	x0, ge	// ge = tcont
   811a8:	f81f8e60 	str	x0, [x19, #-8]!
   811ac:	f84086a0 	ldr	x0, [x21], #8
   811b0:	f9400001 	ldr	x1, [x0]
   811b4:	d61f0020 	br	x1

00000000000811b8 <code_ULT>:
   811b8:	f8408660 	ldr	x0, [x19], #8
   811bc:	f8408661 	ldr	x1, [x19], #8
   811c0:	eb00003f 	cmp	x1, x0
   811c4:	da9f23e0 	csetm	x0, cc	// cc = lo, ul, last
   811c8:	f81f8e60 	str	x0, [x19, #-8]!
   811cc:	f84086a0 	ldr	x0, [x21], #8
   811d0:	f9400001 	ldr	x1, [x0]
   811d4:	d61f0020 	br	x1

00000000000811d8 <code_UGT>:
   811d8:	f8408660 	ldr	x0, [x19], #8
   811dc:	f8408661 	ldr	x1, [x19], #8
   811e0:	eb00003f 	cmp	x1, x0
   811e4:	da9f93e0 	csetm	x0, hi	// hi = pmore
   811e8:	f81f8e60 	str	x0, [x19, #-8]!
   811ec:	f84086a0 	ldr	x0, [x21], #8
   811f0:	f9400001 	ldr	x1, [x0]
   811f4:	d61f0020 	br	x1

00000000000811f8 <code_ULEQ>:
   811f8:	f8408660 	ldr	x0, [x19], #8
   811fc:	f8408661 	ldr	x1, [x19], #8
   81200:	eb00003f 	cmp	x1, x0
   81204:	da9f83e0 	csetm	x0, ls	// ls = plast
   81208:	f81f8e60 	str	x0, [x19, #-8]!
   8120c:	f84086a0 	ldr	x0, [x21], #8
   81210:	f9400001 	ldr	x1, [x0]
   81214:	d61f0020 	br	x1

0000000000081218 <code_UGEQ>:
   81218:	f8408660 	ldr	x0, [x19], #8
   8121c:	f8408661 	ldr	x1, [x19], #8
   81220:	eb00003f 	cmp	x1, x0
   81224:	da9f33e0 	csetm	x0, cs	// cs = hs, nlast
   81228:	f81f8e60 	str	x0, [x19, #-8]!
   8122c:	f84086a0 	ldr	x0, [x21], #8
   81230:	f9400001 	ldr	x1, [x0]
   81234:	d61f0020 	br	x1

0000000000081238 <code_ZEQ>:
   81238:	f8408660 	ldr	x0, [x19], #8
   8123c:	eb1f001f 	cmp	x0, xzr
   81240:	da9f13e0 	csetm	x0, eq	// eq = none
   81244:	f81f8e60 	str	x0, [x19, #-8]!
   81248:	f84086a0 	ldr	x0, [x21], #8
   8124c:	f9400001 	ldr	x1, [x0]
   81250:	d61f0020 	br	x1

0000000000081254 <code_ZNEQ>:
   81254:	f8408660 	ldr	x0, [x19], #8
   81258:	eb1f001f 	cmp	x0, xzr
   8125c:	da9f03e0 	csetm	x0, ne	// ne = any
   81260:	f81f8e60 	str	x0, [x19, #-8]!
   81264:	f84086a0 	ldr	x0, [x21], #8
   81268:	f9400001 	ldr	x1, [x0]
   8126c:	d61f0020 	br	x1

0000000000081270 <code_ZLT>:
   81270:	f8408660 	ldr	x0, [x19], #8
   81274:	eb1f001f 	cmp	x0, xzr
   81278:	da9fa3e0 	csetm	x0, lt	// lt = tstop
   8127c:	f81f8e60 	str	x0, [x19, #-8]!
   81280:	f84086a0 	ldr	x0, [x21], #8
   81284:	f9400001 	ldr	x1, [x0]
   81288:	d61f0020 	br	x1

000000000008128c <code_ZGT>:
   8128c:	f8408660 	ldr	x0, [x19], #8
   81290:	eb1f001f 	cmp	x0, xzr
   81294:	da9fd3e0 	csetm	x0, gt
   81298:	f81f8e60 	str	x0, [x19, #-8]!
   8129c:	f84086a0 	ldr	x0, [x21], #8
   812a0:	f9400001 	ldr	x1, [x0]
   812a4:	d61f0020 	br	x1

00000000000812a8 <code_ZLEQ>:
   812a8:	f8408660 	ldr	x0, [x19], #8
   812ac:	eb1f001f 	cmp	x0, xzr
   812b0:	da9fc3e0 	csetm	x0, le
   812b4:	f81f8e60 	str	x0, [x19, #-8]!
   812b8:	f84086a0 	ldr	x0, [x21], #8
   812bc:	f9400001 	ldr	x1, [x0]
   812c0:	d61f0020 	br	x1

00000000000812c4 <code_ZGEQ>:
   812c4:	f8408660 	ldr	x0, [x19], #8
   812c8:	eb1f001f 	cmp	x0, xzr
   812cc:	da9fb3e0 	csetm	x0, ge	// ge = tcont
   812d0:	f81f8e60 	str	x0, [x19, #-8]!
   812d4:	f84086a0 	ldr	x0, [x21], #8
   812d8:	f9400001 	ldr	x1, [x0]
   812dc:	d61f0020 	br	x1

00000000000812e0 <code_MIN>:
   812e0:	f8408661 	ldr	x1, [x19], #8
   812e4:	f8408660 	ldr	x0, [x19], #8
   812e8:	eb01001f 	cmp	x0, x1
   812ec:	9a81b002 	csel	x2, x0, x1, lt	// lt = tstop
   812f0:	f81f8e62 	str	x2, [x19, #-8]!
   812f4:	f84086a0 	ldr	x0, [x21], #8
   812f8:	f9400001 	ldr	x1, [x0]
   812fc:	d61f0020 	br	x1

0000000000081300 <code_UMIN>:
   81300:	f8408661 	ldr	x1, [x19], #8
   81304:	f8408660 	ldr	x0, [x19], #8
   81308:	eb01001f 	cmp	x0, x1
   8130c:	9a813002 	csel	x2, x0, x1, cc	// cc = lo, ul, last
   81310:	f81f8e62 	str	x2, [x19, #-8]!
   81314:	f84086a0 	ldr	x0, [x21], #8
   81318:	f9400001 	ldr	x1, [x0]
   8131c:	d61f0020 	br	x1

0000000000081320 <code_WITHIN>:
   81320:	f8408662 	ldr	x2, [x19], #8
   81324:	f8408661 	ldr	x1, [x19], #8
   81328:	f8408660 	ldr	x0, [x19], #8
   8132c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81330:	94000006 	bl	81348 <within_impl>
   81334:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81338:	f81f8e60 	str	x0, [x19, #-8]!
   8133c:	f84086a0 	ldr	x0, [x21], #8
   81340:	f9400001 	ldr	x1, [x0]
   81344:	d61f0020 	br	x1

0000000000081348 <within_impl>:
   81348:	cb010043 	sub	x3, x2, x1
   8134c:	cb010004 	sub	x4, x0, x1
   81350:	eb03009f 	cmp	x4, x3
   81354:	da9f23e0 	csetm	x0, cc	// cc = lo, ul, last
   81358:	d65f03c0 	ret

000000000008135c <code_BRANCH>:
   8135c:	f94002a1 	ldr	x1, [x21]
   81360:	8b0102b5 	add	x21, x21, x1
   81364:	f84086a0 	ldr	x0, [x21], #8
   81368:	f9400001 	ldr	x1, [x0]
   8136c:	d61f0020 	br	x1

0000000000081370 <code_SBRANCH>:
   81370:	f94002a1 	ldr	x1, [x21]
   81374:	8b0102b5 	add	x21, x21, x1
   81378:	f84086a0 	ldr	x0, [x21], #8
   8137c:	f9400001 	ldr	x1, [x0]
   81380:	d61f0020 	br	x1

0000000000081384 <code_ZBRANCH>:
   81384:	f8408660 	ldr	x0, [x19], #8
   81388:	eb1f001f 	cmp	x0, xzr
   8138c:	54fffe80 	b.eq	8135c <code_BRANCH>  // b.none
   81390:	910022b5 	add	x21, x21, #0x8
   81394:	f84086a0 	ldr	x0, [x21], #8
   81398:	f9400001 	ldr	x1, [x0]
   8139c:	d61f0020 	br	x1

00000000000813a0 <code_STORE>:
   813a0:	f8408660 	ldr	x0, [x19], #8
   813a4:	f8408661 	ldr	x1, [x19], #8
   813a8:	f9000001 	str	x1, [x0]
   813ac:	f84086a0 	ldr	x0, [x21], #8
   813b0:	f9400001 	ldr	x1, [x0]
   813b4:	d61f0020 	br	x1

00000000000813b8 <code_CSTORE>:
   813b8:	f8408660 	ldr	x0, [x19], #8
   813bc:	f8408661 	ldr	x1, [x19], #8
   813c0:	39000001 	strb	w1, [x0]
   813c4:	f84086a0 	ldr	x0, [x21], #8
   813c8:	f9400001 	ldr	x1, [x0]
   813cc:	d61f0020 	br	x1

00000000000813d0 <code_WSTORE>:
   813d0:	f8408660 	ldr	x0, [x19], #8
   813d4:	f8408661 	ldr	x1, [x19], #8
   813d8:	79000001 	strh	w1, [x0]
   813dc:	f84086a0 	ldr	x0, [x21], #8
   813e0:	f9400001 	ldr	x1, [x0]
   813e4:	d61f0020 	br	x1

00000000000813e8 <code_LSTORE>:
   813e8:	f8408660 	ldr	x0, [x19], #8
   813ec:	f8408661 	ldr	x1, [x19], #8
   813f0:	b9000001 	str	w1, [x0]
   813f4:	f84086a0 	ldr	x0, [x21], #8
   813f8:	f9400001 	ldr	x1, [x0]
   813fc:	d61f0020 	br	x1

0000000000081400 <code_PLUSSTORE>:
   81400:	f8408660 	ldr	x0, [x19], #8
   81404:	f8408661 	ldr	x1, [x19], #8
   81408:	f9400002 	ldr	x2, [x0]
   8140c:	8b010042 	add	x2, x2, x1
   81410:	f9000002 	str	x2, [x0]
   81414:	f84086a0 	ldr	x0, [x21], #8
   81418:	f9400001 	ldr	x1, [x0]
   8141c:	d61f0020 	br	x1

0000000000081420 <code_SUBSTORE>:
   81420:	f8408660 	ldr	x0, [x19], #8
   81424:	f8408661 	ldr	x1, [x19], #8
   81428:	f9400002 	ldr	x2, [x0]
   8142c:	cb010042 	sub	x2, x2, x1
   81430:	f9000002 	str	x2, [x0]
   81434:	f84086a0 	ldr	x0, [x21], #8
   81438:	f9400001 	ldr	x1, [x0]
   8143c:	d61f0020 	br	x1

0000000000081440 <code_FETCH>:
   81440:	f8408660 	ldr	x0, [x19], #8
   81444:	f9400001 	ldr	x1, [x0]
   81448:	f81f8e61 	str	x1, [x19, #-8]!
   8144c:	f84086a0 	ldr	x0, [x21], #8
   81450:	f9400001 	ldr	x1, [x0]
   81454:	d61f0020 	br	x1

0000000000081458 <code_CFETCH>:
   81458:	f8408660 	ldr	x0, [x19], #8
   8145c:	39400001 	ldrb	w1, [x0]
   81460:	f81f8e61 	str	x1, [x19, #-8]!
   81464:	f84086a0 	ldr	x0, [x21], #8
   81468:	f9400001 	ldr	x1, [x0]
   8146c:	d61f0020 	br	x1

0000000000081470 <code_WFETCH>:
   81470:	f8408660 	ldr	x0, [x19], #8
   81474:	79400001 	ldrh	w1, [x0]
   81478:	f81f8e61 	str	x1, [x19, #-8]!
   8147c:	f84086a0 	ldr	x0, [x21], #8
   81480:	f9400001 	ldr	x1, [x0]
   81484:	d61f0020 	br	x1

0000000000081488 <code_LFETCH>:
   81488:	f8408660 	ldr	x0, [x19], #8
   8148c:	b9400001 	ldr	w1, [x0]
   81490:	f81f8e61 	str	x1, [x19, #-8]!
   81494:	f84086a0 	ldr	x0, [x21], #8
   81498:	f9400001 	ldr	x1, [x0]
   8149c:	d61f0020 	br	x1

00000000000814a0 <code_LIT>:
   814a0:	f84086a0 	ldr	x0, [x21], #8
   814a4:	f81f8e60 	str	x0, [x19, #-8]!
   814a8:	f84086a0 	ldr	x0, [x21], #8
   814ac:	f9400001 	ldr	x1, [x0]
   814b0:	d61f0020 	br	x1

00000000000814b4 <code_MOVE>:
   814b4:	f8408662 	ldr	x2, [x19], #8
   814b8:	f8408661 	ldr	x1, [x19], #8
   814bc:	f8408660 	ldr	x0, [x19], #8
   814c0:	eb1f005f 	cmp	x2, xzr
   814c4:	54000100 	b.eq	814e4 <code_MOVE+0x30>  // b.none
   814c8:	38401408 	ldrb	w8, [x0], #1
   814cc:	38001428 	strb	w8, [x1], #1
   814d0:	d1000442 	sub	x2, x2, #0x1
   814d4:	17fffffb 	b	814c0 <code_MOVE+0xc>
   814d8:	f84086a0 	ldr	x0, [x21], #8
   814dc:	f9400001 	ldr	x1, [x0]
   814e0:	d61f0020 	br	x1
   814e4:	f84086a0 	ldr	x0, [x21], #8
   814e8:	f9400001 	ldr	x1, [x0]
   814ec:	d61f0020 	br	x1

00000000000814f0 <code_CMOVE>:
   814f0:	f8408662 	ldr	x2, [x19], #8
   814f4:	f8408661 	ldr	x1, [x19], #8
   814f8:	f8408660 	ldr	x0, [x19], #8
   814fc:	f100005f 	cmp	x2, #0x0
   81500:	540000a0 	b.eq	81514 <code_CMOVE+0x24>  // b.none
   81504:	38401408 	ldrb	w8, [x0], #1
   81508:	38001428 	strb	w8, [x1], #1
   8150c:	d1000442 	sub	x2, x2, #0x1
   81510:	17fffffb 	b	814fc <code_CMOVE+0xc>
   81514:	f84086a0 	ldr	x0, [x21], #8
   81518:	f9400001 	ldr	x1, [x0]
   8151c:	d61f0020 	br	x1

0000000000081520 <code_FILL>:
   81520:	f8408662 	ldr	x2, [x19], #8
   81524:	f8408661 	ldr	x1, [x19], #8
   81528:	f8408660 	ldr	x0, [x19], #8
   8152c:	eb1f003f 	cmp	x1, xzr
   81530:	5400028d 	b.le	81580 <code_FILL+0x60>
   81534:	f100203f 	cmp	x1, #0x8
   81538:	aa0103e3 	mov	x3, x1
   8153c:	5400018b 	b.lt	8156c <code_FILL+0x4c>  // b.tstop
   81540:	12001c44 	and	w4, w2, #0xff
   81544:	aa042085 	orr	x5, x4, x4, lsl #8
   81548:	aa0540a6 	orr	x6, x5, x5, lsl #16
   8154c:	aa0680c4 	orr	x4, x6, x6, lsl #32
   81550:	92400823 	and	x3, x1, #0x7
   81554:	d343fc21 	lsr	x1, x1, #3
   81558:	eb1f003f 	cmp	x1, xzr
   8155c:	5400008d 	b.le	8156c <code_FILL+0x4c>
   81560:	f8008404 	str	x4, [x0], #8
   81564:	d1000421 	sub	x1, x1, #0x1
   81568:	17fffffc 	b	81558 <code_FILL+0x38>
   8156c:	eb1f007f 	cmp	x3, xzr
   81570:	5400008d 	b.le	81580 <code_FILL+0x60>
   81574:	38001402 	strb	w2, [x0], #1
   81578:	d1000463 	sub	x3, x3, #0x1
   8157c:	17fffffc 	b	8156c <code_FILL+0x4c>
   81580:	f84086a0 	ldr	x0, [x21], #8
   81584:	f9400001 	ldr	x1, [x0]
   81588:	d61f0020 	br	x1

000000000008158c <code_DSPFETCH>:
   8158c:	aa1303e0 	mov	x0, x19
   81590:	f81f8e60 	str	x0, [x19, #-8]!
   81594:	f84086a0 	ldr	x0, [x21], #8
   81598:	f9400001 	ldr	x1, [x0]
   8159c:	d61f0020 	br	x1

00000000000815a0 <code_DSPSTORE>:
   815a0:	f8408660 	ldr	x0, [x19], #8
   815a4:	aa0003f3 	mov	x19, x0
   815a8:	f84086a0 	ldr	x0, [x21], #8
   815ac:	f9400001 	ldr	x1, [x0]
   815b0:	d61f0020 	br	x1

00000000000815b4 <code_STACK>:
   815b4:	aa1303e0 	mov	x0, x19
   815b8:	58006957 	ldr	x23, 822e0 <next_impl_size>
   815bc:	f94002e1 	ldr	x1, [x23]
   815c0:	58006942 	ldr	x2, 822e8 <next_impl_size+0x8>
   815c4:	58006963 	ldr	x3, 822f0 <next_impl_size+0x10>
   815c8:	cb030042 	sub	x2, x2, x3
   815cc:	f81f8e60 	str	x0, [x19, #-8]!
   815d0:	f81f8e61 	str	x1, [x19, #-8]!
   815d4:	f81f8e62 	str	x2, [x19, #-8]!
   815d8:	f84086a0 	ldr	x0, [x21], #8
   815dc:	f9400001 	ldr	x1, [x0]
   815e0:	d61f0020 	br	x1

00000000000815e4 <code_RSPFETCH>:
   815e4:	f81f8e74 	str	x20, [x19, #-8]!
   815e8:	f84086a0 	ldr	x0, [x21], #8
   815ec:	f9400001 	ldr	x1, [x0]
   815f0:	d61f0020 	br	x1

00000000000815f4 <code_RSPSTORE>:
   815f4:	f8408674 	ldr	x20, [x19], #8
   815f8:	f84086a0 	ldr	x0, [x21], #8
   815fc:	f9400001 	ldr	x1, [x0]
   81600:	d61f0020 	br	x1

0000000000081604 <code_RSTACK>:
   81604:	aa1403e0 	mov	x0, x20
   81608:	58006797 	ldr	x23, 822f8 <next_impl_size+0x18>
   8160c:	f94002e1 	ldr	x1, [x23]
   81610:	58006782 	ldr	x2, 82300 <next_impl_size+0x20>
   81614:	580067a3 	ldr	x3, 82308 <next_impl_size+0x28>
   81618:	cb030042 	sub	x2, x2, x3
   8161c:	f81f8e60 	str	x0, [x19, #-8]!
   81620:	f81f8e61 	str	x1, [x19, #-8]!
   81624:	f81f8e62 	str	x2, [x19, #-8]!
   81628:	f84086a0 	ldr	x0, [x21], #8
   8162c:	f9400001 	ldr	x1, [x0]
   81630:	d61f0020 	br	x1

0000000000081634 <code_ALIGN>:
   81634:	580066f7 	ldr	x23, 82310 <next_impl_size+0x30>
   81638:	f94002e0 	ldr	x0, [x23]
   8163c:	91001c01 	add	x1, x0, #0x7
   81640:	927df022 	and	x2, x1, #0xfffffffffffffff8
   81644:	58006677 	ldr	x23, 82310 <next_impl_size+0x30>
   81648:	f90002e2 	str	x2, [x23]
   8164c:	f84086a0 	ldr	x0, [x21], #8
   81650:	f9400001 	ldr	x1, [x0]
   81654:	d61f0020 	br	x1

0000000000081658 <code_ALIGN16>:
   81658:	580065d7 	ldr	x23, 82310 <next_impl_size+0x30>
   8165c:	f94002e0 	ldr	x0, [x23]
   81660:	91003c01 	add	x1, x0, #0xf
   81664:	927cec22 	and	x2, x1, #0xfffffffffffffff0
   81668:	58006557 	ldr	x23, 82310 <next_impl_size+0x30>
   8166c:	f90002e2 	str	x2, [x23]
   81670:	f84086a0 	ldr	x0, [x21], #8
   81674:	f9400001 	ldr	x1, [x0]
   81678:	d61f0020 	br	x1

000000000008167c <code_ALIGN32>:
   8167c:	580064b7 	ldr	x23, 82310 <next_impl_size+0x30>
   81680:	f94002e0 	ldr	x0, [x23]
   81684:	91007c01 	add	x1, x0, #0x1f
   81688:	927be822 	and	x2, x1, #0xffffffffffffffe0
   8168c:	58006437 	ldr	x23, 82310 <next_impl_size+0x30>
   81690:	f90002e2 	str	x2, [x23]
   81694:	f84086a0 	ldr	x0, [x21], #8
   81698:	f9400001 	ldr	x1, [x0]
   8169c:	d61f0020 	br	x1

00000000000816a0 <code_ALIGNED>:
   816a0:	f8408660 	ldr	x0, [x19], #8
   816a4:	91001c01 	add	x1, x0, #0x7
   816a8:	927df022 	and	x2, x1, #0xfffffffffffffff8
   816ac:	f81f8e62 	str	x2, [x19, #-8]!
   816b0:	f84086a0 	ldr	x0, [x21], #8
   816b4:	f9400001 	ldr	x1, [x0]
   816b8:	d61f0020 	br	x1

00000000000816bc <code_NUMALIGNED>:
   816bc:	f8408660 	ldr	x0, [x19], #8
   816c0:	f8408661 	ldr	x1, [x19], #8
   816c4:	d2800022 	mov	x2, #0x1                   	// #1
   816c8:	9ac12042 	lsl	x2, x2, x1
   816cc:	d1000442 	sub	x2, x2, #0x1
   816d0:	8b020000 	add	x0, x0, x2
   816d4:	8a220000 	bic	x0, x0, x2
   816d8:	f81f8e60 	str	x0, [x19, #-8]!
   816dc:	f84086a0 	ldr	x0, [x21], #8
   816e0:	f9400001 	ldr	x1, [x0]
   816e4:	d61f0020 	br	x1

00000000000816e8 <code_TOCFA>:
   816e8:	f8408660 	ldr	x0, [x19], #8
   816ec:	91006000 	add	x0, x0, #0x18
   816f0:	f81f8e60 	str	x0, [x19, #-8]!
   816f4:	f84086a0 	ldr	x0, [x21], #8
   816f8:	f9400001 	ldr	x1, [x0]
   816fc:	d61f0020 	br	x1

0000000000081700 <code_CFAFROM>:
   81700:	f8408660 	ldr	x0, [x19], #8
   81704:	d1006000 	sub	x0, x0, #0x18
   81708:	f81f8e60 	str	x0, [x19, #-8]!
   8170c:	f84086a0 	ldr	x0, [x21], #8
   81710:	f9400001 	ldr	x1, [x0]
   81714:	d61f0020 	br	x1

0000000000081718 <code_TOBODY>:
   81718:	f8408660 	ldr	x0, [x19], #8
   8171c:	91002000 	add	x0, x0, #0x8
   81720:	f81f8e60 	str	x0, [x19, #-8]!
   81724:	f84086a0 	ldr	x0, [x21], #8
   81728:	f9400001 	ldr	x1, [x0]
   8172c:	d61f0020 	br	x1

0000000000081730 <code_BODYFROM>:
   81730:	f8408660 	ldr	x0, [x19], #8
   81734:	d1002000 	sub	x0, x0, #0x8
   81738:	f81f8e60 	str	x0, [x19, #-8]!
   8173c:	f84086a0 	ldr	x0, [x21], #8
   81740:	f9400001 	ldr	x1, [x0]
   81744:	d61f0020 	br	x1

0000000000081748 <code_XTTONT>:
   81748:	f8408660 	ldr	x0, [x19], #8
   8174c:	d1004000 	sub	x0, x0, #0x10
   81750:	f81f8e60 	str	x0, [x19, #-8]!
   81754:	f84086a0 	ldr	x0, [x21], #8
   81758:	f9400001 	ldr	x1, [x0]
   8175c:	d61f0020 	br	x1

0000000000081760 <code_CELLS>:
   81760:	f8408661 	ldr	x1, [x19], #8
   81764:	d37df020 	lsl	x0, x1, #3
   81768:	f81f8e60 	str	x0, [x19, #-8]!
   8176c:	f84086a0 	ldr	x0, [x21], #8
   81770:	f9400001 	ldr	x1, [x0]
   81774:	d61f0020 	br	x1

0000000000081778 <code_TTICK>:
   81778:	f84086a1 	ldr	x1, [x21], #8
   8177c:	f81f8e61 	str	x1, [x19, #-8]!
   81780:	f84086a0 	ldr	x0, [x21], #8
   81784:	f9400001 	ldr	x1, [x0]
   81788:	d61f0020 	br	x1

000000000008178c <code_TONAME>:
   8178c:	f8408660 	ldr	x0, [x19], #8
   81790:	91002001 	add	x1, x0, #0x8
   81794:	f81f8e61 	str	x1, [x19, #-8]!
   81798:	f84086a0 	ldr	x0, [x21], #8
   8179c:	f9400001 	ldr	x1, [x0]
   817a0:	d61f0020 	br	x1

00000000000817a4 <code_NAMEFROM>:
   817a4:	f8408660 	ldr	x0, [x19], #8
   817a8:	d1002001 	sub	x1, x0, #0x8
   817ac:	f81f8e61 	str	x1, [x19, #-8]!
   817b0:	f84086a0 	ldr	x0, [x21], #8
   817b4:	f9400001 	ldr	x1, [x0]
   817b8:	d61f0020 	br	x1

00000000000817bc <code_TOGGLEHIDE>:
   817bc:	f8408660 	ldr	x0, [x19], #8
   817c0:	91002000 	add	x0, x0, #0x8
   817c4:	39400001 	ldrb	w1, [x0]
   817c8:	521b0021 	eor	w1, w1, #0x20
   817cc:	39000001 	strb	w1, [x0]
   817d0:	f84086a0 	ldr	x0, [x21], #8
   817d4:	f9400001 	ldr	x1, [x0]
   817d8:	d61f0020 	br	x1

00000000000817dc <code_DOWNCASE>:
   817dc:	f840866c 	ldr	x12, [x19], #8
   817e0:	94000005 	bl	817f4 <downcase_impl>
   817e4:	f81f8e6c 	str	x12, [x19, #-8]!
   817e8:	f84086a0 	ldr	x0, [x21], #8
   817ec:	f9400001 	ldr	x1, [x0]
   817f0:	d61f0020 	br	x1

00000000000817f4 <downcase_impl>:
   817f4:	f101059f 	cmp	x12, #0x41
   817f8:	540000a3 	b.cc	8180c <downcase_impl+0x18>  // b.lo, b.ul, b.last
   817fc:	f101699f 	cmp	x12, #0x5a
   81800:	54000068 	b.hi	8180c <downcase_impl+0x18>  // b.pmore
   81804:	d101058c 	sub	x12, x12, #0x41
   81808:	9101858c 	add	x12, x12, #0x61
   8180c:	d65f03c0 	ret

0000000000081810 <code_COMPARE>:
   81810:	f8408663 	ldr	x3, [x19], #8
   81814:	f8408662 	ldr	x2, [x19], #8
   81818:	f8408661 	ldr	x1, [x19], #8
   8181c:	f8408660 	ldr	x0, [x19], #8

0000000000081820 <cc_top>:
   81820:	eb1f003f 	cmp	x1, xzr
   81824:	540000e1 	b.ne	81840 <cc_leftmore>  // b.any
   81828:	eb1f007f 	cmp	x3, xzr
   8182c:	54000061 	b.ne	81838 <cc_rightmore>  // b.any
   81830:	aa1f03e6 	mov	x6, xzr
   81834:	14000011 	b	81878 <cc_done>

0000000000081838 <cc_rightmore>:
   81838:	92800006 	mov	x6, #0xffffffffffffffff    	// #-1
   8183c:	1400000f 	b	81878 <cc_done>

0000000000081840 <cc_leftmore>:
   81840:	eb1f007f 	cmp	x3, xzr
   81844:	54000061 	b.ne	81850 <cc_comparenext>  // b.any
   81848:	d2800026 	mov	x6, #0x1                   	// #1
   8184c:	1400000b 	b	81878 <cc_done>

0000000000081850 <cc_comparenext>:
   81850:	3840140a 	ldrb	w10, [x0], #1
   81854:	d1000421 	sub	x1, x1, #0x1
   81858:	3840144b 	ldrb	w11, [x2], #1
   8185c:	d1000463 	sub	x3, x3, #0x1
   81860:	eb0b015f 	cmp	x10, x11
   81864:	54fffde0 	b.eq	81820 <cc_top>  // b.none
   81868:	5400006b 	b.lt	81874 <cc_firstlt>  // b.tstop
   8186c:	d2800026 	mov	x6, #0x1                   	// #1
   81870:	14000002 	b	81878 <cc_done>

0000000000081874 <cc_firstlt>:
   81874:	92800006 	mov	x6, #0xffffffffffffffff    	// #-1

0000000000081878 <cc_done>:
   81878:	f81f8e66 	str	x6, [x19, #-8]!
   8187c:	f84086a0 	ldr	x0, [x21], #8
   81880:	f9400001 	ldr	x1, [x0]
   81884:	d61f0020 	br	x1

0000000000081888 <code_CICOMPARE>:
   81888:	f8408663 	ldr	x3, [x19], #8
   8188c:	f8408662 	ldr	x2, [x19], #8
   81890:	f8408661 	ldr	x1, [x19], #8
   81894:	f8408660 	ldr	x0, [x19], #8

0000000000081898 <ci_top>:
   81898:	eb1f003f 	cmp	x1, xzr
   8189c:	540000e1 	b.ne	818b8 <ci_leftmore>  // b.any
   818a0:	eb1f007f 	cmp	x3, xzr
   818a4:	54000061 	b.ne	818b0 <ci_rightmore>  // b.any
   818a8:	aa1f03e6 	mov	x6, xzr
   818ac:	14000015 	b	81900 <ci_done>

00000000000818b0 <ci_rightmore>:
   818b0:	92800006 	mov	x6, #0xffffffffffffffff    	// #-1
   818b4:	14000013 	b	81900 <ci_done>

00000000000818b8 <ci_leftmore>:
   818b8:	eb1f007f 	cmp	x3, xzr
   818bc:	54000061 	b.ne	818c8 <ci_comparenext>  // b.any
   818c0:	d2800026 	mov	x6, #0x1                   	// #1
   818c4:	1400000f 	b	81900 <ci_done>

00000000000818c8 <ci_comparenext>:
   818c8:	3840140c 	ldrb	w12, [x0], #1
   818cc:	97ffffca 	bl	817f4 <downcase_impl>
   818d0:	aa0c03ea 	mov	x10, x12
   818d4:	d1000421 	sub	x1, x1, #0x1
   818d8:	3840144c 	ldrb	w12, [x2], #1
   818dc:	97ffffc6 	bl	817f4 <downcase_impl>
   818e0:	aa0c03eb 	mov	x11, x12
   818e4:	d1000463 	sub	x3, x3, #0x1
   818e8:	eb0b015f 	cmp	x10, x11
   818ec:	54fffd60 	b.eq	81898 <ci_top>  // b.none
   818f0:	5400006b 	b.lt	818fc <ci_firstlt>  // b.tstop
   818f4:	d2800026 	mov	x6, #0x1                   	// #1
   818f8:	14000002 	b	81900 <ci_done>

00000000000818fc <ci_firstlt>:
   818fc:	92800006 	mov	x6, #0xffffffffffffffff    	// #-1

0000000000081900 <ci_done>:
   81900:	f81f8e66 	str	x6, [x19, #-8]!
   81904:	f84086a0 	ldr	x0, [x21], #8
   81908:	f9400001 	ldr	x1, [x0]
   8190c:	d61f0020 	br	x1

0000000000081910 <code_FSTOLOWER>:
   81910:	f8408661 	ldr	x1, [x19], #8
   81914:	f8408660 	ldr	x0, [x19], #8
   81918:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8191c:	94000005 	bl	81930 <fstolower_impl>
   81920:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81924:	f84086a0 	ldr	x0, [x21], #8
   81928:	f9400001 	ldr	x1, [x0]
   8192c:	d61f0020 	br	x1

0000000000081930 <fstolower_impl>:
   81930:	eb1f003f 	cmp	x1, xzr
   81934:	5400016d 	b.le	81960 <fstolower_impl+0x30>
   81938:	38401402 	ldrb	w2, [x0], #1
   8193c:	d1000421 	sub	x1, x1, #0x1
   81940:	f101045f 	cmp	x2, #0x41
   81944:	54ffff63 	b.cc	81930 <fstolower_impl>  // b.lo, b.ul, b.last
   81948:	f101685f 	cmp	x2, #0x5a
   8194c:	54ffff28 	b.hi	81930 <fstolower_impl>  // b.pmore
   81950:	d1010442 	sub	x2, x2, #0x41
   81954:	91018442 	add	x2, x2, #0x61
   81958:	381ff002 	sturb	w2, [x0, #-1]
   8195c:	17fffff5 	b	81930 <fstolower_impl>
   81960:	d65f03c0 	ret

0000000000081964 <code_STOLOWER>:
   81964:	f8408660 	ldr	x0, [x19], #8
   81968:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8196c:	94000005 	bl	81980 <stolower_impl>
   81970:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81974:	f84086a0 	ldr	x0, [x21], #8
   81978:	f9400001 	ldr	x1, [x0]
   8197c:	d61f0020 	br	x1

0000000000081980 <stolower_impl>:
   81980:	38401401 	ldrb	w1, [x0], #1
   81984:	17ffffeb 	b	81930 <fstolower_impl>

0000000000081988 <code_TOSCS>:
   81988:	f8408662 	ldr	x2, [x19], #8
   8198c:	f8408661 	ldr	x1, [x19], #8
   81990:	f8408660 	ldr	x0, [x19], #8
   81994:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81998:	94000005 	bl	819ac <toscs_impl>
   8199c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   819a0:	f84086a0 	ldr	x0, [x21], #8
   819a4:	f9400001 	ldr	x1, [x0]
   819a8:	d61f0020 	br	x1

00000000000819ac <toscs_impl>:
   819ac:	38001402 	strb	w2, [x0], #1
   819b0:	eb1f005f 	cmp	x2, xzr
   819b4:	540000a0 	b.eq	819c8 <toscs_impl+0x1c>  // b.none
   819b8:	38401423 	ldrb	w3, [x1], #1
   819bc:	38001403 	strb	w3, [x0], #1
   819c0:	d1000442 	sub	x2, x2, #0x1
   819c4:	17fffffb 	b	819b0 <toscs_impl+0x4>
   819c8:	f2400c03 	ands	x3, x0, #0xf
   819cc:	54000060 	b.eq	819d8 <toscs_impl+0x2c>  // b.none
   819d0:	3800141f 	strb	wzr, [x0], #1
   819d4:	17fffffd 	b	819c8 <toscs_impl+0x1c>
   819d8:	d65f03c0 	ret

00000000000819dc <code_NTELL>:
   819dc:	f8408660 	ldr	x0, [x19], #8
   819e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   819e4:	94000005 	bl	819f8 <ntell_impl>
   819e8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   819ec:	f84086a0 	ldr	x0, [x21], #8
   819f0:	f9400001 	ldr	x1, [x0]
   819f4:	d61f0020 	br	x1

00000000000819f8 <ntell_impl>:
   819f8:	aa0003f7 	mov	x23, x0
   819fc:	384016f8 	ldrb	w24, [x23], #1
   81a00:	92401318 	and	x24, x24, #0x1f
   81a04:	eb1f031f 	cmp	x24, xzr
   81a08:	540000ed 	b.le	81a24 <ntell_impl+0x2c>
   81a0c:	384016e0 	ldrb	w0, [x23], #1
   81a10:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81a14:	94000653 	bl	83360 <uart_putb>
   81a18:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81a1c:	d1000718 	sub	x24, x24, #0x1
   81a20:	17fffff9 	b	81a04 <ntell_impl+0xc>
   81a24:	d65f03c0 	ret

0000000000081a28 <code_MATCHXT>:
   81a28:	f8408660 	ldr	x0, [x19], #8
   81a2c:	f8408661 	ldr	x1, [x19], #8
   81a30:	f8408662 	ldr	x2, [x19], #8

0000000000081a34 <matchxt_impl>:
   81a34:	eb1f001f 	cmp	x0, xzr
   81a38:	54000101 	b.ne	81a58 <matchxt_impl+0x24>  // b.any
   81a3c:	f81f8e62 	str	x2, [x19, #-8]!
   81a40:	f81f8e61 	str	x1, [x19, #-8]!
   81a44:	f81f8e7f 	str	xzr, [x19, #-8]!
   81a48:	f81f8e7f 	str	xzr, [x19, #-8]!
   81a4c:	9280000b 	mov	x11, #0xffffffffffffffff    	// #-1
   81a50:	f81f8e6b 	str	x11, [x19, #-8]!
   81a54:	14000042 	b	81b5c <matchxt_matched+0x40>
   81a58:	39402009 	ldrb	w9, [x0, #8]
   81a5c:	aa0903ec 	mov	x12, x9
   81a60:	721a013f 	tst	w9, #0x40
   81a64:	9a81104a 	csel	x10, x2, x1, ne	// ne = any
   81a68:	92401129 	and	x9, x9, #0x1f
   81a6c:	58004577 	ldr	x23, 82318 <next_impl_size+0x38>
   81a70:	f94002ef 	ldr	x15, [x23]
   81a74:	eb1f01ff 	cmp	x15, xzr
   81a78:	540003a0 	b.eq	81aec <matchxt_impl+0xb8>  // b.none
   81a7c:	aa0003fa 	mov	x26, x0
   81a80:	aa0103fb 	mov	x27, x1
   81a84:	aa0203fc 	mov	x28, x2
   81a88:	aa0a03f9 	mov	x25, x10
   81a8c:	aa0a03e0 	mov	x0, x10
   81a90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81a94:	97ffffd9 	bl	819f8 <ntell_impl>
   81a98:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81a9c:	d2800740 	mov	x0, #0x3a                  	// #58
   81aa0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81aa4:	94000663 	bl	83430 <uart_putc>
   81aa8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81aac:	d2800400 	mov	x0, #0x20                  	// #32
   81ab0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81ab4:	9400065f 	bl	83430 <uart_putc>
   81ab8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81abc:	aa1a03e0 	mov	x0, x26
   81ac0:	91002000 	add	x0, x0, #0x8
   81ac4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81ac8:	97ffffcc 	bl	819f8 <ntell_impl>
   81acc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81ad0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81ad4:	94000108 	bl	81ef4 <cr_impl>
   81ad8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81adc:	aa1903ea 	mov	x10, x25
   81ae0:	aa1c03e2 	mov	x2, x28
   81ae4:	aa1b03e1 	mov	x1, x27
   81ae8:	aa1a03e0 	mov	x0, x26
   81aec:	f9400143 	ldr	x3, [x10]
   81af0:	f9400404 	ldr	x4, [x0, #8]
   81af4:	92801808 	mov	x8, #0xffffffffffffff3f    	// #-193
   81af8:	8a080087 	and	x7, x4, x8
   81afc:	eb0300ff 	cmp	x7, x3
   81b00:	54000261 	b.ne	81b4c <matchxt_matched+0x30>  // b.any
   81b04:	f1001d3f 	cmp	x9, #0x7
   81b08:	540000a9 	b.ls	81b1c <matchxt_matched>  // b.plast
   81b0c:	f9400545 	ldr	x5, [x10, #8]
   81b10:	f9400806 	ldr	x6, [x0, #16]
   81b14:	eb0600bf 	cmp	x5, x6
   81b18:	540001a1 	b.ne	81b4c <matchxt_matched+0x30>  // b.any

0000000000081b1c <matchxt_matched>:
   81b1c:	92800017 	mov	x23, #0xffffffffffffffff    	// #-1
   81b20:	d2800038 	mov	x24, #0x1                   	// #1
   81b24:	f279019f 	tst	x12, #0x80
   81b28:	9a971303 	csel	x3, x24, x23, ne	// ne = any
   81b2c:	91006000 	add	x0, x0, #0x18
   81b30:	f81f8e62 	str	x2, [x19, #-8]!
   81b34:	f81f8e61 	str	x1, [x19, #-8]!
   81b38:	f81f8e60 	str	x0, [x19, #-8]!
   81b3c:	f81f8e63 	str	x3, [x19, #-8]!
   81b40:	9280000b 	mov	x11, #0xffffffffffffffff    	// #-1
   81b44:	f81f8e6b 	str	x11, [x19, #-8]!
   81b48:	14000005 	b	81b5c <matchxt_matched+0x40>
   81b4c:	f81f8e62 	str	x2, [x19, #-8]!
   81b50:	f81f8e61 	str	x1, [x19, #-8]!
   81b54:	f81f8e60 	str	x0, [x19, #-8]!
   81b58:	f81f8e7f 	str	xzr, [x19, #-8]!
   81b5c:	f84086a0 	ldr	x0, [x21], #8
   81b60:	f9400001 	ldr	x1, [x0]
   81b64:	d61f0020 	br	x1

0000000000081b68 <code_SOURCE>:
   81b68:	58003dd7 	ldr	x23, 82320 <next_impl_size+0x40>
   81b6c:	f94002e0 	ldr	x0, [x23]
   81b70:	58003dd7 	ldr	x23, 82328 <next_impl_size+0x48>
   81b74:	f94002e1 	ldr	x1, [x23]
   81b78:	f81f8e60 	str	x0, [x19, #-8]!
   81b7c:	f81f8e61 	str	x1, [x19, #-8]!
   81b80:	f84086a0 	ldr	x0, [x21], #8
   81b84:	f9400001 	ldr	x1, [x0]
   81b88:	d61f0020 	br	x1

0000000000081b8c <code_SOURCE_ID>:
   81b8c:	58003d37 	ldr	x23, 82330 <next_impl_size+0x50>
   81b90:	f94002e0 	ldr	x0, [x23]
   81b94:	f81f8e60 	str	x0, [x19, #-8]!
   81b98:	f84086a0 	ldr	x0, [x21], #8
   81b9c:	f9400001 	ldr	x1, [x0]
   81ba0:	d61f0020 	br	x1

0000000000081ba4 <code_INFETCH>:
   81ba4:	f8408660 	ldr	x0, [x19], #8
   81ba8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81bac:	94000007 	bl	81bc8 <inch_impl>
   81bb0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81bb4:	f81f8e60 	str	x0, [x19, #-8]!
   81bb8:	f81f8e61 	str	x1, [x19, #-8]!
   81bbc:	f84086a0 	ldr	x0, [x21], #8
   81bc0:	f9400001 	ldr	x1, [x0]
   81bc4:	d61f0020 	br	x1

0000000000081bc8 <inch_impl>:
   81bc8:	58003ad7 	ldr	x23, 82320 <next_impl_size+0x40>
   81bcc:	f94002e2 	ldr	x2, [x23]
   81bd0:	58003ad7 	ldr	x23, 82328 <next_impl_size+0x48>
   81bd4:	f94002e3 	ldr	x3, [x23]
   81bd8:	eb03001f 	cmp	x0, x3
   81bdc:	da9f23e1 	csetm	x1, cc	// cc = lo, ul, last
   81be0:	38606840 	ldrb	w0, [x2, x0]
   81be4:	d65f03c0 	ret

0000000000081be8 <code_INPLUS>:
   81be8:	58003a97 	ldr	x23, 82338 <next_impl_size+0x58>
   81bec:	f94002e0 	ldr	x0, [x23]
   81bf0:	580039d7 	ldr	x23, 82328 <next_impl_size+0x48>
   81bf4:	f94002e1 	ldr	x1, [x23]
   81bf8:	91000400 	add	x0, x0, #0x1
   81bfc:	eb01001f 	cmp	x0, x1
   81c00:	54000062 	b.cs	81c0c <code_INPLUS+0x24>  // b.hs, b.nlast
   81c04:	580039b7 	ldr	x23, 82338 <next_impl_size+0x58>
   81c08:	f90002e0 	str	x0, [x23]
   81c0c:	f84086a0 	ldr	x0, [x21], #8
   81c10:	f9400001 	ldr	x1, [x0]
   81c14:	d61f0020 	br	x1

0000000000081c18 <code_PARTOK>:
   81c18:	f840866c 	ldr	x12, [x19], #8
   81c1c:	f840866b 	ldr	x11, [x19], #8
   81c20:	580038d7 	ldr	x23, 82338 <next_impl_size+0x58>
   81c24:	f94002ea 	ldr	x10, [x23]
   81c28:	aa0a03ed 	mov	x13, x10
   81c2c:	aa0a03e0 	mov	x0, x10
   81c30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81c34:	97ffffe5 	bl	81bc8 <inch_impl>
   81c38:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81c3c:	eb1f003f 	cmp	x1, xzr
   81c40:	54000180 	b.eq	81c70 <code_PARTOK+0x58>  // b.none
   81c44:	aa0003e8 	mov	x8, x0
   81c48:	aa0103e9 	mov	x9, x1
   81c4c:	aa0b03e1 	mov	x1, x11
   81c50:	aa0c03e2 	mov	x2, x12
   81c54:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81c58:	97fffdbc 	bl	81348 <within_impl>
   81c5c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81c60:	ea090000 	ands	x0, x0, x9
   81c64:	54000060 	b.eq	81c70 <code_PARTOK+0x58>  // b.none
   81c68:	9100054a 	add	x10, x10, #0x1
   81c6c:	17fffff0 	b	81c2c <code_PARTOK+0x14>
   81c70:	58003657 	ldr	x23, 82338 <next_impl_size+0x58>
   81c74:	f90002ea 	str	x10, [x23]
   81c78:	cb0d0141 	sub	x1, x10, x13
   81c7c:	58003537 	ldr	x23, 82320 <next_impl_size+0x40>
   81c80:	f94002e0 	ldr	x0, [x23]
   81c84:	8b0d0000 	add	x0, x0, x13
   81c88:	f81f8e60 	str	x0, [x19, #-8]!
   81c8c:	f81f8e61 	str	x1, [x19, #-8]!
   81c90:	f84086a0 	ldr	x0, [x21], #8
   81c94:	f9400001 	ldr	x1, [x0]
   81c98:	d61f0020 	br	x1

0000000000081c9c <code_QNUMBER>:
   81c9c:	f8408661 	ldr	x1, [x19], #8
   81ca0:	f8408660 	ldr	x0, [x19], #8
   81ca4:	aa0003ea 	mov	x10, x0
   81ca8:	aa0103eb 	mov	x11, x1
   81cac:	aa1f03ec 	mov	x12, xzr
   81cb0:	8b010001 	add	x1, x0, x1
   81cb4:	eb01001f 	cmp	x0, x1
   81cb8:	54000962 	b.cs	81de4 <.notConvertible>  // b.hs, b.nlast
   81cbc:	38401404 	ldrb	w4, [x0], #1
   81cc0:	71009c9f 	cmp	w4, #0x27
   81cc4:	540000e1 	b.ne	81ce0 <.notCharNum>  // b.any
   81cc8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81ccc:	94006445 	bl	9ade0 <convertChar>
   81cd0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81cd4:	f10000bf 	cmp	x5, #0x0
   81cd8:	54000860 	b.eq	81de4 <.notConvertible>  // b.none
   81cdc:	1400003c 	b	81dcc <.convertible>

0000000000081ce0 <.notCharNum>:
   81ce0:	f100949f 	cmp	x4, #0x25
   81ce4:	54000061 	b.ne	81cf0 <.notBinary>  // b.any
   81ce8:	d2800047 	mov	x7, #0x2                   	// #2
   81cec:	14000008 	b	81d0c <.loadNext>

0000000000081cf0 <.notBinary>:
   81cf0:	f1008c9f 	cmp	x4, #0x23
   81cf4:	54000061 	b.ne	81d00 <.notDecimal>  // b.any
   81cf8:	d2800147 	mov	x7, #0xa                   	// #10
   81cfc:	14000004 	b	81d0c <.loadNext>

0000000000081d00 <.notDecimal>:
   81d00:	f100909f 	cmp	x4, #0x24
   81d04:	540000c1 	b.ne	81d1c <.notHex>  // b.any
   81d08:	d2800207 	mov	x7, #0x10                  	// #16

0000000000081d0c <.loadNext>:
   81d0c:	eb01001f 	cmp	x0, x1
   81d10:	540006a2 	b.cs	81de4 <.notConvertible>  // b.hs, b.nlast
   81d14:	38401404 	ldrb	w4, [x0], #1
   81d18:	14000003 	b	81d24 <.checkMinus>

0000000000081d1c <.notHex>:
   81d1c:	58003137 	ldr	x23, 82340 <next_impl_size+0x60>
   81d20:	f94002e7 	ldr	x7, [x23]

0000000000081d24 <.checkMinus>:
   81d24:	aa1f03e6 	mov	x6, xzr
   81d28:	f100b49f 	cmp	x4, #0x2d
   81d2c:	da9f13ec 	csetm	x12, eq	// eq = none
   81d30:	54000081 	b.ne	81d40 <.handleDigit>  // b.any
   81d34:	eb01001f 	cmp	x0, x1
   81d38:	54000562 	b.cs	81de4 <.notConvertible>  // b.hs, b.nlast
   81d3c:	38401404 	ldrb	w4, [x0], #1

0000000000081d40 <.handleDigit>:
   81d40:	d280060f 	mov	x15, #0x30                  	// #48
   81d44:	d2800750 	mov	x16, #0x3a                  	// #58
   81d48:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81d4c:	94006433 	bl	9ae18 <withinRange>
   81d50:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81d54:	eb1f00bf 	cmp	x5, xzr
   81d58:	54000060 	b.eq	81d64 <.notDecDigit>  // b.none
   81d5c:	d100c084 	sub	x4, x4, #0x30
   81d60:	14000014 	b	81db0 <.gotDigit>

0000000000081d64 <.notDecDigit>:
   81d64:	d280082f 	mov	x15, #0x41                  	// #65
   81d68:	d2800b70 	mov	x16, #0x5b                  	// #91
   81d6c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81d70:	9400642a 	bl	9ae18 <withinRange>
   81d74:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81d78:	eb1f00bf 	cmp	x5, xzr
   81d7c:	54000080 	b.eq	81d8c <.notAlphaDigit>  // b.none
   81d80:	d1010484 	sub	x4, x4, #0x41
   81d84:	91002884 	add	x4, x4, #0xa
   81d88:	1400000a 	b	81db0 <.gotDigit>

0000000000081d8c <.notAlphaDigit>:
   81d8c:	d2800c2f 	mov	x15, #0x61                  	// #97
   81d90:	d2800f70 	mov	x16, #0x7b                  	// #123
   81d94:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81d98:	94006420 	bl	9ae18 <withinRange>
   81d9c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81da0:	eb1f00bf 	cmp	x5, xzr
   81da4:	54000200 	b.eq	81de4 <.notConvertible>  // b.none
   81da8:	d1018484 	sub	x4, x4, #0x61
   81dac:	91002884 	add	x4, x4, #0xa

0000000000081db0 <.gotDigit>:
   81db0:	eb07009f 	cmp	x4, x7
   81db4:	54000182 	b.cs	81de4 <.notConvertible>  // b.hs, b.nlast
   81db8:	9b0710c6 	madd	x6, x6, x7, x4
   81dbc:	eb01001f 	cmp	x0, x1
   81dc0:	54000060 	b.eq	81dcc <.convertible>  // b.none
   81dc4:	38401404 	ldrb	w4, [x0], #1
   81dc8:	17ffffde 	b	81d40 <.handleDigit>

0000000000081dcc <.convertible>:
   81dcc:	eb1f019f 	cmp	x12, xzr
   81dd0:	54000040 	b.eq	81dd8 <.positive>  // b.none
   81dd4:	cb0603e6 	neg	x6, x6

0000000000081dd8 <.positive>:
   81dd8:	92800005 	mov	x5, #0xffffffffffffffff    	// #-1
   81ddc:	f81f8e66 	str	x6, [x19, #-8]!
   81de0:	14000004 	b	81df0 <.pushFlag>

0000000000081de4 <.notConvertible>:
   81de4:	aa1f03e5 	mov	x5, xzr
   81de8:	f81f8e6a 	str	x10, [x19, #-8]!
   81dec:	f81f8e6b 	str	x11, [x19, #-8]!

0000000000081df0 <.pushFlag>:
   81df0:	f81f8e65 	str	x5, [x19, #-8]!
   81df4:	f84086a0 	ldr	x0, [x21], #8
   81df8:	f9400001 	ldr	x1, [x0]
   81dfc:	d61f0020 	br	x1

0000000000081e00 <code_SAVEINPUT>:
   81e00:	58002917 	ldr	x23, 82320 <next_impl_size+0x40>
   81e04:	f94002e0 	ldr	x0, [x23]
   81e08:	58002917 	ldr	x23, 82328 <next_impl_size+0x48>
   81e0c:	f94002e1 	ldr	x1, [x23]
   81e10:	58002957 	ldr	x23, 82338 <next_impl_size+0x58>
   81e14:	f94002e2 	ldr	x2, [x23]
   81e18:	580028d7 	ldr	x23, 82330 <next_impl_size+0x50>
   81e1c:	f94002e3 	ldr	x3, [x23]
   81e20:	f81f8e80 	str	x0, [x20, #-8]!
   81e24:	f81f8e81 	str	x1, [x20, #-8]!
   81e28:	f81f8e82 	str	x2, [x20, #-8]!
   81e2c:	f81f8e83 	str	x3, [x20, #-8]!
   81e30:	f84086a0 	ldr	x0, [x21], #8
   81e34:	f9400001 	ldr	x1, [x0]
   81e38:	d61f0020 	br	x1

0000000000081e3c <code_RESTOREINPUT>:
   81e3c:	f8408683 	ldr	x3, [x20], #8
   81e40:	f8408682 	ldr	x2, [x20], #8
   81e44:	f8408681 	ldr	x1, [x20], #8
   81e48:	f8408680 	ldr	x0, [x20], #8
   81e4c:	58002737 	ldr	x23, 82330 <next_impl_size+0x50>
   81e50:	f90002e3 	str	x3, [x23]
   81e54:	58002737 	ldr	x23, 82338 <next_impl_size+0x58>
   81e58:	f90002e2 	str	x2, [x23]
   81e5c:	58002677 	ldr	x23, 82328 <next_impl_size+0x48>
   81e60:	f90002e1 	str	x1, [x23]
   81e64:	580025f7 	ldr	x23, 82320 <next_impl_size+0x40>
   81e68:	f90002e0 	str	x0, [x23]
   81e6c:	f84086a0 	ldr	x0, [x21], #8
   81e70:	f9400001 	ldr	x1, [x0]
   81e74:	d61f0020 	br	x1

0000000000081e78 <code_SETINPUT>:
   81e78:	f8408663 	ldr	x3, [x19], #8
   81e7c:	f8408662 	ldr	x2, [x19], #8
   81e80:	f8408661 	ldr	x1, [x19], #8
   81e84:	f8408660 	ldr	x0, [x19], #8
   81e88:	58002557 	ldr	x23, 82330 <next_impl_size+0x50>
   81e8c:	f90002e3 	str	x3, [x23]
   81e90:	58002557 	ldr	x23, 82338 <next_impl_size+0x58>
   81e94:	f90002e2 	str	x2, [x23]
   81e98:	58002497 	ldr	x23, 82328 <next_impl_size+0x48>
   81e9c:	f90002e1 	str	x1, [x23]
   81ea0:	58002417 	ldr	x23, 82320 <next_impl_size+0x40>
   81ea4:	f90002e0 	str	x0, [x23]
   81ea8:	f84086a0 	ldr	x0, [x21], #8
   81eac:	f9400001 	ldr	x1, [x0]
   81eb0:	d61f0020 	br	x1

0000000000081eb4 <code_EXECUTE>:
   81eb4:	f8408660 	ldr	x0, [x19], #8
   81eb8:	f9400001 	ldr	x1, [x0]
   81ebc:	d61f0020 	br	x1

0000000000081ec0 <code_EMIT>:
   81ec0:	f8408660 	ldr	x0, [x19], #8
   81ec4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81ec8:	9400055a 	bl	83430 <uart_putc>
   81ecc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81ed0:	f84086a0 	ldr	x0, [x21], #8
   81ed4:	f9400001 	ldr	x1, [x0]
   81ed8:	d61f0020 	br	x1

0000000000081edc <code_CR>:
   81edc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81ee0:	94000005 	bl	81ef4 <cr_impl>
   81ee4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81ee8:	f84086a0 	ldr	x0, [x21], #8
   81eec:	f9400001 	ldr	x1, [x0]
   81ef0:	d61f0020 	br	x1

0000000000081ef4 <cr_impl>:
   81ef4:	d2800140 	mov	x0, #0xa                   	// #10
   81ef8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81efc:	94000519 	bl	83360 <uart_putb>
   81f00:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81f04:	d28001a0 	mov	x0, #0xd                   	// #13
   81f08:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81f0c:	94000515 	bl	83360 <uart_putb>
   81f10:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81f14:	d65f03c0 	ret

0000000000081f18 <code_TELL>:
   81f18:	f840867b 	ldr	x27, [x19], #8
   81f1c:	f840867a 	ldr	x26, [x19], #8
   81f20:	eb1f037f 	cmp	x27, xzr
   81f24:	540000ed 	b.le	81f40 <code_TELL+0x28>
   81f28:	38401740 	ldrb	w0, [x26], #1
   81f2c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81f30:	94000540 	bl	83430 <uart_putc>
   81f34:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81f38:	d100077b 	sub	x27, x27, #0x1
   81f3c:	17fffff9 	b	81f20 <code_TELL+0x8>
   81f40:	f84086a0 	ldr	x0, [x21], #8
   81f44:	f9400001 	ldr	x1, [x0]
   81f48:	d61f0020 	br	x1

0000000000081f4c <code_KEY>:
   81f4c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81f50:	94000524 	bl	833e0 <uart_getc>
   81f54:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81f58:	f81f8e60 	str	x0, [x19, #-8]!
   81f5c:	f84086a0 	ldr	x0, [x21], #8
   81f60:	f9400001 	ldr	x1, [x0]
   81f64:	d61f0020 	br	x1

0000000000081f68 <code_TYPE>:
   81f68:	f840867b 	ldr	x27, [x19], #8
   81f6c:	f840867a 	ldr	x26, [x19], #8
   81f70:	eb1f037f 	cmp	x27, xzr
   81f74:	540000ed 	b.le	81f90 <code_TYPE+0x28>
   81f78:	38401740 	ldrb	w0, [x26], #1
   81f7c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81f80:	9400052c 	bl	83430 <uart_putc>
   81f84:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81f88:	d100077b 	sub	x27, x27, #0x1
   81f8c:	17fffff9 	b	81f70 <code_TYPE+0x8>
   81f90:	f84086a0 	ldr	x0, [x21], #8
   81f94:	f9400001 	ldr	x1, [x0]
   81f98:	d61f0020 	br	x1

0000000000081f9c <code_REFILL>:
   81f9c:	58001cb7 	ldr	x23, 82330 <next_impl_size+0x50>
   81fa0:	f94002e0 	ldr	x0, [x23]
   81fa4:	eb1f001f 	cmp	x0, xzr
   81fa8:	54000221 	b.ne	81fec <.ref_notuser>  // b.any
   81fac:	58001ce0 	ldr	x0, 82348 <next_impl_size+0x68>
   81fb0:	58001d01 	ldr	x1, 82350 <next_impl_size+0x70>
   81fb4:	58001d37 	ldr	x23, 82358 <next_impl_size+0x78>
   81fb8:	f94002e2 	ldr	x2, [x23]
   81fbc:	d2800023 	mov	x3, #0x1                   	// #1
   81fc0:	cb020062 	sub	x2, x3, x2
   81fc4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   81fc8:	9400016e 	bl	82580 <kernel_readline>
   81fcc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   81fd0:	58001ad7 	ldr	x23, 82328 <next_impl_size+0x48>
   81fd4:	f90002e0 	str	x0, [x23]
   81fd8:	58001b17 	ldr	x23, 82338 <next_impl_size+0x58>
   81fdc:	f90002ff 	str	xzr, [x23]
   81fe0:	aa3f03e0 	mvn	x0, xzr
   81fe4:	f81f8e60 	str	x0, [x19, #-8]!
   81fe8:	14000002 	b	81ff0 <.ref_done>

0000000000081fec <.ref_notuser>:
   81fec:	f81f8e7f 	str	xzr, [x19, #-8]!

0000000000081ff0 <.ref_done>:
   81ff0:	f84086a0 	ldr	x0, [x21], #8
   81ff4:	f9400001 	ldr	x1, [x0]
   81ff8:	d61f0020 	br	x1

0000000000081ffc <code_GETTICKS>:
   81ffc:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82000:	94000c30 	bl	850c0 <timer_get_ticks>
   82004:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82008:	f81f8e60 	str	x0, [x19, #-8]!
   8200c:	f84086a0 	ldr	x0, [x21], #8
   82010:	f9400001 	ldr	x1, [x0]
   82014:	d61f0020 	br	x1

0000000000082018 <code_SCSLR1>:
   82018:	d5381000 	mrs	x0, sctlr_el1
   8201c:	f81f8e60 	str	x0, [x19, #-8]!
   82020:	f84086a0 	ldr	x0, [x21], #8
   82024:	f9400001 	ldr	x1, [x0]
   82028:	d61f0020 	br	x1

000000000008202c <code_DHGI>:
   8202c:	f8408664 	ldr	x4, [x19], #8
   82030:	f8408663 	ldr	x3, [x19], #8
   82034:	f8408662 	ldr	x2, [x19], #8
   82038:	f8408661 	ldr	x1, [x19], #8
   8203c:	f8408660 	ldr	x0, [x19], #8
   82040:	8b040c45 	add	x5, x2, x4, lsl #3
   82044:	eb05005f 	cmp	x2, x5
   82048:	54000380 	b.eq	820b8 <code_DHGI+0x8c>  // b.none
   8204c:	f240007f 	tst	x3, #0x1
   82050:	9a811007 	csel	x7, x0, x1, ne	// ne = any
   82054:	f27f007f 	tst	x3, #0x2
   82058:	9a811008 	csel	x8, x0, x1, ne	// ne = any
   8205c:	aa0880e7 	orr	x7, x7, x8, lsl #32
   82060:	f9000047 	str	x7, [x2]
   82064:	f27e007f 	tst	x3, #0x4
   82068:	9a811007 	csel	x7, x0, x1, ne	// ne = any
   8206c:	f27d007f 	tst	x3, #0x8
   82070:	9a811008 	csel	x8, x0, x1, ne	// ne = any
   82074:	aa0880e7 	orr	x7, x7, x8, lsl #32
   82078:	f9000447 	str	x7, [x2, #8]
   8207c:	f27c007f 	tst	x3, #0x10
   82080:	9a811007 	csel	x7, x0, x1, ne	// ne = any
   82084:	f27b007f 	tst	x3, #0x20
   82088:	9a811008 	csel	x8, x0, x1, ne	// ne = any
   8208c:	aa0880e7 	orr	x7, x7, x8, lsl #32
   82090:	f9000847 	str	x7, [x2, #16]
   82094:	f27a007f 	tst	x3, #0x40
   82098:	9a811007 	csel	x7, x0, x1, ne	// ne = any
   8209c:	f279007f 	tst	x3, #0x80
   820a0:	9a811008 	csel	x8, x0, x1, ne	// ne = any
   820a4:	aa0880e7 	orr	x7, x7, x8, lsl #32
   820a8:	f9000c47 	str	x7, [x2, #24]
   820ac:	8b040042 	add	x2, x2, x4
   820b0:	d348fc63 	lsr	x3, x3, #8
   820b4:	17ffffe4 	b	82044 <code_DHGI+0x18>
   820b8:	f81f8e60 	str	x0, [x19, #-8]!
   820bc:	f81f8e61 	str	x1, [x19, #-8]!
   820c0:	f81f8e62 	str	x2, [x19, #-8]!
   820c4:	f84086a0 	ldr	x0, [x21], #8
   820c8:	f9400001 	ldr	x1, [x0]
   820cc:	d61f0020 	br	x1

00000000000820d0 <code_DHGISCALED>:
   820d0:	f8408664 	ldr	x4, [x19], #8
   820d4:	f8408663 	ldr	x3, [x19], #8
   820d8:	f8408662 	ldr	x2, [x19], #8
   820dc:	f8408661 	ldr	x1, [x19], #8
   820e0:	f8408660 	ldr	x0, [x19], #8
   820e4:	aa00800a 	orr	x10, x0, x0, lsl #32
   820e8:	aa01802b 	orr	x11, x1, x1, lsl #32
   820ec:	8b041045 	add	x5, x2, x4, lsl #4
   820f0:	aa0203ec 	mov	x12, x2
   820f4:	8b04018c 	add	x12, x12, x4
   820f8:	eb05005f 	cmp	x2, x5
   820fc:	540004a0 	b.eq	82190 <code_DHGISCALED+0xc0>  // b.none
   82100:	f240007f 	tst	x3, #0x1
   82104:	9a8b1147 	csel	x7, x10, x11, ne	// ne = any
   82108:	f9000047 	str	x7, [x2]
   8210c:	f9000187 	str	x7, [x12]
   82110:	f27f007f 	tst	x3, #0x2
   82114:	9a8b1147 	csel	x7, x10, x11, ne	// ne = any
   82118:	f9000447 	str	x7, [x2, #8]
   8211c:	f9000587 	str	x7, [x12, #8]
   82120:	f27e007f 	tst	x3, #0x4
   82124:	9a8b1147 	csel	x7, x10, x11, ne	// ne = any
   82128:	f9000847 	str	x7, [x2, #16]
   8212c:	f9000987 	str	x7, [x12, #16]
   82130:	f27d007f 	tst	x3, #0x8
   82134:	9a8b1147 	csel	x7, x10, x11, ne	// ne = any
   82138:	f9000c47 	str	x7, [x2, #24]
   8213c:	f9000d87 	str	x7, [x12, #24]
   82140:	f27c007f 	tst	x3, #0x10
   82144:	9a8b1147 	csel	x7, x10, x11, ne	// ne = any
   82148:	f9001047 	str	x7, [x2, #32]
   8214c:	f9001187 	str	x7, [x12, #32]
   82150:	f27b007f 	tst	x3, #0x20
   82154:	9a8b1147 	csel	x7, x10, x11, ne	// ne = any
   82158:	f9001447 	str	x7, [x2, #40]
   8215c:	f9001587 	str	x7, [x12, #40]
   82160:	f27a007f 	tst	x3, #0x40
   82164:	9a8b1147 	csel	x7, x10, x11, ne	// ne = any
   82168:	f9001847 	str	x7, [x2, #48]
   8216c:	f9001987 	str	x7, [x12, #48]
   82170:	f279007f 	tst	x3, #0x80
   82174:	9a8b1147 	csel	x7, x10, x11, ne	// ne = any
   82178:	f9001c47 	str	x7, [x2, #56]
   8217c:	f9001d87 	str	x7, [x12, #56]
   82180:	8b040442 	add	x2, x2, x4, lsl #1
   82184:	8b04058c 	add	x12, x12, x4, lsl #1
   82188:	d348fc63 	lsr	x3, x3, #8
   8218c:	17ffffdb 	b	820f8 <code_DHGISCALED+0x28>
   82190:	f81f8e60 	str	x0, [x19, #-8]!
   82194:	f81f8e61 	str	x1, [x19, #-8]!
   82198:	f81f8e62 	str	x2, [x19, #-8]!
   8219c:	f84086a0 	ldr	x0, [x21], #8
   821a0:	f9400001 	ldr	x1, [x0]
   821a4:	d61f0020 	br	x1

00000000000821a8 <_DODOES>:
   821a8:	f81f8e95 	str	x21, [x20, #-8]!
   821ac:	aa1e03f5 	mov	x21, x30
   821b0:	910022b5 	add	x21, x21, #0x8
   821b4:	91002000 	add	x0, x0, #0x8
   821b8:	f81f8e60 	str	x0, [x19, #-8]!
   821bc:	f84086a0 	ldr	x0, [x21], #8
   821c0:	f9400001 	ldr	x1, [x0]
   821c4:	d61f0020 	br	x1

00000000000821c8 <dodoes_body>:
   821c8:	58000057 	ldr	x23, 821d0 <dodoes_body+0x8>
   821cc:	d63f02e0 	blr	x23
   821d0:	000821a8 	.word	0x000821a8
   821d4:	00000000 	.word	0x00000000

00000000000821d8 <code_ABORT>:
   821d8:	1400001d 	b	8224c <fith_abort>
   821dc:	f84086a0 	ldr	x0, [x21], #8
   821e0:	f9400001 	ldr	x1, [x0]
   821e4:	d61f0020 	br	x1

00000000000821e8 <test_msg>:
   821e8:	73696854 	.word	0x73696854
   821ec:	20736920 	.word	0x20736920
   821f0:	72702061 	.word	0x72702061
   821f4:	66746e69 	.word	0x66746e69
   821f8:	6574205f 	.word	0x6574205f
   821fc:	203a7473 	.word	0x203a7473
   82200:	25207325 	.word	0x25207325
   82204:	2520646c 	.word	0x2520646c
   82208:	68530a63 	.word	0x68530a63
   8220c:	646c756f 	.word	0x646c756f
   82210:	61657220 	.word	0x61657220
   82214:	54203a64 	.word	0x54203a64
   82218:	20747365 	.word	0x20747365
   8221c:	34333231 	.word	0x34333231
   82220:	63203635 	.word	0x63203635
   82224:	000a      	.short	0x000a

0000000000082226 <noword_msg>:
   82226:	6e55      	.short	0x6e55
   82228:	776f6e6b 	.word	0x776f6e6b
   8222c:	6f77206e 	.word	0x6f77206e
   82230:	3c206472 	.word	0x3c206472
   82234:	d503201f 	nop

0000000000082238 <fith_boot>:
   82238:	580006d7 	ldr	x23, 82310 <next_impl_size+0x30>
   8223c:	f90002e0 	str	x0, [x23]
   82240:	910003e0 	mov	x0, sp
   82244:	580008f7 	ldr	x23, 82360 <next_impl_size+0x80>
   82248:	f90002e0 	str	x0, [x23]

000000000008224c <fith_abort>:
   8224c:	580004f3 	ldr	x19, 822e8 <next_impl_size+0x8>
   82250:	58000497 	ldr	x23, 822e0 <next_impl_size>
   82254:	f90002f3 	str	x19, [x23]
   82258:	58000554 	ldr	x20, 82300 <next_impl_size+0x20>
   8225c:	580004f7 	ldr	x23, 822f8 <next_impl_size+0x18>
   82260:	f90002f4 	str	x20, [x23]
   82264:	580007f7 	ldr	x23, 82360 <next_impl_size+0x80>
   82268:	f94002e0 	ldr	x0, [x23]
   8226c:	9100001f 	mov	sp, x0

0000000000082270 <reset>:
   82270:	58000757 	ldr	x23, 82358 <next_impl_size+0x78>
   82274:	f90002ff 	str	xzr, [x23]
   82278:	58000617 	ldr	x23, 82338 <next_impl_size+0x58>
   8227c:	f90002ff 	str	xzr, [x23]
   82280:	58000597 	ldr	x23, 82330 <next_impl_size+0x50>
   82284:	f90002ff 	str	xzr, [x23]
   82288:	58000517 	ldr	x23, 82328 <next_impl_size+0x48>
   8228c:	f90002ff 	str	xzr, [x23]
   82290:	580005c0 	ldr	x0, 82348 <next_impl_size+0x68>
   82294:	58000477 	ldr	x23, 82320 <next_impl_size+0x40>
   82298:	f90002e0 	str	x0, [x23]
   8229c:	d2800140 	mov	x0, #0xa                   	// #10
   822a0:	58000517 	ldr	x23, 82340 <next_impl_size+0x60>
   822a4:	f90002e0 	str	x0, [x23]
   822a8:	58000615 	ldr	x21, 82368 <next_impl_size+0x88>
   822ac:	f84086a0 	ldr	x0, [x21], #8
   822b0:	f9400001 	ldr	x1, [x0]
   822b4:	d61f0020 	br	x1

00000000000822b8 <_DOVAR>:
   822b8:	91002001 	add	x1, x0, #0x8
   822bc:	f81f8e61 	str	x1, [x19, #-8]!

00000000000822c0 <_VARNEXT>:
   822c0:	f84086a0 	ldr	x0, [x21], #8
   822c4:	f9400001 	ldr	x1, [x0]
   822c8:	d61f0020 	br	x1

00000000000822cc <_DOCOL>:
   822cc:	f81f8e95 	str	x21, [x20, #-8]!
   822d0:	91002015 	add	x21, x0, #0x8

00000000000822d4 <_NEXT>:
   822d4:	f84086a0 	ldr	x0, [x21], #8
   822d8:	f9400001 	ldr	x1, [x0]
   822dc:	d61f0020 	br	x1

00000000000822e0 <next_impl_size>:
   822e0:	0009b450 	.word	0x0009b450
   822e4:	00000000 	.word	0x00000000
   822e8:	000a1000 	.word	0x000a1000
   822ec:	00000000 	.word	0x00000000
   822f0:	000a0000 	.word	0x000a0000
   822f4:	00000000 	.word	0x00000000
   822f8:	0009b478 	.word	0x0009b478
   822fc:	00000000 	.word	0x00000000
   82300:	000a1400 	.word	0x000a1400
   82304:	00000000 	.word	0x00000000
   82308:	000a1000 	.word	0x000a1000
   8230c:	00000000 	.word	0x00000000
   82310:	0009b428 	.word	0x0009b428
   82314:	00000000 	.word	0x00000000
   82318:	0009b3d8 	.word	0x0009b3d8
   8231c:	00000000 	.word	0x00000000
   82320:	00099f80 	.word	0x00099f80
   82324:	00000000 	.word	0x00000000
   82328:	00099fa8 	.word	0x00099fa8
   8232c:	00000000 	.word	0x00000000
   82330:	00099ff8 	.word	0x00099ff8
   82334:	00000000 	.word	0x00000000
   82338:	00099fd0 	.word	0x00099fd0
   8233c:	00000000 	.word	0x00000000
   82340:	0009b4c8 	.word	0x0009b4c8
   82344:	00000000 	.word	0x00000000
   82348:	0009a000 	.word	0x0009a000
   8234c:	00000000 	.word	0x00000000
   82350:	00000400 	.word	0x00000400
   82354:	00000000 	.word	0x00000000
   82358:	0009b400 	.word	0x0009b400
   8235c:	00000000 	.word	0x00000000
   82360:	0009b4a0 	.word	0x0009b4a0
   82364:	00000000 	.word	0x00000000
   82368:	0009b380 	.word	0x0009b380
   8236c:	00000000 	.word	0x00000000

0000000000082370 <CKernel::CKernel()>:
   82370:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82374:	d2855801 	mov	x1, #0x2ac0                	// #10944
   82378:	910003fd 	mov	x29, sp
   8237c:	a90153f3 	stp	x19, x20, [sp, #16]
   82380:	aa0003f3 	mov	x19, x0
   82384:	8b010014 	add	x20, x0, x1
   82388:	f90013f5 	str	x21, [sp, #32]
   8238c:	940014f5 	bl	87760 <CKernelOptions::CKernelOptions()>
   82390:	91226260 	add	x0, x19, #0x898
   82394:	52800021 	mov	w1, #0x1                   	// #1
   82398:	94000d5a 	bl	85900 <CCPUThrottle::CCPUThrottle(TCPUSpeed)>
   8239c:	91248260 	add	x0, x19, #0x920
   823a0:	94000ed4 	bl	85ef0 <CDeviceNameService::CDeviceNameService()>
   823a4:	d2800001 	mov	x1, #0x0                   	// #0
   823a8:	9124c260 	add	x0, x19, #0x930
   823ac:	52800003 	mov	w3, #0x0                   	// #0
   823b0:	52800002 	mov	w2, #0x0                   	// #0
   823b4:	94001bb7 	bl	89290 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>
   823b8:	d2835702 	mov	x2, #0x1ab8                	// #6840
   823bc:	8b020260 	add	x0, x19, x2
   823c0:	94002d40 	bl	8d8c0 <CExceptionHandler::CExceptionHandler()>
   823c4:	d2835803 	mov	x3, #0x1ac0                	// #6848
   823c8:	8b030275 	add	x21, x19, x3
   823cc:	aa1503e0 	mov	x0, x21
   823d0:	940030f0 	bl	8e790 <CInterruptSystem::CInterruptSystem()>
   823d4:	aa1503e1 	mov	x1, x21
   823d8:	aa1403e0 	mov	x0, x20
   823dc:	940025ad 	bl	8ba90 <CTimer::CTimer(CInterruptSystem*)>
   823e0:	d2856504 	mov	x4, #0x2b28                	// #11048
   823e4:	f94013f5 	ldr	x21, [sp, #32]
   823e8:	aa1403e2 	mov	x2, x20
   823ec:	8b040260 	add	x0, x19, x4
   823f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   823f4:	52800023 	mov	w3, #0x1                   	// #1
   823f8:	52800081 	mov	w1, #0x4                   	// #4
   823fc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82400:	140015ec 	b	87bb0 <CLogger::CLogger(unsigned int, CTimer*, bool)>
   82404:	d503201f 	nop
   82408:	d503201f 	nop
   8240c:	d503201f 	nop

0000000000082410 <CKernel::Initialize()>:
   82410:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82414:	910003fd 	mov	x29, sp
   82418:	52800004 	mov	w4, #0x0                   	// #0
   8241c:	52800023 	mov	w3, #0x1                   	// #1
   82420:	11438481 	add	w1, w4, #0xe1, lsl #12
   82424:	52800102 	mov	w2, #0x8                   	// #8
   82428:	a90153f3 	stp	x19, x20, [sp, #16]
   8242c:	9124c014 	add	x20, x0, #0x930
   82430:	aa0003f3 	mov	x19, x0
   82434:	aa1403e0 	mov	x0, x20
   82438:	94001c16 	bl	89490 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>
   8243c:	370000a0 	tbnz	w0, #0, 82450 <CKernel::Initialize()+0x40>
   82440:	a94153f3 	ldp	x19, x20, [sp, #16]
   82444:	52800000 	mov	w0, #0x0                   	// #0
   82448:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8244c:	d65f03c0 	ret
   82450:	aa1303e0 	mov	x0, x19
   82454:	9400140b 	bl	87480 <CKernelOptions::GetLogDevice() const>
   82458:	aa0003e1 	mov	x1, x0
   8245c:	52800002 	mov	w2, #0x0                   	// #0
   82460:	91248260 	add	x0, x19, #0x920
   82464:	94000f4f 	bl	861a0 <CDeviceNameService::GetDevice(char const*, bool)>
   82468:	aa0003e1 	mov	x1, x0
   8246c:	d2856502 	mov	x2, #0x2b28                	// #11048
   82470:	f100003f 	cmp	x1, #0x0
   82474:	8b020260 	add	x0, x19, x2
   82478:	9a941021 	csel	x1, x1, x20, ne	// ne = any
   8247c:	9400180d 	bl	884b0 <CLogger::Initialize(CDevice*)>
   82480:	3607fe00 	tbz	w0, #0, 82440 <CKernel::Initialize()+0x30>
   82484:	d2835801 	mov	x1, #0x1ac0                	// #6848
   82488:	8b010260 	add	x0, x19, x1
   8248c:	940030d5 	bl	8e7e0 <CInterruptSystem::Initialize()>
   82490:	3607fd80 	tbz	w0, #0, 82440 <CKernel::Initialize()+0x30>
   82494:	d2855800 	mov	x0, #0x2ac0                	// #10944
   82498:	8b000260 	add	x0, x19, x0
   8249c:	a94153f3 	ldp	x19, x20, [sp, #16]
   824a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   824a4:	140025df 	b	8bc20 <CTimer::Initialize()>
   824a8:	d503201f 	nop
   824ac:	d503201f 	nop

00000000000824b0 <rebootSystem>:
   824b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   824b4:	f0000060 	adrp	x0, 91000 <VectorTable>
   824b8:	91340000 	add	x0, x0, #0xd00
   824bc:	910003fd 	mov	x29, sp
   824c0:	a90153f3 	stp	x19, x20, [sp, #16]
   824c4:	52807d14 	mov	w20, #0x3e8                 	// #1000
   824c8:	72ab4014 	movk	w20, #0x5a00, lsl #16
   824cc:	d2800493 	mov	x19, #0x24                  	// #36
   824d0:	f2bfc213 	movk	x19, #0xfe10, lsl #16
   824d4:	9400042b 	bl	83580 <uart_puts>
   824d8:	2a1403e1 	mov	w1, w20
   824dc:	aa1303e0 	mov	x0, x19
   824e0:	97fff8cb 	bl	8080c <put32>
   824e4:	510f2281 	sub	w1, w20, #0x3c8
   824e8:	d1002260 	sub	x0, x19, #0x8
   824ec:	97fff8c8 	bl	8080c <put32>
   824f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   824f4:	92ffffe0 	mov	x0, #0xffffffffffff        	// #281474976710655
   824f8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   824fc:	17fff8c1 	b	80800 <delay>

0000000000082500 <getKernel>:
   82500:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82504:	52800060 	mov	w0, #0x3                   	// #3
   82508:	910003fd 	mov	x29, sp
   8250c:	a90153f3 	stp	x19, x20, [sp, #16]
   82510:	52800013 	mov	w19, #0x0                   	// #0
   82514:	52800014 	mov	w20, #0x0                   	// #0
   82518:	94000392 	bl	83360 <uart_putb>
   8251c:	52800060 	mov	w0, #0x3                   	// #3
   82520:	94000390 	bl	83360 <uart_putb>
   82524:	52800060 	mov	w0, #0x3                   	// #3
   82528:	9400038e 	bl	83360 <uart_putb>
   8252c:	94000399 	bl	83390 <uart_getb>
   82530:	12001c00 	and	w0, w0, #0xff
   82534:	1ad32000 	lsl	w0, w0, w19
   82538:	11002273 	add	w19, w19, #0x8
   8253c:	7100827f 	cmp	w19, #0x20
   82540:	0b000294 	add	w20, w20, w0
   82544:	54ffff41 	b.ne	8252c <getKernel+0x2c>  // b.any
   82548:	528009e0 	mov	w0, #0x4f                  	// #79
   8254c:	94000385 	bl	83360 <uart_putb>
   82550:	52800960 	mov	w0, #0x4b                  	// #75
   82554:	94000383 	bl	83360 <uart_putb>
   82558:	93407e81 	sxtw	x1, w20
   8255c:	d2a80000 	mov	x0, #0x40000000            	// #1073741824
   82560:	940003ec 	bl	83510 <uart_read>
   82564:	a94153f3 	ldp	x19, x20, [sp, #16]
   82568:	f0000060 	adrp	x0, 91000 <VectorTable>
   8256c:	9134a000 	add	x0, x0, #0xd28
   82570:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82574:	14000a1f 	b	84df0 <printf_>
   82578:	d503201f 	nop
   8257c:	d503201f 	nop

0000000000082580 <kernel_readline>:
   82580:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82584:	f100005f 	cmp	x2, #0x0
   82588:	910003fd 	mov	x29, sp
   8258c:	f0000061 	adrp	x1, 91000 <VectorTable>
   82590:	91350021 	add	x1, x1, #0xd40
   82594:	a90153f3 	stp	x19, x20, [sp, #16]
   82598:	aa0003f4 	mov	x20, x0
   8259c:	b0000080 	adrp	x0, 93000 <vtable for CString+0x38>
   825a0:	911ca000 	add	x0, x0, #0x728
   825a4:	9a810000 	csel	x0, x0, x1, eq	// eq = none
   825a8:	94000336 	bl	83280 <linenoise>
   825ac:	aa0003f3 	mov	x19, x0
   825b0:	94002940 	bl	8cab0 <strlen>
   825b4:	aa1303e1 	mov	x1, x19
   825b8:	aa0003f3 	mov	x19, x0
   825bc:	aa1303e2 	mov	x2, x19
   825c0:	aa1403e0 	mov	x0, x20
   825c4:	94002ac9 	bl	8d0e8 <memcpy>
   825c8:	52800141 	mov	w1, #0xa                   	// #10
   825cc:	91000660 	add	x0, x19, #0x1
   825d0:	38336a81 	strb	w1, [x20, x19]
   825d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   825d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   825dc:	d65f03c0 	ret

00000000000825e0 <_putchar>:
   825e0:	14000394 	b	83430 <uart_putc>
   825e4:	d503201f 	nop
   825e8:	d503201f 	nop
   825ec:	d503201f 	nop

00000000000825f0 <magicCallback>:
   825f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   825f4:	f0000060 	adrp	x0, 91000 <VectorTable>
   825f8:	91352000 	add	x0, x0, #0xd48
   825fc:	910003fd 	mov	x29, sp
   82600:	a90153f3 	stp	x19, x20, [sp, #16]
   82604:	52807d14 	mov	w20, #0x3e8                 	// #1000
   82608:	72ab4014 	movk	w20, #0x5a00, lsl #16
   8260c:	d2800493 	mov	x19, #0x24                  	// #36
   82610:	f2bfc213 	movk	x19, #0xfe10, lsl #16
   82614:	940009f7 	bl	84df0 <printf_>
   82618:	f0000060 	adrp	x0, 91000 <VectorTable>
   8261c:	91340000 	add	x0, x0, #0xd00
   82620:	940003d8 	bl	83580 <uart_puts>
   82624:	2a1403e1 	mov	w1, w20
   82628:	aa1303e0 	mov	x0, x19
   8262c:	97fff878 	bl	8080c <put32>
   82630:	510f2281 	sub	w1, w20, #0x3c8
   82634:	d1002260 	sub	x0, x19, #0x8
   82638:	97fff875 	bl	8080c <put32>
   8263c:	a94153f3 	ldp	x19, x20, [sp, #16]
   82640:	92ffffe0 	mov	x0, #0xffffffffffff        	// #281474976710655
   82644:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82648:	17fff86e 	b	80800 <delay>
   8264c:	d503201f 	nop

0000000000082650 <CKernel::~CKernel()>:
   82650:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82654:	910003fd 	mov	x29, sp
   82658:	f9000bf3 	str	x19, [sp, #16]
   8265c:	aa0003f3 	mov	x19, x0
   82660:	d2856500 	mov	x0, #0x2b28                	// #11048
   82664:	8b000260 	add	x0, x19, x0
   82668:	9400156a 	bl	87c10 <CLogger::~CLogger()>
   8266c:	d2855801 	mov	x1, #0x2ac0                	// #10944
   82670:	8b010260 	add	x0, x19, x1
   82674:	9400252b 	bl	8bb20 <CTimer::~CTimer()>
   82678:	d2835802 	mov	x2, #0x1ac0                	// #6848
   8267c:	8b020260 	add	x0, x19, x2
   82680:	94003050 	bl	8e7c0 <CInterruptSystem::~CInterruptSystem()>
   82684:	d2835703 	mov	x3, #0x1ab8                	// #6840
   82688:	8b030260 	add	x0, x19, x3
   8268c:	94002c9d 	bl	8d900 <CExceptionHandler::~CExceptionHandler()>
   82690:	9124c260 	add	x0, x19, #0x930
   82694:	94001e6b 	bl	8a040 <CSerialDevice::~CSerialDevice()>
   82698:	91248260 	add	x0, x19, #0x920
   8269c:	94000e25 	bl	85f30 <CDeviceNameService::~CDeviceNameService()>
   826a0:	91226260 	add	x0, x19, #0x898
   826a4:	94000def 	bl	85e60 <CCPUThrottle::~CCPUThrottle()>
   826a8:	aa1303e0 	mov	x0, x19
   826ac:	f9400bf3 	ldr	x19, [sp, #16]
   826b0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   826b4:	14001367 	b	87450 <CKernelOptions::~CKernelOptions()>
	...

00000000000826c0 <main>:
   826c0:	f0000061 	adrp	x1, 91000 <VectorTable>
   826c4:	913a8021 	add	x1, x1, #0xea0
   826c8:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   826cc:	910003fd 	mov	x29, sp
   826d0:	b0000160 	adrp	x0, af000 <_binary_src_fith_rc_5_start+0xdb35>
   826d4:	91094000 	add	x0, x0, #0x250
   826d8:	4c40a020 	ld1	{v0.16b, v1.16b}, [x1]
   826dc:	a90153f3 	stp	x19, x20, [sp, #16]
   826e0:	9100c3f3 	add	x19, sp, #0x30
   826e4:	f90013f5 	str	x21, [sp, #32]
   826e8:	4c00a260 	st1	{v0.16b, v1.16b}, [x19]
   826ec:	97ffff49 	bl	82410 <CKernel::Initialize()>
   826f0:	37000160 	tbnz	w0, #0, 8271c <main+0x5c>
   826f4:	9400156f 	bl	87cb0 <CLogger::Get()>
   826f8:	f0000063 	adrp	x3, 91000 <VectorTable>
   826fc:	f0000061 	adrp	x1, 91000 <VectorTable>
   82700:	9135a063 	add	x3, x3, #0xd68
   82704:	91362021 	add	x1, x1, #0xd88
   82708:	52800002 	mov	w2, #0x0                   	// #0
   8270c:	9400174d 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   82710:	d503201f 	nop
   82714:	d503201f 	nop
   82718:	17fffffe 	b	82710 <main+0x50>
   8271c:	940003b1 	bl	835e0 <uart_init>
   82720:	97fff83f 	bl	8081c <get_el>
   82724:	2a0003e1 	mov	w1, w0
   82728:	f0000062 	adrp	x2, 91000 <VectorTable>
   8272c:	91364040 	add	x0, x2, #0xd90
   82730:	f8617a62 	ldr	x2, [x19, x1, lsl #3]
   82734:	f0000073 	adrp	x19, 91000 <VectorTable>
   82738:	9137a273 	add	x19, x19, #0xde8
   8273c:	f0000075 	adrp	x21, 91000 <VectorTable>
   82740:	913822b5 	add	x21, x21, #0xe08
   82744:	940009ab 	bl	84df0 <printf_>
   82748:	f0000060 	adrp	x0, 91000 <VectorTable>
   8274c:	91374000 	add	x0, x0, #0xdd0
   82750:	940009a8 	bl	84df0 <printf_>
   82754:	aa1303e0 	mov	x0, x19
   82758:	940009a6 	bl	84df0 <printf_>
   8275c:	5284e200 	mov	w0, #0x2710                	// #10000
   82760:	94002848 	bl	8c880 <CTimer::SimpleMsDelay(unsigned int)>
   82764:	aa1303e0 	mov	x0, x19
   82768:	52800153 	mov	w19, #0xa                   	// #10
   8276c:	940009a1 	bl	84df0 <printf_>
   82770:	d2a80000 	mov	x0, #0x40000000            	// #1073741824
   82774:	94002b23 	bl	8d400 <operator new[](unsigned long)>
   82778:	aa0003f4 	mov	x20, x0
   8277c:	d503201f 	nop
   82780:	aa1403e0 	mov	x0, x20
   82784:	97fffead 	bl	82238 <fith_boot>
   82788:	aa1503e0 	mov	x0, x21
   8278c:	94000999 	bl	84df0 <printf_>
   82790:	71000673 	subs	w19, w19, #0x1
   82794:	54ffff61 	b.ne	82780 <main+0xc0>  // b.any
   82798:	f0000060 	adrp	x0, 91000 <VectorTable>
   8279c:	9138e000 	add	x0, x0, #0xe38
   827a0:	94000994 	bl	84df0 <printf_>
   827a4:	97ffff43 	bl	824b0 <rebootSystem>
   827a8:	a94153f3 	ldp	x19, x20, [sp, #16]
   827ac:	52800000 	mov	w0, #0x0                   	// #0
   827b0:	f94013f5 	ldr	x21, [sp, #32]
   827b4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   827b8:	d65f03c0 	ret
   827bc:	d503201f 	nop

00000000000827c0 <_GLOBAL__sub_I_gKernel>:
   827c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   827c4:	910003fd 	mov	x29, sp
   827c8:	f9000bf3 	str	x19, [sp, #16]
   827cc:	b0000173 	adrp	x19, af000 <_binary_src_fith_rc_5_start+0xdb35>
   827d0:	91094273 	add	x19, x19, #0x250
   827d4:	aa1303e0 	mov	x0, x19
   827d8:	97fffee6 	bl	82370 <CKernel::CKernel()>
   827dc:	90000182 	adrp	x2, b2000 <appendBuf+0xa0>
   827e0:	90000000 	adrp	x0, 82000 <code_GETTICKS+0x4>
   827e4:	aa1303e1 	mov	x1, x19
   827e8:	f9400bf3 	ldr	x19, [sp, #16]
   827ec:	910fe042 	add	x2, x2, #0x3f8
   827f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   827f4:	91194000 	add	x0, x0, #0x650
   827f8:	1400244a 	b	8b920 <__cxa_atexit>
   827fc:	00000000 	udf	#0

0000000000082800 <getCursorPosition(int, int) [clone .isra.0]>:
   82800:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   82804:	f0000060 	adrp	x0, 91000 <VectorTable>
   82808:	910003fd 	mov	x29, sp
   8280c:	d2800081 	mov	x1, #0x4                   	// #4
   82810:	913b0000 	add	x0, x0, #0xec0
   82814:	f90013f5 	str	x21, [sp, #32]
   82818:	9100c3f5 	add	x21, sp, #0x30
   8281c:	a90153f3 	stp	x19, x20, [sp, #16]
   82820:	52800014 	mov	w20, #0x0                   	// #0
   82824:	aa1503f3 	mov	x19, x21
   82828:	9400031e 	bl	834a0 <uart_write>
   8282c:	14000008 	b	8284c <getCursorPosition(int, int) [clone .isra.0]+0x4c>
   82830:	39c00260 	ldrsb	w0, [x19]
   82834:	91000673 	add	x19, x19, #0x1
   82838:	7101481f 	cmp	w0, #0x52
   8283c:	54000120 	b.eq	82860 <getCursorPosition(int, int) [clone .isra.0]+0x60>  // b.none
   82840:	11000694 	add	w20, w20, #0x1
   82844:	71007e9f 	cmp	w20, #0x1f
   82848:	540000c0 	b.eq	82860 <getCursorPosition(int, int) [clone .isra.0]+0x60>  // b.none
   8284c:	d2800021 	mov	x1, #0x1                   	// #1
   82850:	aa1303e0 	mov	x0, x19
   82854:	9400032f 	bl	83510 <uart_read>
   82858:	f100041f 	cmp	x0, #0x1
   8285c:	54fffea0 	b.eq	82830 <getCursorPosition(int, int) [clone .isra.0]+0x30>  // b.none
   82860:	38344abf 	strb	wzr, [x21, w20, uxtw]
   82864:	39c0c3e0 	ldrsb	w0, [sp, #48]
   82868:	71006c1f 	cmp	w0, #0x1b
   8286c:	540004a1 	b.ne	82900 <getCursorPosition(int, int) [clone .isra.0]+0x100>  // b.any
   82870:	39c0c7e0 	ldrsb	w0, [sp, #49]
   82874:	71016c1f 	cmp	w0, #0x5b
   82878:	54000441 	b.ne	82900 <getCursorPosition(int, int) [clone .isra.0]+0x100>  // b.any
   8287c:	d2800000 	mov	x0, #0x0                   	// #0
   82880:	9100cbe2 	add	x2, sp, #0x32
   82884:	14000006 	b	8289c <getCursorPosition(int, int) [clone .isra.0]+0x9c>
   82888:	91000400 	add	x0, x0, #0x1
   8288c:	34000301 	cbz	w1, 828ec <getCursorPosition(int, int) [clone .isra.0]+0xec>
   82890:	f100781f 	cmp	x0, #0x1e
   82894:	91000442 	add	x2, x2, #0x1
   82898:	540002a0 	b.eq	828ec <getCursorPosition(int, int) [clone .isra.0]+0xec>  // b.none
   8289c:	39c00041 	ldrsb	w1, [x2]
   828a0:	7100ec3f 	cmp	w1, #0x3b
   828a4:	54ffff21 	b.ne	82888 <getCursorPosition(int, int) [clone .isra.0]+0x88>  // b.any
   828a8:	91000401 	add	x1, x0, #0x1
   828ac:	3900005f 	strb	wzr, [x2]
   828b0:	9100cbe2 	add	x2, sp, #0x32
   828b4:	38e16842 	ldrsb	w2, [x2, x1]
   828b8:	9100cbe3 	add	x3, sp, #0x32
   828bc:	52800000 	mov	w0, #0x0                   	// #0
   828c0:	8b010061 	add	x1, x3, x1
   828c4:	34000142 	cbz	w2, 828ec <getCursorPosition(int, int) [clone .isra.0]+0xec>
   828c8:	0b000800 	add	w0, w0, w0, lsl #2
   828cc:	5100c043 	sub	w3, w2, #0x30
   828d0:	38c01c22 	ldrsb	w2, [x1, #1]!
   828d4:	0b000460 	add	w0, w3, w0, lsl #1
   828d8:	35ffff82 	cbnz	w2, 828c8 <getCursorPosition(int, int) [clone .isra.0]+0xc8>
   828dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   828e0:	f94013f5 	ldr	x21, [sp, #32]
   828e4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   828e8:	d65f03c0 	ret
   828ec:	52800000 	mov	w0, #0x0                   	// #0
   828f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   828f4:	f94013f5 	ldr	x21, [sp, #32]
   828f8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   828fc:	d65f03c0 	ret
   82900:	12800000 	mov	w0, #0xffffffff            	// #-1
   82904:	17fffffb 	b	828f0 <getCursorPosition(int, int) [clone .isra.0]+0xf0>
   82908:	d503201f 	nop
   8290c:	d503201f 	nop

0000000000082910 <refreshSingleLine(linenoiseState*, int)>:
   82910:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   82914:	910003fd 	mov	x29, sp
   82918:	f9002bfb 	str	x27, [sp, #80]
   8291c:	aa0003fb 	mov	x27, x0
   82920:	f9401400 	ldr	x0, [x0, #40]
   82924:	a90153f3 	stp	x19, x20, [sp, #16]
   82928:	a9025bf5 	stp	x21, x22, [sp, #32]
   8292c:	2a0103f5 	mov	w21, w1
   82930:	a90363f7 	stp	x23, x24, [sp, #48]
   82934:	a9046bf9 	stp	x25, x26, [sp, #64]
   82938:	9400285e 	bl	8cab0 <strlen>
   8293c:	f9401f7a 	ldr	x26, [x27, #56]
   82940:	aa0003f6 	mov	x22, x0
   82944:	a9448b73 	ldp	x19, x2, [x27, #72]
   82948:	f9400f61 	ldr	x1, [x27, #24]
   8294c:	8b1a0004 	add	x4, x0, x26
   82950:	eb02009f 	cmp	x4, x2
   82954:	aa0103f4 	mov	x20, x1
   82958:	54000143 	b.cc	82980 <refreshSingleLine(linenoiseState*, int)+0x70>  // b.lo, b.ul, b.last
   8295c:	8b000026 	add	x6, x1, x0
   82960:	91000694 	add	x20, x20, #0x1
   82964:	cb140344 	sub	x4, x26, x20
   82968:	8b0400c5 	add	x5, x6, x4
   8296c:	eb0200bf 	cmp	x5, x2
   82970:	54ffff82 	b.cs	82960 <refreshSingleLine(linenoiseState*, int)+0x50>  // b.hs, b.nlast
   82974:	cb140273 	sub	x19, x19, x20
   82978:	8b04003a 	add	x26, x1, x4
   8297c:	8b010273 	add	x19, x19, x1
   82980:	8b1302c1 	add	x1, x22, x19
   82984:	eb01005f 	cmp	x2, x1
   82988:	540000c2 	b.cs	829a0 <refreshSingleLine(linenoiseState*, int)+0x90>  // b.hs, b.nlast
   8298c:	d503201f 	nop
   82990:	d1000673 	sub	x19, x19, #0x1
   82994:	8b1302c4 	add	x4, x22, x19
   82998:	eb02009f 	cmp	x4, x2
   8299c:	54ffffa8 	b.hi	82990 <refreshSingleLine(linenoiseState*, int)+0x80>  // b.pmore
   829a0:	d2800801 	mov	x1, #0x40                  	// #64
   829a4:	f0000062 	adrp	x2, 91000 <VectorTable>
   829a8:	913b2042 	add	x2, x2, #0xec8
   829ac:	910183e0 	add	x0, sp, #0x60
   829b0:	94000958 	bl	84f10 <snprintf_>
   829b4:	910183e0 	add	x0, sp, #0x60
   829b8:	9400283e 	bl	8cab0 <strlen>
   829bc:	710ffc1f 	cmp	w0, #0x3ff
   829c0:	2a0003f8 	mov	w24, w0
   829c4:	540003ed 	b.le	82a40 <refreshSingleLine(linenoiseState*, int)+0x130>
   829c8:	f0000179 	adrp	x25, b1000 <gKernel+0x1db0>
   829cc:	913d8339 	add	x25, x25, #0xf60
   829d0:	d2800017 	mov	x23, #0x0                   	// #0
   829d4:	52800018 	mov	w24, #0x0                   	// #0
   829d8:	37080455 	tbnz	w21, #1, 82a60 <refreshSingleLine(linenoiseState*, int)+0x150>
   829dc:	f0000062 	adrp	x2, 91000 <VectorTable>
   829e0:	913b6042 	add	x2, x2, #0xed8
   829e4:	d2800801 	mov	x1, #0x40                  	// #64
   829e8:	910183e0 	add	x0, sp, #0x60
   829ec:	94000949 	bl	84f10 <snprintf_>
   829f0:	910183e0 	add	x0, sp, #0x60
   829f4:	9400282f 	bl	8cab0 <strlen>
   829f8:	0b000318 	add	w24, w24, w0
   829fc:	710fff1f 	cmp	w24, #0x3ff
   82a00:	540000cc 	b.gt	82a18 <refreshSingleLine(linenoiseState*, int)+0x108>
   82a04:	93407c02 	sxtw	x2, w0
   82a08:	910183e1 	add	x1, sp, #0x60
   82a0c:	8b170320 	add	x0, x25, x23
   82a10:	93407f17 	sxtw	x23, w24
   82a14:	940029b5 	bl	8d0e8 <memcpy>
   82a18:	aa1703e1 	mov	x1, x23
   82a1c:	aa1903e0 	mov	x0, x25
   82a20:	940002a0 	bl	834a0 <uart_write>
   82a24:	a94153f3 	ldp	x19, x20, [sp, #16]
   82a28:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82a2c:	a94363f7 	ldp	x23, x24, [sp, #48]
   82a30:	a9446bf9 	ldp	x25, x26, [sp, #64]
   82a34:	f9402bfb 	ldr	x27, [sp, #80]
   82a38:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   82a3c:	d65f03c0 	ret
   82a40:	93407c17 	sxtw	x23, w0
   82a44:	f0000179 	adrp	x25, b1000 <gKernel+0x1db0>
   82a48:	913d8339 	add	x25, x25, #0xf60
   82a4c:	aa1703e2 	mov	x2, x23
   82a50:	aa1903e0 	mov	x0, x25
   82a54:	910183e1 	add	x1, sp, #0x60
   82a58:	940029a4 	bl	8d0e8 <memcpy>
   82a5c:	360ffc15 	tbz	w21, #1, 829dc <refreshSingleLine(linenoiseState*, int)+0xcc>
   82a60:	f940177b 	ldr	x27, [x27, #40]
   82a64:	aa1b03e0 	mov	x0, x27
   82a68:	94002812 	bl	8cab0 <strlen>
   82a6c:	0b000315 	add	w21, w24, w0
   82a70:	710ffebf 	cmp	w21, #0x3ff
   82a74:	540002ad 	b.le	82ac8 <refreshSingleLine(linenoiseState*, int)+0x1b8>
   82a78:	0b130315 	add	w21, w24, w19
   82a7c:	710ffebf 	cmp	w21, #0x3ff
   82a80:	5400036d 	b.le	82aec <refreshSingleLine(linenoiseState*, int)+0x1dc>
   82a84:	d2800801 	mov	x1, #0x40                  	// #64
   82a88:	f0000062 	adrp	x2, 91000 <VectorTable>
   82a8c:	913b6042 	add	x2, x2, #0xed8
   82a90:	910183e0 	add	x0, sp, #0x60
   82a94:	9400091f 	bl	84f10 <snprintf_>
   82a98:	910183e0 	add	x0, sp, #0x60
   82a9c:	94002805 	bl	8cab0 <strlen>
   82aa0:	0b000313 	add	w19, w24, w0
   82aa4:	710ffe7f 	cmp	w19, #0x3ff
   82aa8:	5400030d 	b.le	82b08 <refreshSingleLine(linenoiseState*, int)+0x1f8>
   82aac:	f0000062 	adrp	x2, 91000 <VectorTable>
   82ab0:	0b160343 	add	w3, w26, w22
   82ab4:	913b4042 	add	x2, x2, #0xed0
   82ab8:	d2800801 	mov	x1, #0x40                  	// #64
   82abc:	910183e0 	add	x0, sp, #0x60
   82ac0:	94000914 	bl	84f10 <snprintf_>
   82ac4:	17ffffcb 	b	829f0 <refreshSingleLine(linenoiseState*, int)+0xe0>
   82ac8:	93407c02 	sxtw	x2, w0
   82acc:	aa1b03e1 	mov	x1, x27
   82ad0:	8b170320 	add	x0, x25, x23
   82ad4:	2a1503f8 	mov	w24, w21
   82ad8:	93407eb7 	sxtw	x23, w21
   82adc:	0b130315 	add	w21, w24, w19
   82ae0:	94002982 	bl	8d0e8 <memcpy>
   82ae4:	710ffebf 	cmp	w21, #0x3ff
   82ae8:	54fffcec 	b.gt	82a84 <refreshSingleLine(linenoiseState*, int)+0x174>
   82aec:	8b170320 	add	x0, x25, x23
   82af0:	93407e62 	sxtw	x2, w19
   82af4:	aa1403e1 	mov	x1, x20
   82af8:	93407eb7 	sxtw	x23, w21
   82afc:	2a1503f8 	mov	w24, w21
   82b00:	9400297a 	bl	8d0e8 <memcpy>
   82b04:	17ffffe0 	b	82a84 <refreshSingleLine(linenoiseState*, int)+0x174>
   82b08:	93407c02 	sxtw	x2, w0
   82b0c:	910183e1 	add	x1, sp, #0x60
   82b10:	8b170320 	add	x0, x25, x23
   82b14:	2a1303f8 	mov	w24, w19
   82b18:	94002974 	bl	8d0e8 <memcpy>
   82b1c:	f0000062 	adrp	x2, 91000 <VectorTable>
   82b20:	0b160343 	add	w3, w26, w22
   82b24:	913b4042 	add	x2, x2, #0xed0
   82b28:	d2800801 	mov	x1, #0x40                  	// #64
   82b2c:	910183e0 	add	x0, sp, #0x60
   82b30:	93407e77 	sxtw	x23, w19
   82b34:	940008f7 	bl	84f10 <snprintf_>
   82b38:	17ffffae 	b	829f0 <refreshSingleLine(linenoiseState*, int)+0xe0>
   82b3c:	d503201f 	nop

0000000000082b40 <linenoiseClearScreen>:
   82b40:	f0000060 	adrp	x0, 91000 <VectorTable>
   82b44:	d28000e1 	mov	x1, #0x7                   	// #7
   82b48:	913b8000 	add	x0, x0, #0xee0
   82b4c:	14000255 	b	834a0 <uart_write>

0000000000082b50 <linenoiseHide>:
   82b50:	52800021 	mov	w1, #0x1                   	// #1
   82b54:	17ffff6f 	b	82910 <refreshSingleLine(linenoiseState*, int)>
   82b58:	d503201f 	nop
   82b5c:	d503201f 	nop

0000000000082b60 <linenoiseShow>:
   82b60:	52800041 	mov	w1, #0x2                   	// #2
   82b64:	17ffff6b 	b	82910 <refreshSingleLine(linenoiseState*, int)>
   82b68:	d503201f 	nop
   82b6c:	d503201f 	nop

0000000000082b70 <linenoiseEditInsert(linenoiseState*, char)>:
   82b70:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82b74:	910003fd 	mov	x29, sp
   82b78:	f9402402 	ldr	x2, [x0, #72]
   82b7c:	a90153f3 	stp	x19, x20, [sp, #16]
   82b80:	13001c34 	sxtb	w20, w1
   82b84:	f9401001 	ldr	x1, [x0, #32]
   82b88:	eb01005f 	cmp	x2, x1
   82b8c:	54000322 	b.cs	82bf0 <linenoiseEditInsert(linenoiseState*, char)+0x80>  // b.hs, b.nlast
   82b90:	f9401c03 	ldr	x3, [x0, #56]
   82b94:	aa0003f3 	mov	x19, x0
   82b98:	f9400c04 	ldr	x4, [x0, #24]
   82b9c:	eb03005f 	cmp	x2, x3
   82ba0:	8b030081 	add	x1, x4, x3
   82ba4:	540002e1 	b.ne	82c00 <linenoiseEditInsert(linenoiseState*, char)+0x90>  // b.any
   82ba8:	38226894 	strb	w20, [x4, x2]
   82bac:	f9401c02 	ldr	x2, [x0, #56]
   82bb0:	f9402401 	ldr	x1, [x0, #72]
   82bb4:	f9400c03 	ldr	x3, [x0, #24]
   82bb8:	91000442 	add	x2, x2, #0x1
   82bbc:	91000421 	add	x1, x1, #0x1
   82bc0:	f9001c02 	str	x2, [x0, #56]
   82bc4:	f9002401 	str	x1, [x0, #72]
   82bc8:	3821687f 	strb	wzr, [x3, x1]
   82bcc:	f9401801 	ldr	x1, [x0, #48]
   82bd0:	a9448803 	ldp	x3, x2, [x0, #72]
   82bd4:	8b030021 	add	x1, x1, x3
   82bd8:	eb02003f 	cmp	x1, x2
   82bdc:	540003e2 	b.cs	82c58 <linenoiseEditInsert(linenoiseState*, char)+0xe8>  // b.hs, b.nlast
   82be0:	d2800021 	mov	x1, #0x1                   	// #1
   82be4:	9100bfe0 	add	x0, sp, #0x2f
   82be8:	3900bff4 	strb	w20, [sp, #47]
   82bec:	9400022d 	bl	834a0 <uart_write>
   82bf0:	a94153f3 	ldp	x19, x20, [sp, #16]
   82bf4:	52800000 	mov	w0, #0x0                   	// #0
   82bf8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82bfc:	d65f03c0 	ret
   82c00:	91000460 	add	x0, x3, #0x1
   82c04:	cb030042 	sub	x2, x2, x3
   82c08:	8b000080 	add	x0, x4, x0
   82c0c:	94002785 	bl	8ca20 <memmove>
   82c10:	f9400e63 	ldr	x3, [x19, #24]
   82c14:	aa1303e0 	mov	x0, x19
   82c18:	52800061 	mov	w1, #0x3                   	// #3
   82c1c:	f9401e62 	ldr	x2, [x19, #56]
   82c20:	38226874 	strb	w20, [x3, x2]
   82c24:	f9401e63 	ldr	x3, [x19, #56]
   82c28:	f9402662 	ldr	x2, [x19, #72]
   82c2c:	f9400e64 	ldr	x4, [x19, #24]
   82c30:	91000463 	add	x3, x3, #0x1
   82c34:	91000442 	add	x2, x2, #0x1
   82c38:	f9001e63 	str	x3, [x19, #56]
   82c3c:	f9002662 	str	x2, [x19, #72]
   82c40:	3822689f 	strb	wzr, [x4, x2]
   82c44:	97ffff33 	bl	82910 <refreshSingleLine(linenoiseState*, int)>
   82c48:	a94153f3 	ldp	x19, x20, [sp, #16]
   82c4c:	52800000 	mov	w0, #0x0                   	// #0
   82c50:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82c54:	d65f03c0 	ret
   82c58:	52800061 	mov	w1, #0x3                   	// #3
   82c5c:	97ffff2d 	bl	82910 <refreshSingleLine(linenoiseState*, int)>
   82c60:	a94153f3 	ldp	x19, x20, [sp, #16]
   82c64:	52800000 	mov	w0, #0x0                   	// #0
   82c68:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82c6c:	d65f03c0 	ret

0000000000082c70 <linenoiseEditMoveLeft(linenoiseState*)>:
   82c70:	f9401c01 	ldr	x1, [x0, #56]
   82c74:	b5000041 	cbnz	x1, 82c7c <linenoiseEditMoveLeft(linenoiseState*)+0xc>
   82c78:	d65f03c0 	ret
   82c7c:	d1000423 	sub	x3, x1, #0x1
   82c80:	52800061 	mov	w1, #0x3                   	// #3
   82c84:	f9001c03 	str	x3, [x0, #56]
   82c88:	17ffff22 	b	82910 <refreshSingleLine(linenoiseState*, int)>
   82c8c:	d503201f 	nop

0000000000082c90 <linenoiseEditMoveRight(linenoiseState*)>:
   82c90:	f9401c01 	ldr	x1, [x0, #56]
   82c94:	f9402403 	ldr	x3, [x0, #72]
   82c98:	eb03003f 	cmp	x1, x3
   82c9c:	54000041 	b.ne	82ca4 <linenoiseEditMoveRight(linenoiseState*)+0x14>  // b.any
   82ca0:	d65f03c0 	ret
   82ca4:	91000423 	add	x3, x1, #0x1
   82ca8:	52800061 	mov	w1, #0x3                   	// #3
   82cac:	f9001c03 	str	x3, [x0, #56]
   82cb0:	17ffff18 	b	82910 <refreshSingleLine(linenoiseState*, int)>
   82cb4:	d503201f 	nop
   82cb8:	d503201f 	nop
   82cbc:	d503201f 	nop

0000000000082cc0 <linenoiseEditMoveHome(linenoiseState*)>:
   82cc0:	f9401c01 	ldr	x1, [x0, #56]
   82cc4:	b5000041 	cbnz	x1, 82ccc <linenoiseEditMoveHome(linenoiseState*)+0xc>
   82cc8:	d65f03c0 	ret
   82ccc:	52800061 	mov	w1, #0x3                   	// #3
   82cd0:	f9001c1f 	str	xzr, [x0, #56]
   82cd4:	17ffff0f 	b	82910 <refreshSingleLine(linenoiseState*, int)>
   82cd8:	d503201f 	nop
   82cdc:	d503201f 	nop

0000000000082ce0 <linenoiseEditMoveEnd(linenoiseState*)>:
   82ce0:	f9401c01 	ldr	x1, [x0, #56]
   82ce4:	f9402403 	ldr	x3, [x0, #72]
   82ce8:	eb03003f 	cmp	x1, x3
   82cec:	54000041 	b.ne	82cf4 <linenoiseEditMoveEnd(linenoiseState*)+0x14>  // b.any
   82cf0:	d65f03c0 	ret
   82cf4:	52800061 	mov	w1, #0x3                   	// #3
   82cf8:	f9001c03 	str	x3, [x0, #56]
   82cfc:	17ffff05 	b	82910 <refreshSingleLine(linenoiseState*, int)>

0000000000082d00 <linenoiseEditHistoryNext(linenoiseState*, int)>:
   82d00:	d65f03c0 	ret
   82d04:	d503201f 	nop
   82d08:	d503201f 	nop
   82d0c:	d503201f 	nop

0000000000082d10 <linenoiseEditDelete(linenoiseState*)>:
   82d10:	f9402402 	ldr	x2, [x0, #72]
   82d14:	b5000042 	cbnz	x2, 82d1c <linenoiseEditDelete(linenoiseState*)+0xc>
   82d18:	d65f03c0 	ret
   82d1c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82d20:	910003fd 	mov	x29, sp
   82d24:	f9000bf3 	str	x19, [sp, #16]
   82d28:	aa0003f3 	mov	x19, x0
   82d2c:	f9401c00 	ldr	x0, [x0, #56]
   82d30:	eb00005f 	cmp	x2, x0
   82d34:	54000088 	b.hi	82d44 <linenoiseEditDelete(linenoiseState*)+0x34>  // b.pmore
   82d38:	f9400bf3 	ldr	x19, [sp, #16]
   82d3c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82d40:	d65f03c0 	ret
   82d44:	f9400e63 	ldr	x3, [x19, #24]
   82d48:	91000401 	add	x1, x0, #0x1
   82d4c:	d1000442 	sub	x2, x2, #0x1
   82d50:	cb000042 	sub	x2, x2, x0
   82d54:	8b010061 	add	x1, x3, x1
   82d58:	8b000060 	add	x0, x3, x0
   82d5c:	94002731 	bl	8ca20 <memmove>
   82d60:	f9402662 	ldr	x2, [x19, #72]
   82d64:	aa1303e0 	mov	x0, x19
   82d68:	52800061 	mov	w1, #0x3                   	// #3
   82d6c:	f9400e63 	ldr	x3, [x19, #24]
   82d70:	d1000442 	sub	x2, x2, #0x1
   82d74:	f9002662 	str	x2, [x19, #72]
   82d78:	3822687f 	strb	wzr, [x3, x2]
   82d7c:	f9400bf3 	ldr	x19, [sp, #16]
   82d80:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82d84:	17fffee3 	b	82910 <refreshSingleLine(linenoiseState*, int)>
   82d88:	d503201f 	nop
   82d8c:	d503201f 	nop

0000000000082d90 <linenoiseEditBackspace(linenoiseState*)>:
   82d90:	f9401c01 	ldr	x1, [x0, #56]
   82d94:	b5000041 	cbnz	x1, 82d9c <linenoiseEditBackspace(linenoiseState*)+0xc>
   82d98:	d65f03c0 	ret
   82d9c:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   82da0:	910003fd 	mov	x29, sp
   82da4:	f9402402 	ldr	x2, [x0, #72]
   82da8:	f9000bf3 	str	x19, [sp, #16]
   82dac:	aa0003f3 	mov	x19, x0
   82db0:	b5000082 	cbnz	x2, 82dc0 <linenoiseEditBackspace(linenoiseState*)+0x30>
   82db4:	f9400bf3 	ldr	x19, [sp, #16]
   82db8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82dbc:	d65f03c0 	ret
   82dc0:	f9400c00 	ldr	x0, [x0, #24]
   82dc4:	d1000423 	sub	x3, x1, #0x1
   82dc8:	cb010042 	sub	x2, x2, x1
   82dcc:	8b010001 	add	x1, x0, x1
   82dd0:	8b030000 	add	x0, x0, x3
   82dd4:	94002713 	bl	8ca20 <memmove>
   82dd8:	f9401e63 	ldr	x3, [x19, #56]
   82ddc:	aa1303e0 	mov	x0, x19
   82de0:	52800061 	mov	w1, #0x3                   	// #3
   82de4:	f9402662 	ldr	x2, [x19, #72]
   82de8:	f9400e64 	ldr	x4, [x19, #24]
   82dec:	d1000463 	sub	x3, x3, #0x1
   82df0:	d1000442 	sub	x2, x2, #0x1
   82df4:	f9001e63 	str	x3, [x19, #56]
   82df8:	f9002662 	str	x2, [x19, #72]
   82dfc:	3822689f 	strb	wzr, [x4, x2]
   82e00:	f9400bf3 	ldr	x19, [sp, #16]
   82e04:	a8c27bfd 	ldp	x29, x30, [sp], #32
   82e08:	17fffec2 	b	82910 <refreshSingleLine(linenoiseState*, int)>
   82e0c:	d503201f 	nop

0000000000082e10 <linenoiseEditDeletePrevWord(linenoiseState*)>:
   82e10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82e14:	910003fd 	mov	x29, sp
   82e18:	f9400c01 	ldr	x1, [x0, #24]
   82e1c:	f90013f5 	str	x21, [sp, #32]
   82e20:	f9401c15 	ldr	x21, [x0, #56]
   82e24:	a90153f3 	stp	x19, x20, [sp, #16]
   82e28:	aa0003f3 	mov	x19, x0
   82e2c:	aa1503e2 	mov	x2, x21
   82e30:	b5000095 	cbnz	x21, 82e40 <linenoiseEditDeletePrevWord(linenoiseState*)+0x30>
   82e34:	14000021 	b	82eb8 <linenoiseEditDeletePrevWord(linenoiseState*)+0xa8>
   82e38:	f9001e62 	str	x2, [x19, #56]
   82e3c:	b40003e2 	cbz	x2, 82eb8 <linenoiseEditDeletePrevWord(linenoiseState*)+0xa8>
   82e40:	d1000442 	sub	x2, x2, #0x1
   82e44:	38e26820 	ldrsb	w0, [x1, x2]
   82e48:	7100801f 	cmp	w0, #0x20
   82e4c:	54ffff60 	b.eq	82e38 <linenoiseEditDeletePrevWord(linenoiseState*)+0x28>  // b.none
   82e50:	f9401e62 	ldr	x2, [x19, #56]
   82e54:	b5000082 	cbnz	x2, 82e64 <linenoiseEditDeletePrevWord(linenoiseState*)+0x54>
   82e58:	14000018 	b	82eb8 <linenoiseEditDeletePrevWord(linenoiseState*)+0xa8>
   82e5c:	f9001e62 	str	x2, [x19, #56]
   82e60:	b40002c2 	cbz	x2, 82eb8 <linenoiseEditDeletePrevWord(linenoiseState*)+0xa8>
   82e64:	aa0203f4 	mov	x20, x2
   82e68:	d1000442 	sub	x2, x2, #0x1
   82e6c:	38e26820 	ldrsb	w0, [x1, x2]
   82e70:	7100801f 	cmp	w0, #0x20
   82e74:	54ffff41 	b.ne	82e5c <linenoiseEditDeletePrevWord(linenoiseState*)+0x4c>  // b.any
   82e78:	8b140020 	add	x0, x1, x20
   82e7c:	f9402662 	ldr	x2, [x19, #72]
   82e80:	8b150021 	add	x1, x1, x21
   82e84:	91000442 	add	x2, x2, #0x1
   82e88:	cb150042 	sub	x2, x2, x21
   82e8c:	940026e5 	bl	8ca20 <memmove>
   82e90:	f9402662 	ldr	x2, [x19, #72]
   82e94:	aa1303e0 	mov	x0, x19
   82e98:	52800061 	mov	w1, #0x3                   	// #3
   82e9c:	cb150042 	sub	x2, x2, x21
   82ea0:	f94013f5 	ldr	x21, [sp, #32]
   82ea4:	8b140042 	add	x2, x2, x20
   82ea8:	f9002662 	str	x2, [x19, #72]
   82eac:	a94153f3 	ldp	x19, x20, [sp, #16]
   82eb0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   82eb4:	17fffe97 	b	82910 <refreshSingleLine(linenoiseState*, int)>
   82eb8:	aa0103e0 	mov	x0, x1
   82ebc:	d2800014 	mov	x20, #0x0                   	// #0
   82ec0:	17ffffef 	b	82e7c <linenoiseEditDeletePrevWord(linenoiseState*)+0x6c>
   82ec4:	d503201f 	nop
   82ec8:	d503201f 	nop
   82ecc:	d503201f 	nop

0000000000082ed0 <linenoiseEditStart>:
   82ed0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   82ed4:	910003fd 	mov	x29, sp
   82ed8:	3100043f 	cmn	w1, #0x1
   82edc:	1a9f1421 	csinc	w1, w1, wzr, ne	// ne = any
   82ee0:	3100045f 	cmn	w2, #0x1
   82ee4:	1a9f1042 	csel	w2, w2, wzr, ne	// ne = any
   82ee8:	a90153f3 	stp	x19, x20, [sp, #16]
   82eec:	aa0003f3 	mov	x19, x0
   82ef0:	aa0503e0 	mov	x0, x5
   82ef4:	a9025bf5 	stp	x21, x22, [sp, #32]
   82ef8:	aa0503f5 	mov	x21, x5
   82efc:	b900027f 	str	wzr, [x19]
   82f00:	29020a61 	stp	w1, w2, [x19, #16]
   82f04:	a9019263 	stp	x3, x4, [x19, #24]
   82f08:	f9001665 	str	x5, [x19, #40]
   82f0c:	940026e9 	bl	8cab0 <strlen>
   82f10:	a9037e60 	stp	x0, xzr, [x19, #48]
   82f14:	a9047e7f 	stp	xzr, xzr, [x19, #64]
   82f18:	97fffe3a 	bl	82800 <getCursorPosition(int, int) [clone .isra.0]>
   82f1c:	2a0003f6 	mov	w22, w0
   82f20:	d28000c1 	mov	x1, #0x6                   	// #6
   82f24:	f0000060 	adrp	x0, 91000 <VectorTable>
   82f28:	913ba000 	add	x0, x0, #0xee8
   82f2c:	9400015d 	bl	834a0 <uart_write>
   82f30:	97fffe34 	bl	82800 <getCursorPosition(int, int) [clone .isra.0]>
   82f34:	93407c14 	sxtw	x20, w0
   82f38:	6b1402df 	cmp	w22, w20
   82f3c:	5400020b 	b.lt	82f7c <linenoiseEditStart+0xac>  // b.tstop
   82f40:	f9400e61 	ldr	x1, [x19, #24]
   82f44:	aa1503e0 	mov	x0, x21
   82f48:	a9057e74 	stp	x20, xzr, [x19, #80]
   82f4c:	b900627f 	str	wzr, [x19, #96]
   82f50:	3900003f 	strb	wzr, [x1]
   82f54:	f9401262 	ldr	x2, [x19, #32]
   82f58:	f9401a61 	ldr	x1, [x19, #48]
   82f5c:	d1000442 	sub	x2, x2, #0x1
   82f60:	f9001262 	str	x2, [x19, #32]
   82f64:	9400014f 	bl	834a0 <uart_write>
   82f68:	a94153f3 	ldp	x19, x20, [sp, #16]
   82f6c:	52800000 	mov	w0, #0x0                   	// #0
   82f70:	a9425bf5 	ldp	x21, x22, [sp, #32]
   82f74:	a8c57bfd 	ldp	x29, x30, [sp], #80
   82f78:	d65f03c0 	ret
   82f7c:	f0000062 	adrp	x2, 91000 <VectorTable>
   82f80:	4b160283 	sub	w3, w20, w22
   82f84:	913bc042 	add	x2, x2, #0xef0
   82f88:	d2800401 	mov	x1, #0x20                  	// #32
   82f8c:	9100c3e0 	add	x0, sp, #0x30
   82f90:	940007e0 	bl	84f10 <snprintf_>
   82f94:	9100c3e0 	add	x0, sp, #0x30
   82f98:	940026c6 	bl	8cab0 <strlen>
   82f9c:	aa0003e1 	mov	x1, x0
   82fa0:	9100c3e0 	add	x0, sp, #0x30
   82fa4:	9400013f 	bl	834a0 <uart_write>
   82fa8:	17ffffe6 	b	82f40 <linenoiseEditStart+0x70>
   82fac:	d503201f 	nop

0000000000082fb0 <linenoiseEditFeed>:
   82fb0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   82fb4:	910003fd 	mov	x29, sp
   82fb8:	d2800021 	mov	x1, #0x1                   	// #1
   82fbc:	f9000bf3 	str	x19, [sp, #16]
   82fc0:	aa0003f3 	mov	x19, x0
   82fc4:	91009fe0 	add	x0, sp, #0x27
   82fc8:	94000152 	bl	83510 <uart_read>
   82fcc:	7100001f 	cmp	w0, #0x0
   82fd0:	540012cd 	b.le	83228 <linenoiseEditFeed+0x278>
   82fd4:	39c09fe1 	ldrsb	w1, [sp, #39]
   82fd8:	51000420 	sub	w0, w1, #0x1
   82fdc:	7101f81f 	cmp	w0, #0x7e
   82fe0:	54000129 	b.ls	83004 <linenoiseEditFeed+0x54>  // b.plast
   82fe4:	aa1303e0 	mov	x0, x19
   82fe8:	97fffee2 	bl	82b70 <linenoiseEditInsert(linenoiseState*, char)>
   82fec:	350011e0 	cbnz	w0, 83228 <linenoiseEditFeed+0x278>
   82ff0:	f00000e0 	adrp	x0, a1000 <data_stack_top>
   82ff4:	f9420000 	ldr	x0, [x0, #1024]
   82ff8:	f9400bf3 	ldr	x19, [sp, #16]
   82ffc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83000:	d65f03c0 	ret
   83004:	d0000062 	adrp	x2, 91000 <VectorTable>
   83008:	913be042 	add	x2, x2, #0xef8
   8300c:	78605842 	ldrh	w2, [x2, w0, uxtw #1]
   83010:	10000060 	adr	x0, 8301c <linenoiseEditFeed+0x6c>
   83014:	8b22a802 	add	x2, x0, w2, sxth #2
   83018:	d61f0040 	br	x2
   8301c:	aa1303e0 	mov	x0, x19
   83020:	97ffff5c 	bl	82d90 <linenoiseEditBackspace(linenoiseState*)>
   83024:	17fffff3 	b	82ff0 <linenoiseEditFeed+0x40>
   83028:	f9401e60 	ldr	x0, [x19, #56]
   8302c:	f9402662 	ldr	x2, [x19, #72]
   83030:	eb02001f 	cmp	x0, x2
   83034:	54fffde0 	b.eq	82ff0 <linenoiseEditFeed+0x40>  // b.none
   83038:	aa1303e0 	mov	x0, x19
   8303c:	52800061 	mov	w1, #0x3                   	// #3
   83040:	f9001e62 	str	x2, [x19, #56]
   83044:	97fffe33 	bl	82910 <refreshSingleLine(linenoiseState*, int)>
   83048:	17ffffea 	b	82ff0 <linenoiseEditFeed+0x40>
   8304c:	d2800021 	mov	x1, #0x1                   	// #1
   83050:	9100a3e0 	add	x0, sp, #0x28
   83054:	9400012f 	bl	83510 <uart_read>
   83058:	9100a7e0 	add	x0, sp, #0x29
   8305c:	d2800021 	mov	x1, #0x1                   	// #1
   83060:	9400012c 	bl	83510 <uart_read>
   83064:	39c0a3e0 	ldrsb	w0, [sp, #40]
   83068:	71016c1f 	cmp	w0, #0x5b
   8306c:	54000320 	b.eq	830d0 <linenoiseEditFeed+0x120>  // b.none
   83070:	71013c1f 	cmp	w0, #0x4f
   83074:	54fffbe1 	b.ne	82ff0 <linenoiseEditFeed+0x40>  // b.any
   83078:	39c0a7e0 	ldrsb	w0, [sp, #41]
   8307c:	7101181f 	cmp	w0, #0x46
   83080:	54fffd40 	b.eq	83028 <linenoiseEditFeed+0x78>  // b.none
   83084:	7101201f 	cmp	w0, #0x48
   83088:	54fffb41 	b.ne	82ff0 <linenoiseEditFeed+0x40>  // b.any
   8308c:	f9401e60 	ldr	x0, [x19, #56]
   83090:	b4fffb00 	cbz	x0, 82ff0 <linenoiseEditFeed+0x40>
   83094:	aa1303e0 	mov	x0, x19
   83098:	52800061 	mov	w1, #0x3                   	// #3
   8309c:	f9001e7f 	str	xzr, [x19, #56]
   830a0:	97fffe1c 	bl	82910 <refreshSingleLine(linenoiseState*, int)>
   830a4:	17ffffd3 	b	82ff0 <linenoiseEditFeed+0x40>
   830a8:	f9401e60 	ldr	x0, [x19, #56]
   830ac:	f9402661 	ldr	x1, [x19, #72]
   830b0:	eb01001f 	cmp	x0, x1
   830b4:	54fff9e0 	b.eq	82ff0 <linenoiseEditFeed+0x40>  // b.none
   830b8:	91000402 	add	x2, x0, #0x1
   830bc:	52800061 	mov	w1, #0x3                   	// #3
   830c0:	aa1303e0 	mov	x0, x19
   830c4:	f9001e62 	str	x2, [x19, #56]
   830c8:	97fffe12 	bl	82910 <refreshSingleLine(linenoiseState*, int)>
   830cc:	17ffffc9 	b	82ff0 <linenoiseEditFeed+0x40>
   830d0:	39c0a7e1 	ldrsb	w1, [sp, #41]
   830d4:	5100c020 	sub	w0, w1, #0x30
   830d8:	12001c00 	and	w0, w0, #0xff
   830dc:	7100241f 	cmp	w0, #0x9
   830e0:	54000a89 	b.ls	83230 <linenoiseEditFeed+0x280>  // b.plast
   830e4:	7101183f 	cmp	w1, #0x46
   830e8:	54fffa00 	b.eq	83028 <linenoiseEditFeed+0x78>  // b.none
   830ec:	54000b6c 	b.gt	83258 <linenoiseEditFeed+0x2a8>
   830f0:	71010c3f 	cmp	w1, #0x43
   830f4:	54fffda0 	b.eq	830a8 <linenoiseEditFeed+0xf8>  // b.none
   830f8:	7101103f 	cmp	w1, #0x44
   830fc:	54fff7a1 	b.ne	82ff0 <linenoiseEditFeed+0x40>  // b.any
   83100:	f9401e60 	ldr	x0, [x19, #56]
   83104:	b4fff760 	cbz	x0, 82ff0 <linenoiseEditFeed+0x40>
   83108:	d1000402 	sub	x2, x0, #0x1
   8310c:	52800061 	mov	w1, #0x3                   	// #3
   83110:	aa1303e0 	mov	x0, x19
   83114:	f9001e62 	str	x2, [x19, #56]
   83118:	97fffdfe 	bl	82910 <refreshSingleLine(linenoiseState*, int)>
   8311c:	17ffffb5 	b	82ff0 <linenoiseEditFeed+0x40>
   83120:	f9400e63 	ldr	x3, [x19, #24]
   83124:	aa1303e0 	mov	x0, x19
   83128:	52800061 	mov	w1, #0x3                   	// #3
   8312c:	f9401e62 	ldr	x2, [x19, #56]
   83130:	3822687f 	strb	wzr, [x3, x2]
   83134:	f9401e62 	ldr	x2, [x19, #56]
   83138:	f9002662 	str	x2, [x19, #72]
   8313c:	97fffdf5 	bl	82910 <refreshSingleLine(linenoiseState*, int)>
   83140:	17ffffac 	b	82ff0 <linenoiseEditFeed+0x40>
   83144:	f9402660 	ldr	x0, [x19, #72]
   83148:	b4000660 	cbz	x0, 83214 <linenoiseEditFeed+0x264>
   8314c:	aa1303e0 	mov	x0, x19
   83150:	97fffef0 	bl	82d10 <linenoiseEditDelete(linenoiseState*)>
   83154:	17ffffa7 	b	82ff0 <linenoiseEditFeed+0x40>
   83158:	aa1303e0 	mov	x0, x19
   8315c:	97ffff2d 	bl	82e10 <linenoiseEditDeletePrevWord(linenoiseState*)>
   83160:	17ffffa4 	b	82ff0 <linenoiseEditFeed+0x40>
   83164:	f9400e62 	ldr	x2, [x19, #24]
   83168:	aa1303e0 	mov	x0, x19
   8316c:	52800061 	mov	w1, #0x3                   	// #3
   83170:	3900005f 	strb	wzr, [x2]
   83174:	f9001e7f 	str	xzr, [x19, #56]
   83178:	f900267f 	str	xzr, [x19, #72]
   8317c:	97fffde5 	bl	82910 <refreshSingleLine(linenoiseState*, int)>
   83180:	17ffff9c 	b	82ff0 <linenoiseEditFeed+0x40>
   83184:	f9401e60 	ldr	x0, [x19, #56]
   83188:	b4fff340 	cbz	x0, 82ff0 <linenoiseEditFeed+0x40>
   8318c:	f9402661 	ldr	x1, [x19, #72]
   83190:	eb01001f 	cmp	x0, x1
   83194:	54fff2e2 	b.cs	82ff0 <linenoiseEditFeed+0x40>  // b.hs, b.nlast
   83198:	f9400e61 	ldr	x1, [x19, #24]
   8319c:	d1000402 	sub	x2, x0, #0x1
   831a0:	38e06820 	ldrsb	w0, [x1, x0]
   831a4:	38e26823 	ldrsb	w3, [x1, x2]
   831a8:	38226820 	strb	w0, [x1, x2]
   831ac:	f9400e61 	ldr	x1, [x19, #24]
   831b0:	f9401e60 	ldr	x0, [x19, #56]
   831b4:	38206823 	strb	w3, [x1, x0]
   831b8:	f9402661 	ldr	x1, [x19, #72]
   831bc:	f9401e60 	ldr	x0, [x19, #56]
   831c0:	d1000421 	sub	x1, x1, #0x1
   831c4:	eb01001f 	cmp	x0, x1
   831c8:	540001e0 	b.eq	83204 <linenoiseEditFeed+0x254>  // b.none
   831cc:	91000400 	add	x0, x0, #0x1
   831d0:	f9001e60 	str	x0, [x19, #56]
   831d4:	1400000c 	b	83204 <linenoiseEditFeed+0x254>
   831d8:	d0000161 	adrp	x1, b1000 <gKernel+0x1db0>
   831dc:	913d8021 	add	x1, x1, #0xf60
   831e0:	f9400e60 	ldr	x0, [x19, #24]
   831e4:	b9440022 	ldr	w2, [x1, #1024]
   831e8:	51000442 	sub	w2, w2, #0x1
   831ec:	b9040022 	str	w2, [x1, #1024]
   831f0:	17ffff82 	b	82ff8 <linenoiseEditFeed+0x48>
   831f4:	d0000060 	adrp	x0, 91000 <VectorTable>
   831f8:	d28000e1 	mov	x1, #0x7                   	// #7
   831fc:	913b8000 	add	x0, x0, #0xee0
   83200:	940000a8 	bl	834a0 <uart_write>
   83204:	aa1303e0 	mov	x0, x19
   83208:	52800061 	mov	w1, #0x3                   	// #3
   8320c:	97fffdc1 	bl	82910 <refreshSingleLine(linenoiseState*, int)>
   83210:	17ffff78 	b	82ff0 <linenoiseEditFeed+0x40>
   83214:	d0000160 	adrp	x0, b1000 <gKernel+0x1db0>
   83218:	913d8000 	add	x0, x0, #0xf60
   8321c:	b9440001 	ldr	w1, [x0, #1024]
   83220:	51000421 	sub	w1, w1, #0x1
   83224:	b9040001 	str	w1, [x0, #1024]
   83228:	d2800000 	mov	x0, #0x0                   	// #0
   8322c:	17ffff73 	b	82ff8 <linenoiseEditFeed+0x48>
   83230:	d2800021 	mov	x1, #0x1                   	// #1
   83234:	9100abe0 	add	x0, sp, #0x2a
   83238:	940000b6 	bl	83510 <uart_read>
   8323c:	39c0abe0 	ldrsb	w0, [sp, #42]
   83240:	7101f81f 	cmp	w0, #0x7e
   83244:	54ffed61 	b.ne	82ff0 <linenoiseEditFeed+0x40>  // b.any
   83248:	39c0a7e0 	ldrsb	w0, [sp, #41]
   8324c:	7100cc1f 	cmp	w0, #0x33
   83250:	54ffed01 	b.ne	82ff0 <linenoiseEditFeed+0x40>  // b.any
   83254:	17ffffbe 	b	8314c <linenoiseEditFeed+0x19c>
   83258:	7101203f 	cmp	w1, #0x48
   8325c:	54fff180 	b.eq	8308c <linenoiseEditFeed+0xdc>  // b.none
   83260:	17ffff64 	b	82ff0 <linenoiseEditFeed+0x40>
   83264:	d503201f 	nop
   83268:	d503201f 	nop
   8326c:	d503201f 	nop

0000000000083270 <linenoiseEditStop>:
   83270:	d0000060 	adrp	x0, 91000 <VectorTable>
   83274:	91372000 	add	x0, x0, #0xdc8
   83278:	140006de 	b	84df0 <printf_>
   8327c:	d503201f 	nop

0000000000083280 <linenoise>:
   83280:	d282120c 	mov	x12, #0x1090                	// #4240
   83284:	aa0003e5 	mov	x5, x0
   83288:	cb2c63ff 	sub	sp, sp, x12
   8328c:	d2820004 	mov	x4, #0x1000                	// #4096
   83290:	9100a3e0 	add	x0, sp, #0x28
   83294:	910243e3 	add	x3, sp, #0x90
   83298:	a9007bfd 	stp	x29, x30, [sp]
   8329c:	910003fd 	mov	x29, sp
   832a0:	52800002 	mov	w2, #0x0                   	// #0
   832a4:	52800021 	mov	w1, #0x1                   	// #1
   832a8:	a90153f3 	stp	x19, x20, [sp, #16]
   832ac:	d00000f4 	adrp	x20, a1000 <data_stack_top>
   832b0:	91100294 	add	x20, x20, #0x400
   832b4:	97ffff07 	bl	82ed0 <linenoiseEditStart>
   832b8:	9100a3e0 	add	x0, sp, #0x28
   832bc:	97ffff3d 	bl	82fb0 <linenoiseEditFeed>
   832c0:	f9400281 	ldr	x1, [x20]
   832c4:	aa0003f3 	mov	x19, x0
   832c8:	eb01001f 	cmp	x0, x1
   832cc:	54ffff60 	b.eq	832b8 <linenoise+0x38>  // b.none
   832d0:	d0000060 	adrp	x0, 91000 <VectorTable>
   832d4:	91372000 	add	x0, x0, #0xdc8
   832d8:	940006c6 	bl	84df0 <printf_>
   832dc:	d282120c 	mov	x12, #0x1090                	// #4240
   832e0:	a9407bfd 	ldp	x29, x30, [sp]
   832e4:	aa1303e0 	mov	x0, x19
   832e8:	a94153f3 	ldp	x19, x20, [sp, #16]
   832ec:	8b2c63ff 	add	sp, sp, x12
   832f0:	d65f03c0 	ret
   832f4:	d503201f 	nop
   832f8:	d503201f 	nop
   832fc:	d503201f 	nop

0000000000083300 <linenoiseFree>:
   83300:	d65f03c0 	ret
   83304:	d503201f 	nop
   83308:	d503201f 	nop
   8330c:	d503201f 	nop

0000000000083310 <linenoiseHistoryAdd>:
   83310:	52800020 	mov	w0, #0x1                   	// #1
   83314:	d65f03c0 	ret
   83318:	d503201f 	nop
   8331c:	d503201f 	nop

0000000000083320 <linenoiseHistorySetMaxLen>:
   83320:	52800020 	mov	w0, #0x1                   	// #1
   83324:	d65f03c0 	ret
   83328:	d503201f 	nop
   8332c:	d503201f 	nop

0000000000083330 <linenoiseHistorySave>:
   83330:	52800000 	mov	w0, #0x0                   	// #0
   83334:	d65f03c0 	ret
   83338:	d503201f 	nop
   8333c:	d503201f 	nop

0000000000083340 <linenoiseHistoryLoad>:
   83340:	52800000 	mov	w0, #0x0                   	// #0
   83344:	d65f03c0 	ret
	...

0000000000083350 <memzero>:
   83350:	aa0103e2 	mov	x2, x1
   83354:	d2800001 	mov	x1, #0x0                   	// #0
   83358:	1400274c 	b	8d088 <memset>
   8335c:	00000000 	udf	#0

0000000000083360 <uart_putb>:
   83360:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   83364:	f0000161 	adrp	x1, b2000 <appendBuf+0xa0>
   83368:	910003fd 	mov	x29, sp
   8336c:	d2800022 	mov	x2, #0x1                   	// #1
   83370:	39007fe0 	strb	w0, [sp, #31]
   83374:	f941b420 	ldr	x0, [x1, #872]
   83378:	91007fe1 	add	x1, sp, #0x1f
   8337c:	f9400003 	ldr	x3, [x0]
   83380:	f9400c63 	ldr	x3, [x3, #24]
   83384:	d63f0060 	blr	x3
   83388:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8338c:	d65f03c0 	ret

0000000000083390 <uart_getb>:
   83390:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83394:	910003fd 	mov	x29, sp
   83398:	f9000bf3 	str	x19, [sp, #16]
   8339c:	f0000173 	adrp	x19, b2000 <appendBuf+0xa0>
   833a0:	910da273 	add	x19, x19, #0x368
   833a4:	3900bfff 	strb	wzr, [sp, #47]
   833a8:	f9400260 	ldr	x0, [x19]
   833ac:	d2800022 	mov	x2, #0x1                   	// #1
   833b0:	9100bfe1 	add	x1, sp, #0x2f
   833b4:	f9400003 	ldr	x3, [x0]
   833b8:	f9400863 	ldr	x3, [x3, #16]
   833bc:	d63f0060 	blr	x3
   833c0:	34ffff40 	cbz	w0, 833a8 <uart_getb+0x18>
   833c4:	f9400bf3 	ldr	x19, [sp, #16]
   833c8:	3940bfe0 	ldrb	w0, [sp, #47]
   833cc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   833d0:	d65f03c0 	ret
   833d4:	d503201f 	nop
   833d8:	d503201f 	nop
   833dc:	d503201f 	nop

00000000000833e0 <uart_getc>:
   833e0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   833e4:	910003fd 	mov	x29, sp
   833e8:	f9000bf3 	str	x19, [sp, #16]
   833ec:	f0000173 	adrp	x19, b2000 <appendBuf+0xa0>
   833f0:	910da273 	add	x19, x19, #0x368
   833f4:	3900bfff 	strb	wzr, [sp, #47]
   833f8:	f9400260 	ldr	x0, [x19]
   833fc:	d2800022 	mov	x2, #0x1                   	// #1
   83400:	9100bfe1 	add	x1, sp, #0x2f
   83404:	f9400003 	ldr	x3, [x0]
   83408:	f9400863 	ldr	x3, [x3, #16]
   8340c:	d63f0060 	blr	x3
   83410:	34ffff40 	cbz	w0, 833f8 <uart_getc+0x18>
   83414:	f9400bf3 	ldr	x19, [sp, #16]
   83418:	3940bfe0 	ldrb	w0, [sp, #47]
   8341c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83420:	d65f03c0 	ret
   83424:	d503201f 	nop
   83428:	d503201f 	nop
   8342c:	d503201f 	nop

0000000000083430 <uart_putc>:
   83430:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83434:	910003fd 	mov	x29, sp
   83438:	a90153f3 	stp	x19, x20, [sp, #16]
   8343c:	13001c13 	sxtb	w19, w0
   83440:	f0000174 	adrp	x20, b2000 <appendBuf+0xa0>
   83444:	71002a7f 	cmp	w19, #0xa
   83448:	54000160 	b.eq	83474 <uart_putc+0x44>  // b.none
   8344c:	f941b680 	ldr	x0, [x20, #872]
   83450:	9100bfe1 	add	x1, sp, #0x2f
   83454:	d2800022 	mov	x2, #0x1                   	// #1
   83458:	3900bff3 	strb	w19, [sp, #47]
   8345c:	f9400003 	ldr	x3, [x0]
   83460:	f9400c63 	ldr	x3, [x3, #24]
   83464:	d63f0060 	blr	x3
   83468:	a94153f3 	ldp	x19, x20, [sp, #16]
   8346c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   83470:	d65f03c0 	ret
   83474:	f941b680 	ldr	x0, [x20, #872]
   83478:	d2800022 	mov	x2, #0x1                   	// #1
   8347c:	9100bfe1 	add	x1, sp, #0x2f
   83480:	f9400003 	ldr	x3, [x0]
   83484:	f9400c63 	ldr	x3, [x3, #24]
   83488:	3900bff3 	strb	w19, [sp, #47]
   8348c:	d63f0060 	blr	x3
   83490:	17ffffef 	b	8344c <uart_putc+0x1c>
   83494:	d503201f 	nop
   83498:	d503201f 	nop
   8349c:	d503201f 	nop

00000000000834a0 <uart_write>:
   834a0:	b4000301 	cbz	x1, 83500 <uart_write+0x60>
   834a4:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   834a8:	910003fd 	mov	x29, sp
   834ac:	a90153f3 	stp	x19, x20, [sp, #16]
   834b0:	aa0003f3 	mov	x19, x0
   834b4:	8b010014 	add	x20, x0, x1
   834b8:	f90013f5 	str	x21, [sp, #32]
   834bc:	f0000175 	adrp	x21, b2000 <appendBuf+0xa0>
   834c0:	910da2b5 	add	x21, x21, #0x368
   834c4:	d503201f 	nop
   834c8:	f94002a0 	ldr	x0, [x21]
   834cc:	d2800022 	mov	x2, #0x1                   	// #1
   834d0:	9100ffe1 	add	x1, sp, #0x3f
   834d4:	38401664 	ldrb	w4, [x19], #1
   834d8:	f9400003 	ldr	x3, [x0]
   834dc:	3900ffe4 	strb	w4, [sp, #63]
   834e0:	f9400c63 	ldr	x3, [x3, #24]
   834e4:	d63f0060 	blr	x3
   834e8:	eb14027f 	cmp	x19, x20
   834ec:	54fffee1 	b.ne	834c8 <uart_write+0x28>  // b.any
   834f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   834f4:	f94013f5 	ldr	x21, [sp, #32]
   834f8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   834fc:	d65f03c0 	ret
   83500:	d65f03c0 	ret
   83504:	d503201f 	nop
   83508:	d503201f 	nop
   8350c:	d503201f 	nop

0000000000083510 <uart_read>:
   83510:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   83514:	910003fd 	mov	x29, sp
   83518:	a9025bf5 	stp	x21, x22, [sp, #32]
   8351c:	aa0103f5 	mov	x21, x1
   83520:	b4000281 	cbz	x1, 83570 <uart_read+0x60>
   83524:	8b010016 	add	x22, x0, x1
   83528:	a90153f3 	stp	x19, x20, [sp, #16]
   8352c:	f0000173 	adrp	x19, b2000 <appendBuf+0xa0>
   83530:	910da273 	add	x19, x19, #0x368
   83534:	aa0003f4 	mov	x20, x0
   83538:	3900ffff 	strb	wzr, [sp, #63]
   8353c:	d503201f 	nop
   83540:	f9400260 	ldr	x0, [x19]
   83544:	d2800022 	mov	x2, #0x1                   	// #1
   83548:	9100ffe1 	add	x1, sp, #0x3f
   8354c:	f9400003 	ldr	x3, [x0]
   83550:	f9400863 	ldr	x3, [x3, #16]
   83554:	d63f0060 	blr	x3
   83558:	34ffff40 	cbz	w0, 83540 <uart_read+0x30>
   8355c:	3940ffe0 	ldrb	w0, [sp, #63]
   83560:	38001680 	strb	w0, [x20], #1
   83564:	eb16029f 	cmp	x20, x22
   83568:	54fffe81 	b.ne	83538 <uart_read+0x28>  // b.any
   8356c:	a94153f3 	ldp	x19, x20, [sp, #16]
   83570:	aa1503e0 	mov	x0, x21
   83574:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83578:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8357c:	d65f03c0 	ret

0000000000083580 <uart_puts>:
   83580:	b40002c0 	cbz	x0, 835d8 <uart_puts+0x58>
   83584:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   83588:	910003fd 	mov	x29, sp
   8358c:	a90153f3 	stp	x19, x20, [sp, #16]
   83590:	aa0003f3 	mov	x19, x0
   83594:	39c00003 	ldrsb	w3, [x0]
   83598:	340001a3 	cbz	w3, 835cc <uart_puts+0x4c>
   8359c:	f0000174 	adrp	x20, b2000 <appendBuf+0xa0>
   835a0:	910da294 	add	x20, x20, #0x368
   835a4:	d503201f 	nop
   835a8:	f9400280 	ldr	x0, [x20]
   835ac:	d2800022 	mov	x2, #0x1                   	// #1
   835b0:	9100bfe1 	add	x1, sp, #0x2f
   835b4:	3900bfe3 	strb	w3, [sp, #47]
   835b8:	f9400003 	ldr	x3, [x0]
   835bc:	f9400c63 	ldr	x3, [x3, #24]
   835c0:	d63f0060 	blr	x3
   835c4:	38c01e63 	ldrsb	w3, [x19, #1]!
   835c8:	35ffff03 	cbnz	w3, 835a8 <uart_puts+0x28>
   835cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   835d0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   835d4:	d65f03c0 	ret
   835d8:	d65f03c0 	ret
   835dc:	d503201f 	nop

00000000000835e0 <uart_init>:
   835e0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   835e4:	910003fd 	mov	x29, sp
   835e8:	94000b2e 	bl	862a0 <CDeviceNameService::Get()>
   835ec:	d0000061 	adrp	x1, 91000 <VectorTable>
   835f0:	52800002 	mov	w2, #0x0                   	// #0
   835f4:	913fe021 	add	x1, x1, #0xff8
   835f8:	94000aea 	bl	861a0 <CDeviceNameService::GetDevice(char const*, bool)>
   835fc:	f0000161 	adrp	x1, b2000 <appendBuf+0xa0>
   83600:	a8c17bfd 	ldp	x29, x30, [sp], #16
   83604:	f901b420 	str	x0, [x1, #872]
   83608:	d65f03c0 	ret
   8360c:	d503201f 	nop

0000000000083610 <uart_putHexByte>:
   83610:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   83614:	910003fd 	mov	x29, sp
   83618:	53041c01 	ubfx	w1, w0, #4, #4
   8361c:	d2800022 	mov	x2, #0x1                   	// #1
   83620:	a90153f3 	stp	x19, x20, [sp, #16]
   83624:	f0000073 	adrp	x19, 92000 <uart_putHexByte::hexDigits>
   83628:	91000273 	add	x19, x19, #0x0
   8362c:	12001c14 	and	w20, w0, #0xff
   83630:	12000e94 	and	w20, w20, #0xf
   83634:	f90013f5 	str	x21, [sp, #32]
   83638:	f0000175 	adrp	x21, b2000 <appendBuf+0xa0>
   8363c:	3861ca63 	ldrb	w3, [x19, w1, sxtw]
   83640:	9100ffe1 	add	x1, sp, #0x3f
   83644:	f941b6a0 	ldr	x0, [x21, #872]
   83648:	3900ffe3 	strb	w3, [sp, #63]
   8364c:	f9400003 	ldr	x3, [x0]
   83650:	f9400c63 	ldr	x3, [x3, #24]
   83654:	d63f0060 	blr	x3
   83658:	3874ca63 	ldrb	w3, [x19, w20, sxtw]
   8365c:	9100ffe1 	add	x1, sp, #0x3f
   83660:	d2800022 	mov	x2, #0x1                   	// #1
   83664:	f941b6a0 	ldr	x0, [x21, #872]
   83668:	3900ffe3 	strb	w3, [sp, #63]
   8366c:	f9400003 	ldr	x3, [x0]
   83670:	f9400c63 	ldr	x3, [x3, #24]
   83674:	d63f0060 	blr	x3
   83678:	a94153f3 	ldp	x19, x20, [sp, #16]
   8367c:	f94013f5 	ldr	x21, [sp, #32]
   83680:	a8c47bfd 	ldp	x29, x30, [sp], #64
   83684:	d65f03c0 	ret
   83688:	d503201f 	nop
   8368c:	d503201f 	nop

0000000000083690 <uart_putHexShort>:
   83690:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   83694:	910003fd 	mov	x29, sp
   83698:	530c3c01 	ubfx	w1, w0, #12, #4
   8369c:	d2800022 	mov	x2, #0x1                   	// #1
   836a0:	a90153f3 	stp	x19, x20, [sp, #16]
   836a4:	f0000073 	adrp	x19, 92000 <uart_putHexByte::hexDigits>
   836a8:	91000273 	add	x19, x19, #0x0
   836ac:	12003c14 	and	w20, w0, #0xffff
   836b0:	a9025bf5 	stp	x21, x22, [sp, #32]
   836b4:	f0000175 	adrp	x21, b2000 <appendBuf+0xa0>
   836b8:	53083c16 	ubfx	w22, w0, #8, #8
   836bc:	12000ed6 	and	w22, w22, #0xf
   836c0:	3861ca63 	ldrb	w3, [x19, w1, sxtw]
   836c4:	9100ffe1 	add	x1, sp, #0x3f
   836c8:	f941b6a0 	ldr	x0, [x21, #872]
   836cc:	3900ffe3 	strb	w3, [sp, #63]
   836d0:	f9400003 	ldr	x3, [x0]
   836d4:	f9400c63 	ldr	x3, [x3, #24]
   836d8:	d63f0060 	blr	x3
   836dc:	3876ca63 	ldrb	w3, [x19, w22, sxtw]
   836e0:	9100ffe1 	add	x1, sp, #0x3f
   836e4:	d2800022 	mov	x2, #0x1                   	// #1
   836e8:	f941b6a0 	ldr	x0, [x21, #872]
   836ec:	3900ffe3 	strb	w3, [sp, #63]
   836f0:	f9400003 	ldr	x3, [x0]
   836f4:	f9400c63 	ldr	x3, [x3, #24]
   836f8:	d63f0060 	blr	x3
   836fc:	f941b6a0 	ldr	x0, [x21, #872]
   83700:	9100ffe1 	add	x1, sp, #0x3f
   83704:	d2800022 	mov	x2, #0x1                   	// #1
   83708:	d3441e83 	ubfx	x3, x20, #4, #4
   8370c:	12001e94 	and	w20, w20, #0xff
   83710:	3863ca63 	ldrb	w3, [x19, w3, sxtw]
   83714:	12000e94 	and	w20, w20, #0xf
   83718:	3900ffe3 	strb	w3, [sp, #63]
   8371c:	f9400003 	ldr	x3, [x0]
   83720:	f9400c63 	ldr	x3, [x3, #24]
   83724:	d63f0060 	blr	x3
   83728:	3874ca63 	ldrb	w3, [x19, w20, sxtw]
   8372c:	9100ffe1 	add	x1, sp, #0x3f
   83730:	d2800022 	mov	x2, #0x1                   	// #1
   83734:	f941b6a0 	ldr	x0, [x21, #872]
   83738:	3900ffe3 	strb	w3, [sp, #63]
   8373c:	f9400003 	ldr	x3, [x0]
   83740:	f9400c63 	ldr	x3, [x3, #24]
   83744:	d63f0060 	blr	x3
   83748:	a94153f3 	ldp	x19, x20, [sp, #16]
   8374c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83750:	a8c47bfd 	ldp	x29, x30, [sp], #64
   83754:	d65f03c0 	ret
   83758:	d503201f 	nop
   8375c:	d503201f 	nop

0000000000083760 <uart_putHexWord>:
   83760:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   83764:	910003fd 	mov	x29, sp
   83768:	91013fe1 	add	x1, sp, #0x4f
   8376c:	d2800022 	mov	x2, #0x1                   	// #1
   83770:	a90153f3 	stp	x19, x20, [sp, #16]
   83774:	2a0003f3 	mov	w19, w0
   83778:	f0000074 	adrp	x20, 92000 <uart_putHexByte::hexDigits>
   8377c:	91000294 	add	x20, x20, #0x0
   83780:	531c7c00 	lsr	w0, w0, #28
   83784:	a9025bf5 	stp	x21, x22, [sp, #32]
   83788:	f0000175 	adrp	x21, b2000 <appendBuf+0xa0>
   8378c:	53107e76 	lsr	w22, w19, #16
   83790:	3860ca83 	ldrb	w3, [x20, w0, sxtw]
   83794:	f941b6a0 	ldr	x0, [x21, #872]
   83798:	39013fe3 	strb	w3, [sp, #79]
   8379c:	f9400003 	ldr	x3, [x0]
   837a0:	f9400c63 	ldr	x3, [x3, #24]
   837a4:	f9001bf7 	str	x23, [sp, #48]
   837a8:	53187e77 	lsr	w23, w19, #24
   837ac:	d63f0060 	blr	x3
   837b0:	12000ef7 	and	w23, w23, #0xf
   837b4:	f941b6a0 	ldr	x0, [x21, #872]
   837b8:	91013fe1 	add	x1, sp, #0x4f
   837bc:	d2800022 	mov	x2, #0x1                   	// #1
   837c0:	3877ca83 	ldrb	w3, [x20, w23, sxtw]
   837c4:	39013fe3 	strb	w3, [sp, #79]
   837c8:	f9400003 	ldr	x3, [x0]
   837cc:	f9400c63 	ldr	x3, [x3, #24]
   837d0:	d63f0060 	blr	x3
   837d4:	f941b6a0 	ldr	x0, [x21, #872]
   837d8:	91013fe1 	add	x1, sp, #0x4f
   837dc:	d2800022 	mov	x2, #0x1                   	// #1
   837e0:	d3441ec3 	ubfx	x3, x22, #4, #4
   837e4:	12001ed6 	and	w22, w22, #0xff
   837e8:	3863ca83 	ldrb	w3, [x20, w3, sxtw]
   837ec:	12000ed6 	and	w22, w22, #0xf
   837f0:	39013fe3 	strb	w3, [sp, #79]
   837f4:	f9400003 	ldr	x3, [x0]
   837f8:	f9400c63 	ldr	x3, [x3, #24]
   837fc:	d63f0060 	blr	x3
   83800:	3876ca83 	ldrb	w3, [x20, w22, sxtw]
   83804:	91013fe1 	add	x1, sp, #0x4f
   83808:	d2800022 	mov	x2, #0x1                   	// #1
   8380c:	d3483e76 	ubfx	x22, x19, #8, #8
   83810:	f941b6a0 	ldr	x0, [x21, #872]
   83814:	12000ed6 	and	w22, w22, #0xf
   83818:	39013fe3 	strb	w3, [sp, #79]
   8381c:	f9400003 	ldr	x3, [x0]
   83820:	f9400c63 	ldr	x3, [x3, #24]
   83824:	d63f0060 	blr	x3
   83828:	f941b6a0 	ldr	x0, [x21, #872]
   8382c:	91013fe1 	add	x1, sp, #0x4f
   83830:	d2800022 	mov	x2, #0x1                   	// #1
   83834:	d34c3e63 	ubfx	x3, x19, #12, #4
   83838:	3863ca83 	ldrb	w3, [x20, w3, sxtw]
   8383c:	39013fe3 	strb	w3, [sp, #79]
   83840:	f9400003 	ldr	x3, [x0]
   83844:	f9400c63 	ldr	x3, [x3, #24]
   83848:	d63f0060 	blr	x3
   8384c:	3876ca83 	ldrb	w3, [x20, w22, sxtw]
   83850:	91013fe1 	add	x1, sp, #0x4f
   83854:	d2800022 	mov	x2, #0x1                   	// #1
   83858:	f941b6a0 	ldr	x0, [x21, #872]
   8385c:	39013fe3 	strb	w3, [sp, #79]
   83860:	f9400003 	ldr	x3, [x0]
   83864:	f9400c63 	ldr	x3, [x3, #24]
   83868:	d63f0060 	blr	x3
   8386c:	f941b6a0 	ldr	x0, [x21, #872]
   83870:	91013fe1 	add	x1, sp, #0x4f
   83874:	d2800022 	mov	x2, #0x1                   	// #1
   83878:	d3441e63 	ubfx	x3, x19, #4, #4
   8387c:	12001e73 	and	w19, w19, #0xff
   83880:	3863ca83 	ldrb	w3, [x20, w3, sxtw]
   83884:	12000e73 	and	w19, w19, #0xf
   83888:	39013fe3 	strb	w3, [sp, #79]
   8388c:	f9400003 	ldr	x3, [x0]
   83890:	f9400c63 	ldr	x3, [x3, #24]
   83894:	d63f0060 	blr	x3
   83898:	3873ca83 	ldrb	w3, [x20, w19, sxtw]
   8389c:	91013fe1 	add	x1, sp, #0x4f
   838a0:	d2800022 	mov	x2, #0x1                   	// #1
   838a4:	f941b6a0 	ldr	x0, [x21, #872]
   838a8:	39013fe3 	strb	w3, [sp, #79]
   838ac:	f9400003 	ldr	x3, [x0]
   838b0:	f9400c63 	ldr	x3, [x3, #24]
   838b4:	d63f0060 	blr	x3
   838b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   838bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   838c0:	f9401bf7 	ldr	x23, [sp, #48]
   838c4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   838c8:	d65f03c0 	ret
   838cc:	d503201f 	nop

00000000000838d0 <uart_putHexLong>:
   838d0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   838d4:	d370fc03 	lsr	x3, x0, #48
   838d8:	910003fd 	mov	x29, sp
   838dc:	530c7c64 	lsr	w4, w3, #12
   838e0:	91013fe1 	add	x1, sp, #0x4f
   838e4:	d2800022 	mov	x2, #0x1                   	// #1
   838e8:	a90153f3 	stp	x19, x20, [sp, #16]
   838ec:	f0000073 	adrp	x19, 92000 <uart_putHexByte::hexDigits>
   838f0:	91000273 	add	x19, x19, #0x0
   838f4:	aa0003f4 	mov	x20, x0
   838f8:	a9025bf5 	stp	x21, x22, [sp, #32]
   838fc:	f0000175 	adrp	x21, b2000 <appendBuf+0xa0>
   83900:	d360fe96 	lsr	x22, x20, #32
   83904:	3864ca64 	ldrb	w4, [x19, w4, sxtw]
   83908:	a90363f7 	stp	x23, x24, [sp, #48]
   8390c:	53087c78 	lsr	w24, w3, #8
   83910:	aa0303f7 	mov	x23, x3
   83914:	f941b6a0 	ldr	x0, [x21, #872]
   83918:	39013fe4 	strb	w4, [sp, #79]
   8391c:	f9400003 	ldr	x3, [x0]
   83920:	f9400c63 	ldr	x3, [x3, #24]
   83924:	d63f0060 	blr	x3
   83928:	f941b6a0 	ldr	x0, [x21, #872]
   8392c:	91013fe1 	add	x1, sp, #0x4f
   83930:	d2800022 	mov	x2, #0x1                   	// #1
   83934:	12000f03 	and	w3, w24, #0xf
   83938:	3863ca63 	ldrb	w3, [x19, w3, sxtw]
   8393c:	39013fe3 	strb	w3, [sp, #79]
   83940:	f9400003 	ldr	x3, [x0]
   83944:	f9400c63 	ldr	x3, [x3, #24]
   83948:	d63f0060 	blr	x3
   8394c:	f941b6a0 	ldr	x0, [x21, #872]
   83950:	91013fe1 	add	x1, sp, #0x4f
   83954:	d2800022 	mov	x2, #0x1                   	// #1
   83958:	d3441ee3 	ubfx	x3, x23, #4, #4
   8395c:	12001ef7 	and	w23, w23, #0xff
   83960:	3863ca63 	ldrb	w3, [x19, w3, sxtw]
   83964:	12000ef7 	and	w23, w23, #0xf
   83968:	39013fe3 	strb	w3, [sp, #79]
   8396c:	f9400003 	ldr	x3, [x0]
   83970:	f9400c63 	ldr	x3, [x3, #24]
   83974:	d63f0060 	blr	x3
   83978:	3877ca63 	ldrb	w3, [x19, w23, sxtw]
   8397c:	91013fe1 	add	x1, sp, #0x4f
   83980:	d2800022 	mov	x2, #0x1                   	// #1
   83984:	53083ed7 	ubfx	w23, w22, #8, #8
   83988:	f941b6a0 	ldr	x0, [x21, #872]
   8398c:	12000ef7 	and	w23, w23, #0xf
   83990:	39013fe3 	strb	w3, [sp, #79]
   83994:	f9400003 	ldr	x3, [x0]
   83998:	f9400c63 	ldr	x3, [x3, #24]
   8399c:	d63f0060 	blr	x3
   839a0:	f941b6a0 	ldr	x0, [x21, #872]
   839a4:	91013fe1 	add	x1, sp, #0x4f
   839a8:	d2800022 	mov	x2, #0x1                   	// #1
   839ac:	530c3ec3 	ubfx	w3, w22, #12, #4
   839b0:	3863ca63 	ldrb	w3, [x19, w3, sxtw]
   839b4:	39013fe3 	strb	w3, [sp, #79]
   839b8:	f9400003 	ldr	x3, [x0]
   839bc:	f9400c63 	ldr	x3, [x3, #24]
   839c0:	d63f0060 	blr	x3
   839c4:	3877ca63 	ldrb	w3, [x19, w23, sxtw]
   839c8:	91013fe1 	add	x1, sp, #0x4f
   839cc:	d2800022 	mov	x2, #0x1                   	// #1
   839d0:	53187e97 	lsr	w23, w20, #24
   839d4:	f941b6a0 	ldr	x0, [x21, #872]
   839d8:	12000ef7 	and	w23, w23, #0xf
   839dc:	39013fe3 	strb	w3, [sp, #79]
   839e0:	f9400003 	ldr	x3, [x0]
   839e4:	f9400c63 	ldr	x3, [x3, #24]
   839e8:	d63f0060 	blr	x3
   839ec:	f941b6a0 	ldr	x0, [x21, #872]
   839f0:	91013fe1 	add	x1, sp, #0x4f
   839f4:	d2800022 	mov	x2, #0x1                   	// #1
   839f8:	53041ec3 	ubfx	w3, w22, #4, #4
   839fc:	12001ed6 	and	w22, w22, #0xff
   83a00:	3863ca63 	ldrb	w3, [x19, w3, sxtw]
   83a04:	12000ed6 	and	w22, w22, #0xf
   83a08:	39013fe3 	strb	w3, [sp, #79]
   83a0c:	f9400003 	ldr	x3, [x0]
   83a10:	f9400c63 	ldr	x3, [x3, #24]
   83a14:	d63f0060 	blr	x3
   83a18:	3876ca63 	ldrb	w3, [x19, w22, sxtw]
   83a1c:	91013fe1 	add	x1, sp, #0x4f
   83a20:	d2800022 	mov	x2, #0x1                   	// #1
   83a24:	53107e96 	lsr	w22, w20, #16
   83a28:	f941b6a0 	ldr	x0, [x21, #872]
   83a2c:	39013fe3 	strb	w3, [sp, #79]
   83a30:	f9400003 	ldr	x3, [x0]
   83a34:	f9400c63 	ldr	x3, [x3, #24]
   83a38:	d63f0060 	blr	x3
   83a3c:	f941b6a0 	ldr	x0, [x21, #872]
   83a40:	91013fe1 	add	x1, sp, #0x4f
   83a44:	d2800022 	mov	x2, #0x1                   	// #1
   83a48:	531c7e83 	lsr	w3, w20, #28
   83a4c:	3863ca63 	ldrb	w3, [x19, w3, sxtw]
   83a50:	39013fe3 	strb	w3, [sp, #79]
   83a54:	f9400003 	ldr	x3, [x0]
   83a58:	f9400c63 	ldr	x3, [x3, #24]
   83a5c:	d63f0060 	blr	x3
   83a60:	3877ca63 	ldrb	w3, [x19, w23, sxtw]
   83a64:	91013fe1 	add	x1, sp, #0x4f
   83a68:	d2800022 	mov	x2, #0x1                   	// #1
   83a6c:	f941b6a0 	ldr	x0, [x21, #872]
   83a70:	39013fe3 	strb	w3, [sp, #79]
   83a74:	f9400003 	ldr	x3, [x0]
   83a78:	f9400c63 	ldr	x3, [x3, #24]
   83a7c:	d63f0060 	blr	x3
   83a80:	f941b6a0 	ldr	x0, [x21, #872]
   83a84:	91013fe1 	add	x1, sp, #0x4f
   83a88:	d2800022 	mov	x2, #0x1                   	// #1
   83a8c:	d3441ec3 	ubfx	x3, x22, #4, #4
   83a90:	12001ed6 	and	w22, w22, #0xff
   83a94:	3863ca63 	ldrb	w3, [x19, w3, sxtw]
   83a98:	12000ed6 	and	w22, w22, #0xf
   83a9c:	39013fe3 	strb	w3, [sp, #79]
   83aa0:	f9400003 	ldr	x3, [x0]
   83aa4:	f9400c63 	ldr	x3, [x3, #24]
   83aa8:	d63f0060 	blr	x3
   83aac:	3876ca63 	ldrb	w3, [x19, w22, sxtw]
   83ab0:	91013fe1 	add	x1, sp, #0x4f
   83ab4:	d2800022 	mov	x2, #0x1                   	// #1
   83ab8:	53083e96 	ubfx	w22, w20, #8, #8
   83abc:	f941b6a0 	ldr	x0, [x21, #872]
   83ac0:	12000ed6 	and	w22, w22, #0xf
   83ac4:	39013fe3 	strb	w3, [sp, #79]
   83ac8:	f9400003 	ldr	x3, [x0]
   83acc:	f9400c63 	ldr	x3, [x3, #24]
   83ad0:	d63f0060 	blr	x3
   83ad4:	f941b6a0 	ldr	x0, [x21, #872]
   83ad8:	91013fe1 	add	x1, sp, #0x4f
   83adc:	d2800022 	mov	x2, #0x1                   	// #1
   83ae0:	530c3e83 	ubfx	w3, w20, #12, #4
   83ae4:	3863ca63 	ldrb	w3, [x19, w3, sxtw]
   83ae8:	39013fe3 	strb	w3, [sp, #79]
   83aec:	f9400003 	ldr	x3, [x0]
   83af0:	f9400c63 	ldr	x3, [x3, #24]
   83af4:	d63f0060 	blr	x3
   83af8:	3876ca63 	ldrb	w3, [x19, w22, sxtw]
   83afc:	91013fe1 	add	x1, sp, #0x4f
   83b00:	d2800022 	mov	x2, #0x1                   	// #1
   83b04:	f941b6a0 	ldr	x0, [x21, #872]
   83b08:	39013fe3 	strb	w3, [sp, #79]
   83b0c:	f9400003 	ldr	x3, [x0]
   83b10:	f9400c63 	ldr	x3, [x3, #24]
   83b14:	d63f0060 	blr	x3
   83b18:	f941b6a0 	ldr	x0, [x21, #872]
   83b1c:	91013fe1 	add	x1, sp, #0x4f
   83b20:	d2800022 	mov	x2, #0x1                   	// #1
   83b24:	53041e83 	ubfx	w3, w20, #4, #4
   83b28:	12001e94 	and	w20, w20, #0xff
   83b2c:	3863ca63 	ldrb	w3, [x19, w3, sxtw]
   83b30:	12000e94 	and	w20, w20, #0xf
   83b34:	39013fe3 	strb	w3, [sp, #79]
   83b38:	f9400003 	ldr	x3, [x0]
   83b3c:	f9400c63 	ldr	x3, [x3, #24]
   83b40:	d63f0060 	blr	x3
   83b44:	3874ca63 	ldrb	w3, [x19, w20, sxtw]
   83b48:	91013fe1 	add	x1, sp, #0x4f
   83b4c:	d2800022 	mov	x2, #0x1                   	// #1
   83b50:	f941b6a0 	ldr	x0, [x21, #872]
   83b54:	39013fe3 	strb	w3, [sp, #79]
   83b58:	f9400003 	ldr	x3, [x0]
   83b5c:	f9400c63 	ldr	x3, [x3, #24]
   83b60:	d63f0060 	blr	x3
   83b64:	a94153f3 	ldp	x19, x20, [sp, #16]
   83b68:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83b6c:	a94363f7 	ldp	x23, x24, [sp, #48]
   83b70:	a8c57bfd 	ldp	x29, x30, [sp], #80
   83b74:	d65f03c0 	ret
   83b78:	d503201f 	nop
   83b7c:	d503201f 	nop

0000000000083b80 <uart_writeText>:
   83b80:	b4000441 	cbz	x1, 83c08 <uart_writeText+0x88>
   83b84:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   83b88:	910003fd 	mov	x29, sp
   83b8c:	a90153f3 	stp	x19, x20, [sp, #16]
   83b90:	aa0003f3 	mov	x19, x0
   83b94:	a9025bf5 	stp	x21, x22, [sp, #32]
   83b98:	f0000176 	adrp	x22, b2000 <appendBuf+0xa0>
   83b9c:	910da2d6 	add	x22, x22, #0x368
   83ba0:	8b010015 	add	x21, x0, x1
   83ba4:	1400000a 	b	83bcc <uart_writeText+0x4c>
   83ba8:	f94002c0 	ldr	x0, [x22]
   83bac:	d2800022 	mov	x2, #0x1                   	// #1
   83bb0:	9100ffe1 	add	x1, sp, #0x3f
   83bb4:	3900fff4 	strb	w20, [sp, #63]
   83bb8:	f9400003 	ldr	x3, [x0]
   83bbc:	f9400c63 	ldr	x3, [x3, #24]
   83bc0:	d63f0060 	blr	x3
   83bc4:	eb15027f 	cmp	x19, x21
   83bc8:	54000180 	b.eq	83bf8 <uart_writeText+0x78>  // b.none
   83bcc:	38c01674 	ldrsb	w20, [x19], #1
   83bd0:	71002a9f 	cmp	w20, #0xa
   83bd4:	54fffea1 	b.ne	83ba8 <uart_writeText+0x28>  // b.any
   83bd8:	f94002c0 	ldr	x0, [x22]
   83bdc:	d2800022 	mov	x2, #0x1                   	// #1
   83be0:	9100ffe1 	add	x1, sp, #0x3f
   83be4:	f9400003 	ldr	x3, [x0]
   83be8:	f9400c63 	ldr	x3, [x3, #24]
   83bec:	3900fff4 	strb	w20, [sp, #63]
   83bf0:	d63f0060 	blr	x3
   83bf4:	17ffffed 	b	83ba8 <uart_writeText+0x28>
   83bf8:	a94153f3 	ldp	x19, x20, [sp, #16]
   83bfc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83c00:	a8c47bfd 	ldp	x29, x30, [sp], #64
   83c04:	d65f03c0 	ret
   83c08:	d65f03c0 	ret
   83c0c:	00000000 	udf	#0

0000000000083c10 <_out_buffer>:
   83c10:	eb03005f 	cmp	x2, x3
   83c14:	13001c00 	sxtb	w0, w0
   83c18:	54000042 	b.cs	83c20 <_out_buffer+0x10>  // b.hs, b.nlast
   83c1c:	38226820 	strb	w0, [x1, x2]
   83c20:	d65f03c0 	ret
   83c24:	d503201f 	nop
   83c28:	d503201f 	nop
   83c2c:	d503201f 	nop

0000000000083c30 <_out_null>:
   83c30:	d65f03c0 	ret
   83c34:	d503201f 	nop
   83c38:	d503201f 	nop
   83c3c:	d503201f 	nop

0000000000083c40 <_ntoa_long>:
   83c40:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   83c44:	910003fd 	mov	x29, sp
   83c48:	12001ca5 	and	w5, w5, #0xff
   83c4c:	b9408bea 	ldr	w10, [sp, #136]
   83c50:	a90153f3 	stp	x19, x20, [sp, #16]
   83c54:	aa0003f3 	mov	x19, x0
   83c58:	aa0103f4 	mov	x20, x1
   83c5c:	a9025bf5 	stp	x21, x22, [sp, #32]
   83c60:	aa0203f6 	mov	x22, x2
   83c64:	aa0303f5 	mov	x21, x3
   83c68:	1216014b 	and	w11, w10, #0x400
   83c6c:	121c014c 	and	w12, w10, #0x10
   83c70:	a90363f7 	stp	x23, x24, [sp, #48]
   83c74:	a9046bf9 	stp	x25, x26, [sp, #64]
   83c78:	a90573fb 	stp	x27, x28, [sp, #80]
   83c7c:	b94083f7 	ldr	w23, [sp, #128]
   83c80:	b50000a4 	cbnz	x4, 83c94 <_ntoa_long+0x54>
   83c84:	121b7940 	and	w0, w10, #0xffffffef
   83c88:	3500142b 	cbnz	w11, 83f0c <_ntoa_long+0x2cc>
   83c8c:	2a0003ea 	mov	w10, w0
   83c90:	5280000c 	mov	w12, #0x0                   	// #0
   83c94:	f27b015f 	tst	x10, #0x20
   83c98:	52800823 	mov	w3, #0x41                  	// #65
   83c9c:	52800c20 	mov	w0, #0x61                  	// #97
   83ca0:	d2800008 	mov	x8, #0x0                   	// #0
   83ca4:	1a801063 	csel	w3, w3, w0, ne	// ne = any
   83ca8:	910183f8 	add	x24, sp, #0x60
   83cac:	51002863 	sub	w3, w3, #0xa
   83cb0:	9ac60881 	udiv	x1, x4, x6
   83cb4:	91000508 	add	x8, x8, #0x1
   83cb8:	8b080302 	add	x2, x24, x8
   83cbc:	9b069020 	msub	x0, x1, x6, x4
   83cc0:	12001c09 	and	w9, w0, #0xff
   83cc4:	f100241f 	cmp	x0, #0x9
   83cc8:	1100c120 	add	w0, w9, #0x30
   83ccc:	0b030129 	add	w9, w9, w3
   83cd0:	13001c00 	sxtb	w0, w0
   83cd4:	13001d29 	sxtb	w9, w9
   83cd8:	1a808129 	csel	w9, w9, w0, hi	// hi = pmore
   83cdc:	f1007d1f 	cmp	x8, #0x1f
   83ce0:	381ff049 	sturb	w9, [x2, #-1]
   83ce4:	fa4490c2 	ccmp	x6, x4, #0x2, ls	// ls = plast
   83ce8:	aa0103e4 	mov	x4, x1
   83cec:	54fffe29 	b.ls	83cb0 <_ntoa_long+0x70>  // b.plast
   83cf0:	37080aaa 	tbnz	w10, #1, 83e44 <_ntoa_long+0x204>
   83cf4:	2a0703e1 	mov	w1, w7
   83cf8:	340011b7 	cbz	w23, 83f2c <_ntoa_long+0x2ec>
   83cfc:	1200015a 	and	w26, w10, #0x1
   83d00:	3600184a 	tbz	w10, #0, 84008 <_ntoa_long+0x3c8>
   83d04:	37001b45 	tbnz	w5, #0, 8406c <_ntoa_long+0x42c>
   83d08:	721e055f 	tst	w10, #0xc
   83d0c:	54001b01 	b.ne	8406c <_ntoa_long+0x42c>  // b.any
   83d10:	eb08003f 	cmp	x1, x8
   83d14:	540012c9 	b.ls	83f6c <_ntoa_long+0x32c>  // b.plast
   83d18:	f100811f 	cmp	x8, #0x20
   83d1c:	54001121 	b.ne	83f40 <_ntoa_long+0x300>  // b.any
   83d20:	710082ff 	cmp	w23, #0x20
   83d24:	54002209 	b.ls	84164 <_ntoa_long+0x524>  // b.plast
   83d28:	340023ec 	cbz	w12, 841a4 <_ntoa_long+0x564>
   83d2c:	3500244b 	cbnz	w11, 841b4 <_ntoa_long+0x574>
   83d30:	5280001a 	mov	w26, #0x0                   	// #0
   83d34:	d2800408 	mov	x8, #0x20                  	// #32
   83d38:	eb08003f 	cmp	x1, x8
   83d3c:	540019c0 	b.eq	84074 <_ntoa_long+0x434>  // b.none
   83d40:	eb37411f 	cmp	x8, w23, uxtw
   83d44:	54001980 	b.eq	84074 <_ntoa_long+0x434>  // b.none
   83d48:	f10040df 	cmp	x6, #0x10
   83d4c:	540017a0 	b.eq	84040 <_ntoa_long+0x400>  // b.none
   83d50:	710008df 	cmp	w6, #0x2
   83d54:	12000540 	and	w0, w10, #0x3
   83d58:	fa5f0902 	ccmp	x8, #0x1f, #0x2, eq	// eq = none
   83d5c:	540000e8 	b.hi	83d78 <_ntoa_long+0x138>  // b.pmore
   83d60:	aa0803e1 	mov	x1, x8
   83d64:	91000508 	add	x8, x8, #0x1
   83d68:	910183f8 	add	x24, sp, #0x60
   83d6c:	52800c42 	mov	w2, #0x62                  	// #98
   83d70:	12000540 	and	w0, w10, #0x3
   83d74:	38216b02 	strb	w2, [x24, x1]
   83d78:	f100811f 	cmp	x8, #0x20
   83d7c:	2a0003e1 	mov	w1, w0
   83d80:	54000981 	b.ne	83eb0 <_ntoa_long+0x270>  // b.any
   83d84:	35000a61 	cbnz	w1, 83ed0 <_ntoa_long+0x290>
   83d88:	710082ff 	cmp	w23, #0x20
   83d8c:	2a1703fb 	mov	w27, w23
   83d90:	d2800419 	mov	x25, #0x20                  	// #32
   83d94:	54001a29 	b.ls	840d8 <_ntoa_long+0x498>  // b.plast
   83d98:	aa1603f8 	mov	x24, x22
   83d9c:	cb16033c 	sub	x28, x25, x22
   83da0:	aa1803e2 	mov	x2, x24
   83da4:	52800400 	mov	w0, #0x20                  	// #32
   83da8:	aa1503e3 	mov	x3, x21
   83dac:	aa1403e1 	mov	x1, x20
   83db0:	d63f0260 	blr	x19
   83db4:	91000718 	add	x24, x24, #0x1
   83db8:	8b180380 	add	x0, x28, x24
   83dbc:	eb1b001f 	cmp	x0, x27
   83dc0:	54ffff03 	b.cc	83da0 <_ntoa_long+0x160>  // b.lo, b.ul, b.last
   83dc4:	d1000760 	sub	x0, x27, #0x1
   83dc8:	91000722 	add	x2, x25, #0x1
   83dcc:	910006c1 	add	x1, x22, #0x1
   83dd0:	eb1b005f 	cmp	x2, x27
   83dd4:	cb190000 	sub	x0, x0, x25
   83dd8:	9a9f9000 	csel	x0, x0, xzr, ls	// ls = plast
   83ddc:	8b01001b 	add	x27, x0, x1
   83de0:	910183f8 	add	x24, sp, #0x60
   83de4:	b50007d9 	cbnz	x25, 83edc <_ntoa_long+0x29c>
   83de8:	340001fa 	cbz	w26, 83e24 <_ntoa_long+0x1e4>
   83dec:	cb160376 	sub	x22, x27, x22
   83df0:	2a1703f7 	mov	w23, w23
   83df4:	eb1602ff 	cmp	x23, x22
   83df8:	54000169 	b.ls	83e24 <_ntoa_long+0x1e4>  // b.plast
   83dfc:	d503201f 	nop
   83e00:	aa1b03e2 	mov	x2, x27
   83e04:	aa1503e3 	mov	x3, x21
   83e08:	aa1403e1 	mov	x1, x20
   83e0c:	52800400 	mov	w0, #0x20                  	// #32
   83e10:	910006d6 	add	x22, x22, #0x1
   83e14:	9100077b 	add	x27, x27, #0x1
   83e18:	d63f0260 	blr	x19
   83e1c:	eb1702df 	cmp	x22, x23
   83e20:	54ffff03 	b.cc	83e00 <_ntoa_long+0x1c0>  // b.lo, b.ul, b.last
   83e24:	a94153f3 	ldp	x19, x20, [sp, #16]
   83e28:	aa1b03e0 	mov	x0, x27
   83e2c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   83e30:	a94363f7 	ldp	x23, x24, [sp, #48]
   83e34:	a9446bf9 	ldp	x25, x26, [sp, #64]
   83e38:	a94573fb 	ldp	x27, x28, [sp, #80]
   83e3c:	a8c87bfd 	ldp	x29, x30, [sp], #128
   83e40:	d65f03c0 	ret
   83e44:	5280005a 	mov	w26, #0x2                   	// #2
   83e48:	12000540 	and	w0, w10, #0x3
   83e4c:	340003cc 	cbz	w12, 83ec4 <_ntoa_long+0x284>
   83e50:	35fff7cb 	cbnz	w11, 83d48 <_ntoa_long+0x108>
   83e54:	2a0703e1 	mov	w1, w7
   83e58:	b5fff708 	cbnz	x8, 83d38 <_ntoa_long+0xf8>
   83e5c:	f10040df 	cmp	x6, #0x10
   83e60:	54001760 	b.eq	8414c <_ntoa_long+0x50c>  // b.none
   83e64:	f10008df 	cmp	x6, #0x2
   83e68:	540014c1 	b.ne	84100 <_ntoa_long+0x4c0>  // b.any
   83e6c:	52800c40 	mov	w0, #0x62                  	// #98
   83e70:	52800601 	mov	w1, #0x30                  	// #48
   83e74:	d2800048 	mov	x8, #0x2                   	// #2
   83e78:	390183e0 	strb	w0, [sp, #96]
   83e7c:	12000540 	and	w0, w10, #0x3
   83e80:	390187e1 	strb	w1, [sp, #97]
   83e84:	36000aa5 	tbz	w5, #0, 83fd8 <_ntoa_long+0x398>
   83e88:	910183f8 	add	x24, sp, #0x60
   83e8c:	528005a1 	mov	w1, #0x2d                  	// #45
   83e90:	91000519 	add	x25, x8, #0x1
   83e94:	38286b01 	strb	w1, [x24, x8]
   83e98:	35000080 	cbnz	w0, 83ea8 <_ntoa_long+0x268>
   83e9c:	2a1703fb 	mov	w27, w23
   83ea0:	eb1b033f 	cmp	x25, x27
   83ea4:	54fff7a3 	b.cc	83d98 <_ntoa_long+0x158>  // b.lo, b.ul, b.last
   83ea8:	aa1603fb 	mov	x27, x22
   83eac:	1400000c 	b	83edc <_ntoa_long+0x29c>
   83eb0:	aa0803e1 	mov	x1, x8
   83eb4:	910183f8 	add	x24, sp, #0x60
   83eb8:	91000508 	add	x8, x8, #0x1
   83ebc:	52800602 	mov	w2, #0x30                  	// #48
   83ec0:	38216b02 	strb	w2, [x24, x1]
   83ec4:	f100811f 	cmp	x8, #0x20
   83ec8:	54fffde1 	b.ne	83e84 <_ntoa_long+0x244>  // b.any
   83ecc:	34fff5e0 	cbz	w0, 83d88 <_ntoa_long+0x148>
   83ed0:	aa1603fb 	mov	x27, x22
   83ed4:	d2800419 	mov	x25, #0x20                  	// #32
   83ed8:	910183f8 	add	x24, sp, #0x60
   83edc:	8b19037b 	add	x27, x27, x25
   83ee0:	8b190319 	add	x25, x24, x25
   83ee4:	d503201f 	nop
   83ee8:	cb190302 	sub	x2, x24, x25
   83eec:	385fff20 	ldrb	w0, [x25, #-1]!
   83ef0:	aa1503e3 	mov	x3, x21
   83ef4:	8b1b0042 	add	x2, x2, x27
   83ef8:	aa1403e1 	mov	x1, x20
   83efc:	d63f0260 	blr	x19
   83f00:	eb18033f 	cmp	x25, x24
   83f04:	54ffff21 	b.ne	83ee8 <_ntoa_long+0x2a8>  // b.any
   83f08:	17ffffb8 	b	83de8 <_ntoa_long+0x1a8>
   83f0c:	121f014c 	and	w12, w10, #0x2
   83f10:	3608074a 	tbz	w10, #1, 83ff8 <_ntoa_long+0x3b8>
   83f14:	2a0003ea 	mov	w10, w0
   83f18:	d2800008 	mov	x8, #0x0                   	// #0
   83f1c:	12000400 	and	w0, w0, #0x3
   83f20:	5280005a 	mov	w26, #0x2                   	// #2
   83f24:	360005a5 	tbz	w5, #0, 83fd8 <_ntoa_long+0x398>
   83f28:	17ffffd8 	b	83e88 <_ntoa_long+0x248>
   83f2c:	eb08003f 	cmp	x1, x8
   83f30:	540003c9 	b.ls	83fa8 <_ntoa_long+0x368>  // b.plast
   83f34:	f100811f 	cmp	x8, #0x20
   83f38:	1200015a 	and	w26, w10, #0x1
   83f3c:	54001120 	b.eq	84160 <_ntoa_long+0x520>  // b.none
   83f40:	910183f8 	add	x24, sp, #0x60
   83f44:	52800602 	mov	w2, #0x30                  	// #48
   83f48:	14000003 	b	83f54 <_ntoa_long+0x314>
   83f4c:	f100811f 	cmp	x8, #0x20
   83f50:	54000300 	b.eq	83fb0 <_ntoa_long+0x370>  // b.none
   83f54:	91000508 	add	x8, x8, #0x1
   83f58:	8b080300 	add	x0, x24, x8
   83f5c:	eb01011f 	cmp	x8, x1
   83f60:	381ff002 	sturb	w2, [x0, #-1]
   83f64:	54ffff43 	b.cc	83f4c <_ntoa_long+0x30c>  // b.lo, b.ul, b.last
   83f68:	34fff71a 	cbz	w26, 83e48 <_ntoa_long+0x208>
   83f6c:	2a1703e2 	mov	w2, w23
   83f70:	eb08005f 	cmp	x2, x8
   83f74:	540001a9 	b.ls	83fa8 <_ntoa_long+0x368>  // b.plast
   83f78:	f100811f 	cmp	x8, #0x20
   83f7c:	910183f8 	add	x24, sp, #0x60
   83f80:	52800603 	mov	w3, #0x30                  	// #48
   83f84:	54000081 	b.ne	83f94 <_ntoa_long+0x354>  // b.any
   83f88:	17ffff68 	b	83d28 <_ntoa_long+0xe8>
   83f8c:	f100811f 	cmp	x8, #0x20
   83f90:	54000180 	b.eq	83fc0 <_ntoa_long+0x380>  // b.none
   83f94:	91000508 	add	x8, x8, #0x1
   83f98:	8b080300 	add	x0, x24, x8
   83f9c:	eb08005f 	cmp	x2, x8
   83fa0:	381ff003 	sturb	w3, [x0, #-1]
   83fa4:	54ffff41 	b.ne	83f8c <_ntoa_long+0x34c>  // b.any
   83fa8:	5280001a 	mov	w26, #0x0                   	// #0
   83fac:	17ffffa7 	b	83e48 <_ntoa_long+0x208>
   83fb0:	3400009a 	cbz	w26, 83fc0 <_ntoa_long+0x380>
   83fb4:	710082ff 	cmp	w23, #0x20
   83fb8:	54ffeb88 	b.hi	83d28 <_ntoa_long+0xe8>  // b.pmore
   83fbc:	d503201f 	nop
   83fc0:	5280001a 	mov	w26, #0x0                   	// #0
   83fc4:	d2800408 	mov	x8, #0x20                  	// #32
   83fc8:	12000540 	and	w0, w10, #0x3
   83fcc:	35fff42c 	cbnz	w12, 83e50 <_ntoa_long+0x210>
   83fd0:	35fff800 	cbnz	w0, 83ed0 <_ntoa_long+0x290>
   83fd4:	17ffff6d 	b	83d88 <_ntoa_long+0x148>
   83fd8:	3610072a 	tbz	w10, #2, 840bc <_ntoa_long+0x47c>
   83fdc:	910183f8 	add	x24, sp, #0x60
   83fe0:	52800561 	mov	w1, #0x2b                  	// #43
   83fe4:	91000519 	add	x25, x8, #0x1
   83fe8:	38286b01 	strb	w1, [x24, x8]
   83fec:	34fff580 	cbz	w0, 83e9c <_ntoa_long+0x25c>
   83ff0:	aa1603fb 	mov	x27, x22
   83ff4:	17ffffba 	b	83edc <_ntoa_long+0x29c>
   83ff8:	2a0003ea 	mov	w10, w0
   83ffc:	d2800008 	mov	x8, #0x0                   	// #0
   84000:	5280800b 	mov	w11, #0x400                 	// #1024
   84004:	17ffff3c 	b	83cf4 <_ntoa_long+0xb4>
   84008:	eb08003f 	cmp	x1, x8
   8400c:	54fff1e9 	b.ls	83e48 <_ntoa_long+0x208>  // b.plast
   84010:	f100811f 	cmp	x8, #0x20
   84014:	54fff961 	b.ne	83f40 <_ntoa_long+0x300>  // b.any
   84018:	34ffeb8c 	cbz	w12, 83d88 <_ntoa_long+0x148>
   8401c:	34ffe8ab 	cbz	w11, 83d30 <_ntoa_long+0xf0>
   84020:	f10040df 	cmp	x6, #0x10
   84024:	540000a0 	b.eq	84038 <_ntoa_long+0x3f8>  // b.none
   84028:	12000541 	and	w1, w10, #0x3
   8402c:	5280001a 	mov	w26, #0x0                   	// #0
   84030:	35fff501 	cbnz	w1, 83ed0 <_ntoa_long+0x290>
   84034:	17ffff55 	b	83d88 <_ntoa_long+0x148>
   84038:	5280001a 	mov	w26, #0x0                   	// #0
   8403c:	d2800408 	mov	x8, #0x20                  	// #32
   84040:	12000540 	and	w0, w10, #0x3
   84044:	2a0003e1 	mov	w1, w0
   84048:	362802aa 	tbz	w10, #5, 8409c <_ntoa_long+0x45c>
   8404c:	f100811f 	cmp	x8, #0x20
   84050:	91000502 	add	x2, x8, #0x1
   84054:	54000280 	b.eq	840a4 <_ntoa_long+0x464>  // b.none
   84058:	910183f8 	add	x24, sp, #0x60
   8405c:	52800b01 	mov	w1, #0x58                  	// #88
   84060:	38286b01 	strb	w1, [x24, x8]
   84064:	aa0203e8 	mov	x8, x2
   84068:	17ffff44 	b	83d78 <_ntoa_long+0x138>
   8406c:	510006f7 	sub	w23, w23, #0x1
   84070:	17ffff28 	b	83d10 <_ntoa_long+0xd0>
   84074:	f1000501 	subs	x1, x8, #0x1
   84078:	7a5018c0 	ccmp	w6, #0x10, #0x0, ne	// ne = any
   8407c:	540004e0 	b.eq	84118 <_ntoa_long+0x4d8>  // b.none
   84080:	f10040df 	cmp	x6, #0x10
   84084:	540007e0 	b.eq	84180 <_ntoa_long+0x540>  // b.none
   84088:	f10008df 	cmp	x6, #0x2
   8408c:	54ffe6e0 	b.eq	83d68 <_ntoa_long+0x128>  // b.none
   84090:	910183f8 	add	x24, sp, #0x60
   84094:	12000540 	and	w0, w10, #0x3
   84098:	17ffff89 	b	83ebc <_ntoa_long+0x27c>
   8409c:	f100811f 	cmp	x8, #0x20
   840a0:	540004a1 	b.ne	84134 <_ntoa_long+0x4f4>  // b.any
   840a4:	35fff161 	cbnz	w1, 83ed0 <_ntoa_long+0x290>
   840a8:	710082ff 	cmp	w23, #0x20
   840ac:	2a1703fb 	mov	w27, w23
   840b0:	d2800419 	mov	x25, #0x20                  	// #32
   840b4:	54ffe728 	b.hi	83d98 <_ntoa_long+0x158>  // b.pmore
   840b8:	17ffff86 	b	83ed0 <_ntoa_long+0x290>
   840bc:	3718014a 	tbnz	w10, #3, 840e4 <_ntoa_long+0x4a4>
   840c0:	350006c0 	cbnz	w0, 84198 <_ntoa_long+0x558>
   840c4:	2a1703fb 	mov	w27, w23
   840c8:	aa0803f9 	mov	x25, x8
   840cc:	eb08037f 	cmp	x27, x8
   840d0:	54ffe648 	b.hi	83d98 <_ntoa_long+0x158>  // b.pmore
   840d4:	b4000828 	cbz	x8, 841d8 <_ntoa_long+0x598>
   840d8:	aa1603fb 	mov	x27, x22
   840dc:	910183f8 	add	x24, sp, #0x60
   840e0:	17ffff7f 	b	83edc <_ntoa_long+0x29c>
   840e4:	910183f8 	add	x24, sp, #0x60
   840e8:	52800401 	mov	w1, #0x20                  	// #32
   840ec:	91000519 	add	x25, x8, #0x1
   840f0:	38286b01 	strb	w1, [x24, x8]
   840f4:	34ffed40 	cbz	w0, 83e9c <_ntoa_long+0x25c>
   840f8:	aa1603fb 	mov	x27, x22
   840fc:	17ffff78 	b	83edc <_ntoa_long+0x29c>
   84100:	52800601 	mov	w1, #0x30                  	// #48
   84104:	d2800028 	mov	x8, #0x1                   	// #1
   84108:	12000540 	and	w0, w10, #0x3
   8410c:	390183e1 	strb	w1, [sp, #96]
   84110:	3607f645 	tbz	w5, #0, 83fd8 <_ntoa_long+0x398>
   84114:	17ffff5d 	b	83e88 <_ntoa_long+0x248>
   84118:	910183f8 	add	x24, sp, #0x60
   8411c:	d1000902 	sub	x2, x8, #0x2
   84120:	3628028a 	tbz	w10, #5, 84170 <_ntoa_long+0x530>
   84124:	52800b03 	mov	w3, #0x58                  	// #88
   84128:	12000540 	and	w0, w10, #0x3
   8412c:	38226b03 	strb	w3, [x24, x2]
   84130:	17ffff63 	b	83ebc <_ntoa_long+0x27c>
   84134:	aa0803e1 	mov	x1, x8
   84138:	91000508 	add	x8, x8, #0x1
   8413c:	910183f8 	add	x24, sp, #0x60
   84140:	52800f02 	mov	w2, #0x78                  	// #120
   84144:	38216b02 	strb	w2, [x24, x1]
   84148:	17ffff0c 	b	83d78 <_ntoa_long+0x138>
   8414c:	f27b015f 	tst	x10, #0x20
   84150:	52800b00 	mov	w0, #0x58                  	// #88
   84154:	52800f01 	mov	w1, #0x78                  	// #120
   84158:	1a811000 	csel	w0, w0, w1, ne	// ne = any
   8415c:	17ffff45 	b	83e70 <_ntoa_long+0x230>
   84160:	3400041a 	cbz	w26, 841e0 <_ntoa_long+0x5a0>
   84164:	35fff5cc 	cbnz	w12, 8401c <_ntoa_long+0x3dc>
   84168:	5280001a 	mov	w26, #0x0                   	// #0
   8416c:	17ffff59 	b	83ed0 <_ntoa_long+0x290>
   84170:	52800f03 	mov	w3, #0x78                  	// #120
   84174:	12000540 	and	w0, w10, #0x3
   84178:	38226b03 	strb	w3, [x24, x2]
   8417c:	17ffff50 	b	83ebc <_ntoa_long+0x27c>
   84180:	12000540 	and	w0, w10, #0x3
   84184:	362ffdca 	tbz	w10, #5, 8413c <_ntoa_long+0x4fc>
   84188:	aa0803e2 	mov	x2, x8
   8418c:	12000540 	and	w0, w10, #0x3
   84190:	aa0103e8 	mov	x8, x1
   84194:	17ffffb1 	b	84058 <_ntoa_long+0x418>
   84198:	aa0803f9 	mov	x25, x8
   8419c:	aa1603fb 	mov	x27, x22
   841a0:	17ffff10 	b	83de0 <_ntoa_long+0x1a0>
   841a4:	12000540 	and	w0, w10, #0x3
   841a8:	5280001a 	mov	w26, #0x0                   	// #0
   841ac:	35ffe920 	cbnz	w0, 83ed0 <_ntoa_long+0x290>
   841b0:	17fffef6 	b	83d88 <_ntoa_long+0x148>
   841b4:	f10040df 	cmp	x6, #0x10
   841b8:	12000541 	and	w1, w10, #0x3
   841bc:	5280001a 	mov	w26, #0x0                   	// #0
   841c0:	54ffde21 	b.ne	83d84 <_ntoa_long+0x144>  // b.any
   841c4:	121b015a 	and	w26, w10, #0x20
   841c8:	362ff6ea 	tbz	w10, #5, 840a4 <_ntoa_long+0x464>
   841cc:	5280001a 	mov	w26, #0x0                   	// #0
   841d0:	35ffe801 	cbnz	w1, 83ed0 <_ntoa_long+0x290>
   841d4:	17ffffb5 	b	840a8 <_ntoa_long+0x468>
   841d8:	aa1603fb 	mov	x27, x22
   841dc:	17ffff12 	b	83e24 <_ntoa_long+0x1e4>
   841e0:	35fff1ec 	cbnz	w12, 8401c <_ntoa_long+0x3dc>
   841e4:	aa0803f9 	mov	x25, x8
   841e8:	17ffffbc 	b	840d8 <_ntoa_long+0x498>
   841ec:	d503201f 	nop

00000000000841f0 <_out_char>:
   841f0:	13001c00 	sxtb	w0, w0
   841f4:	35000040 	cbnz	w0, 841fc <_out_char+0xc>
   841f8:	d65f03c0 	ret
   841fc:	17fff8f9 	b	825e0 <_putchar>

0000000000084200 <_out_fct>:
   84200:	13001c00 	sxtb	w0, w0
   84204:	34000080 	cbz	w0, 84214 <_out_fct+0x14>
   84208:	a9400422 	ldp	x2, x1, [x1]
   8420c:	aa0203f0 	mov	x16, x2
   84210:	d61f0200 	br	x16
   84214:	d65f03c0 	ret
   84218:	d503201f 	nop
   8421c:	d503201f 	nop

0000000000084220 <_vsnprintf>:
   84220:	d10283ff 	sub	sp, sp, #0xa0
   84224:	a9017bfd 	stp	x29, x30, [sp, #16]
   84228:	910043fd 	add	x29, sp, #0x10
   8422c:	a9035bf5 	stp	x21, x22, [sp, #48]
   84230:	aa0103f5 	mov	x21, x1
   84234:	f10002bf 	cmp	x21, #0x0
   84238:	a90253f3 	stp	x19, x20, [sp, #32]
   8423c:	f0fffff4 	adrp	x20, 83000 <linenoiseEditFeed+0x50>
   84240:	9130c294 	add	x20, x20, #0xc30
   84244:	9a800294 	csel	x20, x20, x0, eq	// eq = none
   84248:	aa0203f3 	mov	x19, x2
   8424c:	a90463f7 	stp	x23, x24, [sp, #64]
   84250:	a9400097 	ldp	x23, x0, [x4]
   84254:	a90673fb 	stp	x27, x28, [sp, #96]
   84258:	d280001c 	mov	x28, #0x0                   	// #0
   8425c:	39c00061 	ldrsb	w1, [x3]
   84260:	f90047e0 	str	x0, [sp, #136]
   84264:	b9401898 	ldr	w24, [x4, #24]
   84268:	34003481 	cbz	w1, 848f8 <_vsnprintf+0x6d8>
   8426c:	a9056bf9 	stp	x25, x26, [sp, #80]
   84270:	aa0303fa 	mov	x26, x3
   84274:	14000008 	b	84294 <_vsnprintf+0x74>
   84278:	aa1c03e2 	mov	x2, x28
   8427c:	aa1303e3 	mov	x3, x19
   84280:	aa1503e1 	mov	x1, x21
   84284:	9100079c 	add	x28, x28, #0x1
   84288:	d63f0280 	blr	x20
   8428c:	39c00341 	ldrsb	w1, [x26]
   84290:	340016c1 	cbz	w1, 84568 <_vsnprintf+0x348>
   84294:	7100943f 	cmp	w1, #0x25
   84298:	2a0103e0 	mov	w0, w1
   8429c:	9100075a 	add	x26, x26, #0x1
   842a0:	54fffec1 	b.ne	84278 <_vsnprintf+0x58>  // b.any
   842a4:	aa1a03e1 	mov	x1, x26
   842a8:	52800002 	mov	w2, #0x0                   	// #0
   842ac:	38c01420 	ldrsb	w0, [x1], #1
   842b0:	7100ac1f 	cmp	w0, #0x2b
   842b4:	54000180 	b.eq	842e4 <_vsnprintf+0xc4>  // b.none
   842b8:	540001cc 	b.gt	842f0 <_vsnprintf+0xd0>
   842bc:	7100801f 	cmp	w0, #0x20
   842c0:	54000260 	b.eq	8430c <_vsnprintf+0xec>  // b.none
   842c4:	71008c1f 	cmp	w0, #0x23
   842c8:	54000e21 	b.ne	8448c <_vsnprintf+0x26c>  // b.any
   842cc:	321c0042 	orr	w2, w2, #0x10
   842d0:	aa0103fa 	mov	x26, x1
   842d4:	aa1a03e1 	mov	x1, x26
   842d8:	38c01420 	ldrsb	w0, [x1], #1
   842dc:	7100ac1f 	cmp	w0, #0x2b
   842e0:	54fffec1 	b.ne	842b8 <_vsnprintf+0x98>  // b.any
   842e4:	321e0042 	orr	w2, w2, #0x4
   842e8:	aa0103fa 	mov	x26, x1
   842ec:	17fffffa 	b	842d4 <_vsnprintf+0xb4>
   842f0:	7100b41f 	cmp	w0, #0x2d
   842f4:	54000120 	b.eq	84318 <_vsnprintf+0xf8>  // b.none
   842f8:	7100c01f 	cmp	w0, #0x30
   842fc:	54000141 	b.ne	84324 <_vsnprintf+0x104>  // b.any
   84300:	32000042 	orr	w2, w2, #0x1
   84304:	aa0103fa 	mov	x26, x1
   84308:	17fffff3 	b	842d4 <_vsnprintf+0xb4>
   8430c:	321d0042 	orr	w2, w2, #0x8
   84310:	aa0103fa 	mov	x26, x1
   84314:	17fffff0 	b	842d4 <_vsnprintf+0xb4>
   84318:	321f0042 	orr	w2, w2, #0x2
   8431c:	aa0103fa 	mov	x26, x1
   84320:	17ffffed 	b	842d4 <_vsnprintf+0xb4>
   84324:	5100c003 	sub	w3, w0, #0x30
   84328:	5280001b 	mov	w27, #0x0                   	// #0
   8432c:	12001c63 	and	w3, w3, #0xff
   84330:	7100247f 	cmp	w3, #0x9
   84334:	54000168 	b.hi	84360 <_vsnprintf+0x140>  // b.pmore
   84338:	0b1b0b6a 	add	w10, w27, w27, lsl #2
   8433c:	aa0103fa 	mov	x26, x1
   84340:	91000421 	add	x1, x1, #0x1
   84344:	0b0a040a 	add	w10, w0, w10, lsl #1
   84348:	38dff020 	ldursb	w0, [x1, #-1]
   8434c:	5100c15b 	sub	w27, w10, #0x30
   84350:	5100c003 	sub	w3, w0, #0x30
   84354:	12001c63 	and	w3, w3, #0xff
   84358:	7100247f 	cmp	w3, #0x9
   8435c:	54fffee9 	b.ls	84338 <_vsnprintf+0x118>  // b.plast
   84360:	7100b81f 	cmp	w0, #0x2e
   84364:	52800019 	mov	w25, #0x0                   	// #0
   84368:	54000181 	b.ne	84398 <_vsnprintf+0x178>  // b.any
   8436c:	39c00740 	ldrsb	w0, [x26, #1]
   84370:	32160042 	orr	w2, w2, #0x400
   84374:	aa0103e3 	mov	x3, x1
   84378:	5100c004 	sub	w4, w0, #0x30
   8437c:	12001c84 	and	w4, w4, #0xff
   84380:	7100249f 	cmp	w4, #0x9
   84384:	540005a9 	b.ls	84438 <_vsnprintf+0x218>  // b.plast
   84388:	7100a81f 	cmp	w0, #0x2a
   8438c:	54001de0 	b.eq	84748 <_vsnprintf+0x528>  // b.none
   84390:	aa0103fa 	mov	x26, x1
   84394:	91000421 	add	x1, x1, #0x1
   84398:	7101b01f 	cmp	w0, #0x6c
   8439c:	aa0103e3 	mov	x3, x1
   843a0:	54000680 	b.eq	84470 <_vsnprintf+0x250>  // b.none
   843a4:	5400094c 	b.gt	844cc <_vsnprintf+0x2ac>
   843a8:	7101a01f 	cmp	w0, #0x68
   843ac:	54001100 	b.eq	845cc <_vsnprintf+0x3ac>  // b.none
   843b0:	7101a81f 	cmp	w0, #0x6a
   843b4:	54001c61 	b.ne	84740 <_vsnprintf+0x520>  // b.any
   843b8:	39c00740 	ldrsb	w0, [x26, #1]
   843bc:	32180042 	orr	w2, w2, #0x100
   843c0:	7101e01f 	cmp	w0, #0x78
   843c4:	9100047a 	add	x26, x3, #0x1
   843c8:	54fff58c 	b.gt	84278 <_vsnprintf+0x58>
   843cc:	71018c1f 	cmp	w0, #0x63
   843d0:	540008cc 	b.gt	844e8 <_vsnprintf+0x2c8>
   843d4:	7101881f 	cmp	w0, #0x62
   843d8:	54003240 	b.eq	84a20 <_vsnprintf+0x800>  // b.none
   843dc:	71018c1f 	cmp	w0, #0x63
   843e0:	54001000 	b.eq	845e0 <_vsnprintf+0x3c0>  // b.none
   843e4:	7100941f 	cmp	w0, #0x25
   843e8:	54fff480 	b.eq	84278 <_vsnprintf+0x58>  // b.none
   843ec:	7101601f 	cmp	w0, #0x58
   843f0:	54fff441 	b.ne	84278 <_vsnprintf+0x58>  // b.any
   843f4:	321b0042 	orr	w2, w2, #0x20
   843f8:	d2800206 	mov	x6, #0x10                  	// #16
   843fc:	f276005f 	tst	x2, #0x400
   84400:	128001a1 	mov	w1, #0xfffffff2            	// #-14
   84404:	121c7440 	and	w0, w2, #0xfffffff3
   84408:	0a010041 	and	w1, w2, w1
   8440c:	1a810000 	csel	w0, w0, w1, eq	// eq = none
   84410:	374830c0 	tbnz	w0, #9, 84a28 <_vsnprintf+0x808>
   84414:	37403b80 	tbnz	w0, #8, 84b84 <_vsnprintf+0x964>
   84418:	37303500 	tbnz	w0, #6, 84ab8 <_vsnprintf+0x898>
   8441c:	36384040 	tbz	w0, #7, 84c24 <_vsnprintf+0xa04>
   84420:	37f848b8 	tbnz	w24, #31, 84d34 <_vsnprintf+0xb14>
   84424:	aa1703e1 	mov	x1, x23
   84428:	91002ee2 	add	x2, x23, #0xb
   8442c:	79400024 	ldrh	w4, [x1]
   84430:	927df057 	and	x23, x2, #0xfffffffffffffff8
   84434:	140001a6 	b	84acc <_vsnprintf+0x8ac>
   84438:	0b190b27 	add	w7, w25, w25, lsl #2
   8443c:	0b070407 	add	w7, w0, w7, lsl #1
   84440:	38c01c60 	ldrsb	w0, [x3, #1]!
   84444:	5100c0f9 	sub	w25, w7, #0x30
   84448:	5100c001 	sub	w1, w0, #0x30
   8444c:	12001c21 	and	w1, w1, #0xff
   84450:	7100243f 	cmp	w1, #0x9
   84454:	54ffff29 	b.ls	84438 <_vsnprintf+0x218>  // b.plast
   84458:	91000461 	add	x1, x3, #0x1
   8445c:	7101b01f 	cmp	w0, #0x6c
   84460:	aa0303fa 	mov	x26, x3
   84464:	aa0103e3 	mov	x3, x1
   84468:	54fff9e1 	b.ne	843a4 <_vsnprintf+0x184>  // b.any
   8446c:	d503201f 	nop
   84470:	39c00740 	ldrsb	w0, [x26, #1]
   84474:	7101b01f 	cmp	w0, #0x6c
   84478:	54fffa21 	b.ne	843bc <_vsnprintf+0x19c>  // b.any
   8447c:	39c00b40 	ldrsb	w0, [x26, #2]
   84480:	32180442 	orr	w2, w2, #0x300
   84484:	91000b43 	add	x3, x26, #0x2
   84488:	17ffffce 	b	843c0 <_vsnprintf+0x1a0>
   8448c:	7100a81f 	cmp	w0, #0x2a
   84490:	5280001b 	mov	w27, #0x0                   	// #0
   84494:	52800019 	mov	w25, #0x0                   	// #0
   84498:	54fff801 	b.ne	84398 <_vsnprintf+0x178>  // b.any
   8449c:	37f80898 	tbnz	w24, #31, 845ac <_vsnprintf+0x38c>
   844a0:	91002ee3 	add	x3, x23, #0xb
   844a4:	aa1703e0 	mov	x0, x23
   844a8:	927df077 	and	x23, x3, #0xfffffffffffffff8
   844ac:	b940001b 	ldr	w27, [x0]
   844b0:	36f8007b 	tbz	w27, #31, 844bc <_vsnprintf+0x29c>
   844b4:	321f0042 	orr	w2, w2, #0x2
   844b8:	4b1b03fb 	neg	w27, w27
   844bc:	39c00740 	ldrsb	w0, [x26, #1]
   844c0:	aa0103fa 	mov	x26, x1
   844c4:	91000421 	add	x1, x1, #0x1
   844c8:	17ffffa6 	b	84360 <_vsnprintf+0x140>
   844cc:	7101d01f 	cmp	w0, #0x74
   844d0:	54fff740 	b.eq	843b8 <_vsnprintf+0x198>  // b.none
   844d4:	7101e81f 	cmp	w0, #0x7a
   844d8:	54fff700 	b.eq	843b8 <_vsnprintf+0x198>  // b.none
   844dc:	7101e01f 	cmp	w0, #0x78
   844e0:	aa0103fa 	mov	x26, x1
   844e4:	54ffecac 	b.gt	84278 <_vsnprintf+0x58>
   844e8:	d2800023 	mov	x3, #0x1                   	// #1
   844ec:	51019001 	sub	w1, w0, #0x64
   844f0:	9ac12061 	lsl	x1, x3, x1
   844f4:	d2810423 	mov	x3, #0x821                 	// #2081
   844f8:	f2a00243 	movk	x3, #0x12, lsl #16
   844fc:	ea03003f 	tst	x1, x3
   84500:	54000f81 	b.ne	846f0 <_vsnprintf+0x4d0>  // b.any
   84504:	7101cc1f 	cmp	w0, #0x73
   84508:	54000900 	b.eq	84628 <_vsnprintf+0x408>  // b.none
   8450c:	7101c01f 	cmp	w0, #0x70
   84510:	54ffeb41 	b.ne	84278 <_vsnprintf+0x58>  // b.any
   84514:	52800420 	mov	w0, #0x21                  	// #33
   84518:	2a000040 	orr	w0, w2, w0
   8451c:	37f81bf8 	tbnz	w24, #31, 84898 <_vsnprintf+0x678>
   84520:	91003ee2 	add	x2, x23, #0xf
   84524:	aa1703e1 	mov	x1, x23
   84528:	927df057 	and	x23, x2, #0xfffffffffffffff8
   8452c:	f9400024 	ldr	x4, [x1]
   84530:	52800201 	mov	w1, #0x10                  	// #16
   84534:	aa1c03e2 	mov	x2, x28
   84538:	2a1903e7 	mov	w7, w25
   8453c:	d2800206 	mov	x6, #0x10                  	// #16
   84540:	b9000be0 	str	w0, [sp, #8]
   84544:	52800005 	mov	w5, #0x0                   	// #0
   84548:	aa1303e3 	mov	x3, x19
   8454c:	b90003e1 	str	w1, [sp]
   84550:	aa1403e0 	mov	x0, x20
   84554:	aa1503e1 	mov	x1, x21
   84558:	97fffdba 	bl	83c40 <_ntoa_long>
   8455c:	39c00341 	ldrsb	w1, [x26]
   84560:	aa0003fc 	mov	x28, x0
   84564:	35ffe981 	cbnz	w1, 84294 <_vsnprintf+0x74>
   84568:	a9456bf9 	ldp	x25, x26, [sp, #80]
   8456c:	2a1c03f6 	mov	w22, w28
   84570:	eb13039f 	cmp	x28, x19
   84574:	aa1503e1 	mov	x1, x21
   84578:	aa1303e3 	mov	x3, x19
   8457c:	52800000 	mov	w0, #0x0                   	// #0
   84580:	d1000662 	sub	x2, x19, #0x1
   84584:	9a9c2042 	csel	x2, x2, x28, cs	// cs = hs, nlast
   84588:	d63f0280 	blr	x20
   8458c:	a9417bfd 	ldp	x29, x30, [sp, #16]
   84590:	2a1603e0 	mov	w0, w22
   84594:	a94253f3 	ldp	x19, x20, [sp, #32]
   84598:	a9435bf5 	ldp	x21, x22, [sp, #48]
   8459c:	a94463f7 	ldp	x23, x24, [sp, #64]
   845a0:	a94673fb 	ldp	x27, x28, [sp, #96]
   845a4:	910283ff 	add	sp, sp, #0xa0
   845a8:	d65f03c0 	ret
   845ac:	11002303 	add	w3, w24, #0x8
   845b0:	7100007f 	cmp	w3, #0x0
   845b4:	5400160d 	b.le	84874 <_vsnprintf+0x654>
   845b8:	91002ee4 	add	x4, x23, #0xb
   845bc:	aa1703e0 	mov	x0, x23
   845c0:	2a0303f8 	mov	w24, w3
   845c4:	927df097 	and	x23, x4, #0xfffffffffffffff8
   845c8:	17ffffb9 	b	844ac <_vsnprintf+0x28c>
   845cc:	39c00740 	ldrsb	w0, [x26, #1]
   845d0:	7101a01f 	cmp	w0, #0x68
   845d4:	54001820 	b.eq	848d8 <_vsnprintf+0x6b8>  // b.none
   845d8:	32190042 	orr	w2, w2, #0x80
   845dc:	17ffff79 	b	843c0 <_vsnprintf+0x1a0>
   845e0:	121f0040 	and	w0, w2, #0x2
   845e4:	52800036 	mov	w22, #0x1                   	// #1
   845e8:	b90083e0 	str	w0, [sp, #128]
   845ec:	36080c42 	tbz	w2, #1, 84774 <_vsnprintf+0x554>
   845f0:	37f80e78 	tbnz	w24, #31, 847bc <_vsnprintf+0x59c>
   845f4:	91002ee1 	add	x1, x23, #0xb
   845f8:	aa1703e0 	mov	x0, x23
   845fc:	927df037 	and	x23, x1, #0xfffffffffffffff8
   84600:	39400000 	ldrb	w0, [x0]
   84604:	aa1303e3 	mov	x3, x19
   84608:	aa1c03e2 	mov	x2, x28
   8460c:	aa1503e1 	mov	x1, x21
   84610:	91000799 	add	x25, x28, #0x1
   84614:	d63f0280 	blr	x20
   84618:	b94083e0 	ldr	w0, [sp, #128]
   8461c:	35000e00 	cbnz	w0, 847dc <_vsnprintf+0x5bc>
   84620:	aa1903fc 	mov	x28, x25
   84624:	17ffff1a 	b	8428c <_vsnprintf+0x6c>
   84628:	37f81498 	tbnz	w24, #31, 848b8 <_vsnprintf+0x698>
   8462c:	91003ee1 	add	x1, x23, #0xf
   84630:	aa1703e0 	mov	x0, x23
   84634:	927df037 	and	x23, x1, #0xfffffffffffffff8
   84638:	f9400016 	ldr	x22, [x0]
   8463c:	2a1903e0 	mov	w0, w25
   84640:	7100033f 	cmp	w25, #0x0
   84644:	da9f1004 	csinv	x4, x0, xzr, ne	// ne = any
   84648:	39c002c0 	ldrsb	w0, [x22]
   8464c:	34002c80 	cbz	w0, 84bdc <_vsnprintf+0x9bc>
   84650:	8b0402c4 	add	x4, x22, x4
   84654:	aa1603e1 	mov	x1, x22
   84658:	14000003 	b	84664 <_vsnprintf+0x444>
   8465c:	eb01009f 	cmp	x4, x1
   84660:	54001160 	b.eq	8488c <_vsnprintf+0x66c>  // b.none
   84664:	38c01c23 	ldrsb	w3, [x1, #1]!
   84668:	35ffffa3 	cbnz	w3, 8465c <_vsnprintf+0x43c>
   8466c:	4b160021 	sub	w1, w1, w22
   84670:	b90093e1 	str	w1, [sp, #144]
   84674:	12160041 	and	w1, w2, #0x400
   84678:	b9007be1 	str	w1, [sp, #120]
   8467c:	365000a2 	tbz	w2, #10, 84690 <_vsnprintf+0x470>
   84680:	b94093e1 	ldr	w1, [sp, #144]
   84684:	6b19003f 	cmp	w1, w25
   84688:	1a999021 	csel	w1, w1, w25, ls	// ls = plast
   8468c:	b90093e1 	str	w1, [sp, #144]
   84690:	121f0041 	and	w1, w2, #0x2
   84694:	b9009fe1 	str	w1, [sp, #156]
   84698:	36081342 	tbz	w2, #1, 84900 <_vsnprintf+0x6e0>
   8469c:	34000c40 	cbz	w0, 84824 <_vsnprintf+0x604>
   846a0:	cb1c02c1 	sub	x1, x22, x28
   846a4:	f90043e1 	str	x1, [sp, #128]
   846a8:	b9407be1 	ldr	w1, [sp, #120]
   846ac:	aa1303e3 	mov	x3, x19
   846b0:	aa1c03e2 	mov	x2, x28
   846b4:	34000081 	cbz	w1, 846c4 <_vsnprintf+0x4a4>
   846b8:	51000721 	sub	w1, w25, #0x1
   846bc:	34001179 	cbz	w25, 848e8 <_vsnprintf+0x6c8>
   846c0:	2a0103f9 	mov	w25, w1
   846c4:	aa1503e1 	mov	x1, x21
   846c8:	91000796 	add	x22, x28, #0x1
   846cc:	d63f0280 	blr	x20
   846d0:	f94043e0 	ldr	x0, [sp, #128]
   846d4:	aa1603fc 	mov	x28, x22
   846d8:	38f66800 	ldrsb	w0, [x0, x22]
   846dc:	35fffe60 	cbnz	w0, 846a8 <_vsnprintf+0x488>
   846e0:	b9409fe0 	ldr	w0, [sp, #156]
   846e4:	350009e0 	cbnz	w0, 84820 <_vsnprintf+0x600>
   846e8:	aa1603fc 	mov	x28, x22
   846ec:	17fffee8 	b	8428c <_vsnprintf+0x6c>
   846f0:	7101bc1f 	cmp	w0, #0x6f
   846f4:	54000c80 	b.eq	84884 <_vsnprintf+0x664>  // b.none
   846f8:	540013ac 	b.gt	8496c <_vsnprintf+0x74c>
   846fc:	7101a41f 	cmp	w0, #0x69
   84700:	121b784b 	and	w11, w2, #0xffffffef
   84704:	540036a1 	b.ne	84dd8 <_vsnprintf+0xbb8>  // b.any
   84708:	f276005f 	tst	x2, #0x400
   8470c:	12800220 	mov	w0, #0xffffffee            	// #-18
   84710:	0a000040 	and	w0, w2, w0
   84714:	1a8b100b 	csel	w11, w0, w11, ne	// ne = any
   84718:	3748146b 	tbnz	w11, #9, 849a4 <_vsnprintf+0x784>
   8471c:	374020eb 	tbnz	w11, #8, 84b38 <_vsnprintf+0x918>
   84720:	37301a4b 	tbnz	w11, #6, 84a68 <_vsnprintf+0x848>
   84724:	3638250b 	tbz	w11, #7, 84bc4 <_vsnprintf+0x9a4>
   84728:	37f82c98 	tbnz	w24, #31, 84cb8 <_vsnprintf+0xa98>
   8472c:	aa1703e0 	mov	x0, x23
   84730:	91002ee1 	add	x1, x23, #0xb
   84734:	79c00005 	ldrsh	w5, [x0]
   84738:	927df037 	and	x23, x1, #0xfffffffffffffff8
   8473c:	140000d0 	b	84a7c <_vsnprintf+0x85c>
   84740:	aa0103fa 	mov	x26, x1
   84744:	17ffff22 	b	843cc <_vsnprintf+0x1ac>
   84748:	37f811f8 	tbnz	w24, #31, 84984 <_vsnprintf+0x764>
   8474c:	91002ee1 	add	x1, x23, #0xb
   84750:	aa1703e0 	mov	x0, x23
   84754:	927df037 	and	x23, x1, #0xfffffffffffffff8
   84758:	b9400007 	ldr	w7, [x0]
   8475c:	91000b5a 	add	x26, x26, #0x2
   84760:	39c00340 	ldrsb	w0, [x26]
   84764:	91000741 	add	x1, x26, #0x1
   84768:	710000ff 	cmp	w7, #0x0
   8476c:	1a9fa0f9 	csel	w25, w7, wzr, ge	// ge = tcont
   84770:	17ffff0a 	b	84398 <_vsnprintf+0x178>
   84774:	6b16037f 	cmp	w27, w22
   84778:	540029c9 	b.ls	84cb0 <_vsnprintf+0xa90>  // b.plast
   8477c:	91000785 	add	x5, x28, #0x1
   84780:	51000b76 	sub	w22, w27, #0x2
   84784:	8b1600b6 	add	x22, x5, x22
   84788:	aa1c03e2 	mov	x2, x28
   8478c:	aa1303e3 	mov	x3, x19
   84790:	f9003fe5 	str	x5, [sp, #120]
   84794:	aa1503e1 	mov	x1, x21
   84798:	52800400 	mov	w0, #0x20                  	// #32
   8479c:	aa0503fc 	mov	x28, x5
   847a0:	d63f0280 	blr	x20
   847a4:	f9403fe5 	ldr	x5, [sp, #120]
   847a8:	eb16039f 	cmp	x28, x22
   847ac:	910004a5 	add	x5, x5, #0x1
   847b0:	54fffec1 	b.ne	84788 <_vsnprintf+0x568>  // b.any
   847b4:	11000776 	add	w22, w27, #0x1
   847b8:	36fff1f8 	tbz	w24, #31, 845f4 <_vsnprintf+0x3d4>
   847bc:	11002301 	add	w1, w24, #0x8
   847c0:	7100003f 	cmp	w1, #0x0
   847c4:	540011ed 	b.le	84a00 <_vsnprintf+0x7e0>
   847c8:	91002ee2 	add	x2, x23, #0xb
   847cc:	aa1703e0 	mov	x0, x23
   847d0:	2a0103f8 	mov	w24, w1
   847d4:	927df057 	and	x23, x2, #0xfffffffffffffff8
   847d8:	17ffff8a 	b	84600 <_vsnprintf+0x3e0>
   847dc:	6b16037f 	cmp	w27, w22
   847e0:	54fff209 	b.ls	84620 <_vsnprintf+0x400>  // b.plast
   847e4:	5100076a 	sub	w10, w27, #0x1
   847e8:	91000b89 	add	x9, x28, #0x2
   847ec:	4b160156 	sub	w22, w10, w22
   847f0:	8b0902d6 	add	x22, x22, x9
   847f4:	d503201f 	nop
   847f8:	aa1903e2 	mov	x2, x25
   847fc:	aa1303e3 	mov	x3, x19
   84800:	aa1503e1 	mov	x1, x21
   84804:	52800400 	mov	w0, #0x20                  	// #32
   84808:	91000739 	add	x25, x25, #0x1
   8480c:	d63f0280 	blr	x20
   84810:	eb16033f 	cmp	x25, x22
   84814:	54ffff21 	b.ne	847f8 <_vsnprintf+0x5d8>  // b.any
   84818:	aa1903fc 	mov	x28, x25
   8481c:	17fffe9c 	b	8428c <_vsnprintf+0x6c>
   84820:	aa1603fc 	mov	x28, x22
   84824:	b94093e0 	ldr	w0, [sp, #144]
   84828:	6b00037f 	cmp	w27, w0
   8482c:	540009a9 	b.ls	84960 <_vsnprintf+0x740>  // b.plast
   84830:	51000764 	sub	w4, w27, #0x1
   84834:	91000785 	add	x5, x28, #0x1
   84838:	4b000084 	sub	w4, w4, w0
   8483c:	8b050096 	add	x22, x4, x5
   84840:	aa1c03e2 	mov	x2, x28
   84844:	aa1303e3 	mov	x3, x19
   84848:	f9003fe5 	str	x5, [sp, #120]
   8484c:	aa1503e1 	mov	x1, x21
   84850:	52800400 	mov	w0, #0x20                  	// #32
   84854:	aa0503fc 	mov	x28, x5
   84858:	d63f0280 	blr	x20
   8485c:	f9403fe5 	ldr	x5, [sp, #120]
   84860:	eb0502df 	cmp	x22, x5
   84864:	910004a5 	add	x5, x5, #0x1
   84868:	54fffec1 	b.ne	84840 <_vsnprintf+0x620>  // b.any
   8486c:	aa1603fc 	mov	x28, x22
   84870:	17fffe87 	b	8428c <_vsnprintf+0x6c>
   84874:	f94047e0 	ldr	x0, [sp, #136]
   84878:	8b38c000 	add	x0, x0, w24, sxtw
   8487c:	2a0303f8 	mov	w24, w3
   84880:	17ffff0b 	b	844ac <_vsnprintf+0x28c>
   84884:	d2800106 	mov	x6, #0x8                   	// #8
   84888:	17fffedd 	b	843fc <_vsnprintf+0x1dc>
   8488c:	4b160081 	sub	w1, w4, w22
   84890:	b90093e1 	str	w1, [sp, #144]
   84894:	17ffff78 	b	84674 <_vsnprintf+0x454>
   84898:	11002302 	add	w2, w24, #0x8
   8489c:	7100005f 	cmp	w2, #0x0
   848a0:	54000a8d 	b.le	849f0 <_vsnprintf+0x7d0>
   848a4:	91003ee3 	add	x3, x23, #0xf
   848a8:	aa1703e1 	mov	x1, x23
   848ac:	2a0203f8 	mov	w24, w2
   848b0:	927df077 	and	x23, x3, #0xfffffffffffffff8
   848b4:	17ffff1e 	b	8452c <_vsnprintf+0x30c>
   848b8:	11002301 	add	w1, w24, #0x8
   848bc:	7100003f 	cmp	w1, #0x0
   848c0:	54000a8d 	b.le	84a10 <_vsnprintf+0x7f0>
   848c4:	91003ee3 	add	x3, x23, #0xf
   848c8:	aa1703e0 	mov	x0, x23
   848cc:	2a0103f8 	mov	w24, w1
   848d0:	927df077 	and	x23, x3, #0xfffffffffffffff8
   848d4:	17ffff59 	b	84638 <_vsnprintf+0x418>
   848d8:	39c00b40 	ldrsb	w0, [x26, #2]
   848dc:	321a0442 	orr	w2, w2, #0xc0
   848e0:	91000b43 	add	x3, x26, #0x2
   848e4:	17fffeb7 	b	843c0 <_vsnprintf+0x1a0>
   848e8:	b9409fe0 	ldr	w0, [sp, #156]
   848ec:	aa1c03f6 	mov	x22, x28
   848f0:	34ffefc0 	cbz	w0, 846e8 <_vsnprintf+0x4c8>
   848f4:	17ffffcb 	b	84820 <_vsnprintf+0x600>
   848f8:	52800016 	mov	w22, #0x0                   	// #0
   848fc:	17ffff1d 	b	84570 <_vsnprintf+0x350>
   84900:	b94093e1 	ldr	w1, [sp, #144]
   84904:	6b01037f 	cmp	w27, w1
   84908:	54001ea9 	b.ls	84cdc <_vsnprintf+0xabc>  // b.plast
   8490c:	51000760 	sub	w0, w27, #0x1
   84910:	91000785 	add	x5, x28, #0x1
   84914:	4b010000 	sub	w0, w0, w1
   84918:	8b050000 	add	x0, x0, x5
   8491c:	f9004be0 	str	x0, [sp, #144]
   84920:	aa1c03e2 	mov	x2, x28
   84924:	52800400 	mov	w0, #0x20                  	// #32
   84928:	f90043e5 	str	x5, [sp, #128]
   8492c:	aa1303e3 	mov	x3, x19
   84930:	aa1503e1 	mov	x1, x21
   84934:	aa0503fc 	mov	x28, x5
   84938:	d63f0280 	blr	x20
   8493c:	f9404be0 	ldr	x0, [sp, #144]
   84940:	f94043e5 	ldr	x5, [sp, #128]
   84944:	eb1c001f 	cmp	x0, x28
   84948:	910004a5 	add	x5, x5, #0x1
   8494c:	54fffea1 	b.ne	84920 <_vsnprintf+0x700>  // b.any
   84950:	11000760 	add	w0, w27, #0x1
   84954:	b90093e0 	str	w0, [sp, #144]
   84958:	39c002c0 	ldrsb	w0, [x22]
   8495c:	35ffea20 	cbnz	w0, 846a0 <_vsnprintf+0x480>
   84960:	aa1c03f6 	mov	x22, x28
   84964:	aa1603fc 	mov	x28, x22
   84968:	17fffe49 	b	8428c <_vsnprintf+0x6c>
   8496c:	7101e01f 	cmp	w0, #0x78
   84970:	d2800206 	mov	x6, #0x10                  	// #16
   84974:	54ffd440 	b.eq	843fc <_vsnprintf+0x1dc>  // b.none
   84978:	121b7842 	and	w2, w2, #0xffffffef
   8497c:	d2800146 	mov	x6, #0xa                   	// #10
   84980:	17fffe9f 	b	843fc <_vsnprintf+0x1dc>
   84984:	11002301 	add	w1, w24, #0x8
   84988:	7100003f 	cmp	w1, #0x0
   8498c:	54000aed 	b.le	84ae8 <_vsnprintf+0x8c8>
   84990:	91002ee3 	add	x3, x23, #0xb
   84994:	aa1703e0 	mov	x0, x23
   84998:	2a0103f8 	mov	w24, w1
   8499c:	927df077 	and	x23, x3, #0xfffffffffffffff8
   849a0:	17ffff6e 	b	84758 <_vsnprintf+0x538>
   849a4:	37f80ab8 	tbnz	w24, #31, 84af8 <_vsnprintf+0x8d8>
   849a8:	91003ee1 	add	x1, x23, #0xf
   849ac:	aa1703e0 	mov	x0, x23
   849b0:	927df037 	and	x23, x1, #0xfffffffffffffff8
   849b4:	f9400004 	ldr	x4, [x0]
   849b8:	aa1c03e2 	mov	x2, x28
   849bc:	2a1903e7 	mov	w7, w25
   849c0:	d2800146 	mov	x6, #0xa                   	// #10
   849c4:	aa1303e3 	mov	x3, x19
   849c8:	b90003fb 	str	w27, [sp]
   849cc:	aa1503e1 	mov	x1, x21
   849d0:	aa1403e0 	mov	x0, x20
   849d4:	b9000beb 	str	w11, [sp, #8]
   849d8:	d37ffc85 	lsr	x5, x4, #63
   849dc:	f100009f 	cmp	x4, #0x0
   849e0:	da84a484 	cneg	x4, x4, lt	// lt = tstop
   849e4:	97fffc97 	bl	83c40 <_ntoa_long>
   849e8:	aa0003fc 	mov	x28, x0
   849ec:	17fffe28 	b	8428c <_vsnprintf+0x6c>
   849f0:	f94047e1 	ldr	x1, [sp, #136]
   849f4:	8b38c021 	add	x1, x1, w24, sxtw
   849f8:	2a0203f8 	mov	w24, w2
   849fc:	17fffecc 	b	8452c <_vsnprintf+0x30c>
   84a00:	f94047e0 	ldr	x0, [sp, #136]
   84a04:	8b38c000 	add	x0, x0, w24, sxtw
   84a08:	2a0103f8 	mov	w24, w1
   84a0c:	17fffefd 	b	84600 <_vsnprintf+0x3e0>
   84a10:	f94047e0 	ldr	x0, [sp, #136]
   84a14:	8b38c000 	add	x0, x0, w24, sxtw
   84a18:	2a0103f8 	mov	w24, w1
   84a1c:	17ffff07 	b	84638 <_vsnprintf+0x418>
   84a20:	d2800046 	mov	x6, #0x2                   	// #2
   84a24:	17fffe76 	b	843fc <_vsnprintf+0x1dc>
   84a28:	37f80798 	tbnz	w24, #31, 84b18 <_vsnprintf+0x8f8>
   84a2c:	91003ee2 	add	x2, x23, #0xf
   84a30:	aa1703e1 	mov	x1, x23
   84a34:	927df057 	and	x23, x2, #0xfffffffffffffff8
   84a38:	f9400024 	ldr	x4, [x1]
   84a3c:	aa1c03e2 	mov	x2, x28
   84a40:	2a1903e7 	mov	w7, w25
   84a44:	52800005 	mov	w5, #0x0                   	// #0
   84a48:	aa1303e3 	mov	x3, x19
   84a4c:	b90003fb 	str	w27, [sp]
   84a50:	aa1503e1 	mov	x1, x21
   84a54:	b9000be0 	str	w0, [sp, #8]
   84a58:	aa1403e0 	mov	x0, x20
   84a5c:	97fffc79 	bl	83c40 <_ntoa_long>
   84a60:	aa0003fc 	mov	x28, x0
   84a64:	17fffe0a 	b	8428c <_vsnprintf+0x6c>
   84a68:	37f80bf8 	tbnz	w24, #31, 84be4 <_vsnprintf+0x9c4>
   84a6c:	91002ee1 	add	x1, x23, #0xb
   84a70:	aa1703e0 	mov	x0, x23
   84a74:	927df037 	and	x23, x1, #0xfffffffffffffff8
   84a78:	39c00005 	ldrsb	w5, [x0]
   84a7c:	710000bf 	cmp	w5, #0x0
   84a80:	2a1903e7 	mov	w7, w25
   84a84:	5a85a4a4 	cneg	w4, w5, lt	// lt = tstop
   84a88:	aa1c03e2 	mov	x2, x28
   84a8c:	93407c84 	sxtw	x4, w4
   84a90:	b90003fb 	str	w27, [sp]
   84a94:	531f7ca5 	lsr	w5, w5, #31
   84a98:	d2800146 	mov	x6, #0xa                   	// #10
   84a9c:	b9000beb 	str	w11, [sp, #8]
   84aa0:	aa1303e3 	mov	x3, x19
   84aa4:	aa1503e1 	mov	x1, x21
   84aa8:	aa1403e0 	mov	x0, x20
   84aac:	97fffc65 	bl	83c40 <_ntoa_long>
   84ab0:	aa0003fc 	mov	x28, x0
   84ab4:	17fffdf6 	b	8428c <_vsnprintf+0x6c>
   84ab8:	37f80c38 	tbnz	w24, #31, 84c3c <_vsnprintf+0xa1c>
   84abc:	91002ee2 	add	x2, x23, #0xb
   84ac0:	aa1703e1 	mov	x1, x23
   84ac4:	927df057 	and	x23, x2, #0xfffffffffffffff8
   84ac8:	39400024 	ldrb	w4, [x1]
   84acc:	2a1903e7 	mov	w7, w25
   84ad0:	2a0403e4 	mov	w4, w4
   84ad4:	b90003fb 	str	w27, [sp]
   84ad8:	aa1c03e2 	mov	x2, x28
   84adc:	52800005 	mov	w5, #0x0                   	// #0
   84ae0:	b9000be0 	str	w0, [sp, #8]
   84ae4:	17ffffef 	b	84aa0 <_vsnprintf+0x880>
   84ae8:	f94047e0 	ldr	x0, [sp, #136]
   84aec:	8b38c000 	add	x0, x0, w24, sxtw
   84af0:	2a0103f8 	mov	w24, w1
   84af4:	17ffff19 	b	84758 <_vsnprintf+0x538>
   84af8:	11002301 	add	w1, w24, #0x8
   84afc:	7100003f 	cmp	w1, #0x0
   84b00:	54000bed 	b.le	84c7c <_vsnprintf+0xa5c>
   84b04:	91003ee2 	add	x2, x23, #0xf
   84b08:	aa1703e0 	mov	x0, x23
   84b0c:	2a0103f8 	mov	w24, w1
   84b10:	927df057 	and	x23, x2, #0xfffffffffffffff8
   84b14:	17ffffa8 	b	849b4 <_vsnprintf+0x794>
   84b18:	11002302 	add	w2, w24, #0x8
   84b1c:	7100005f 	cmp	w2, #0x0
   84b20:	54000fad 	b.le	84d14 <_vsnprintf+0xaf4>
   84b24:	91003ee3 	add	x3, x23, #0xf
   84b28:	aa1703e1 	mov	x1, x23
   84b2c:	2a0203f8 	mov	w24, w2
   84b30:	927df077 	and	x23, x3, #0xfffffffffffffff8
   84b34:	17ffffc1 	b	84a38 <_vsnprintf+0x818>
   84b38:	37f80678 	tbnz	w24, #31, 84c04 <_vsnprintf+0x9e4>
   84b3c:	91003ee1 	add	x1, x23, #0xf
   84b40:	aa1703e0 	mov	x0, x23
   84b44:	927df037 	and	x23, x1, #0xfffffffffffffff8
   84b48:	f9400004 	ldr	x4, [x0]
   84b4c:	aa1c03e2 	mov	x2, x28
   84b50:	2a1903e7 	mov	w7, w25
   84b54:	d2800146 	mov	x6, #0xa                   	// #10
   84b58:	aa1303e3 	mov	x3, x19
   84b5c:	b90003fb 	str	w27, [sp]
   84b60:	aa1503e1 	mov	x1, x21
   84b64:	aa1403e0 	mov	x0, x20
   84b68:	b9000beb 	str	w11, [sp, #8]
   84b6c:	d37ffc85 	lsr	x5, x4, #63
   84b70:	f100009f 	cmp	x4, #0x0
   84b74:	da84a484 	cneg	x4, x4, lt	// lt = tstop
   84b78:	97fffc32 	bl	83c40 <_ntoa_long>
   84b7c:	aa0003fc 	mov	x28, x0
   84b80:	17fffdc3 	b	8428c <_vsnprintf+0x6c>
   84b84:	37f806d8 	tbnz	w24, #31, 84c5c <_vsnprintf+0xa3c>
   84b88:	91003ee2 	add	x2, x23, #0xf
   84b8c:	aa1703e1 	mov	x1, x23
   84b90:	927df057 	and	x23, x2, #0xfffffffffffffff8
   84b94:	f9400024 	ldr	x4, [x1]
   84b98:	aa1c03e2 	mov	x2, x28
   84b9c:	2a1903e7 	mov	w7, w25
   84ba0:	52800005 	mov	w5, #0x0                   	// #0
   84ba4:	aa1303e3 	mov	x3, x19
   84ba8:	b90003fb 	str	w27, [sp]
   84bac:	aa1503e1 	mov	x1, x21
   84bb0:	b9000be0 	str	w0, [sp, #8]
   84bb4:	aa1403e0 	mov	x0, x20
   84bb8:	97fffc22 	bl	83c40 <_ntoa_long>
   84bbc:	aa0003fc 	mov	x28, x0
   84bc0:	17fffdb3 	b	8428c <_vsnprintf+0x6c>
   84bc4:	37f80658 	tbnz	w24, #31, 84c8c <_vsnprintf+0xa6c>
   84bc8:	aa1703e0 	mov	x0, x23
   84bcc:	91002ee1 	add	x1, x23, #0xb
   84bd0:	b9400005 	ldr	w5, [x0]
   84bd4:	927df037 	and	x23, x1, #0xfffffffffffffff8
   84bd8:	17ffffa9 	b	84a7c <_vsnprintf+0x85c>
   84bdc:	b90093ff 	str	wzr, [sp, #144]
   84be0:	17fffea5 	b	84674 <_vsnprintf+0x454>
   84be4:	11002301 	add	w1, w24, #0x8
   84be8:	7100003f 	cmp	w1, #0x0
   84bec:	540009cd 	b.le	84d24 <_vsnprintf+0xb04>
   84bf0:	91002ee2 	add	x2, x23, #0xb
   84bf4:	aa1703e0 	mov	x0, x23
   84bf8:	2a0103f8 	mov	w24, w1
   84bfc:	927df057 	and	x23, x2, #0xfffffffffffffff8
   84c00:	17ffff9e 	b	84a78 <_vsnprintf+0x858>
   84c04:	11002301 	add	w1, w24, #0x8
   84c08:	7100003f 	cmp	w1, #0x0
   84c0c:	54000a6d 	b.le	84d58 <_vsnprintf+0xb38>
   84c10:	91003ee2 	add	x2, x23, #0xf
   84c14:	aa1703e0 	mov	x0, x23
   84c18:	2a0103f8 	mov	w24, w1
   84c1c:	927df057 	and	x23, x2, #0xfffffffffffffff8
   84c20:	17ffffca 	b	84b48 <_vsnprintf+0x928>
   84c24:	37f80678 	tbnz	w24, #31, 84cf0 <_vsnprintf+0xad0>
   84c28:	aa1703e1 	mov	x1, x23
   84c2c:	91002ee2 	add	x2, x23, #0xb
   84c30:	b9400024 	ldr	w4, [x1]
   84c34:	927df057 	and	x23, x2, #0xfffffffffffffff8
   84c38:	17ffffa5 	b	84acc <_vsnprintf+0x8ac>
   84c3c:	11002302 	add	w2, w24, #0x8
   84c40:	7100005f 	cmp	w2, #0x0
   84c44:	5400092d 	b.le	84d68 <_vsnprintf+0xb48>
   84c48:	91002ee3 	add	x3, x23, #0xb
   84c4c:	aa1703e1 	mov	x1, x23
   84c50:	2a0203f8 	mov	w24, w2
   84c54:	927df077 	and	x23, x3, #0xfffffffffffffff8
   84c58:	17ffff9c 	b	84ac8 <_vsnprintf+0x8a8>
   84c5c:	11002302 	add	w2, w24, #0x8
   84c60:	7100005f 	cmp	w2, #0x0
   84c64:	540008ad 	b.le	84d78 <_vsnprintf+0xb58>
   84c68:	91003ee3 	add	x3, x23, #0xf
   84c6c:	aa1703e1 	mov	x1, x23
   84c70:	2a0203f8 	mov	w24, w2
   84c74:	927df077 	and	x23, x3, #0xfffffffffffffff8
   84c78:	17ffffc7 	b	84b94 <_vsnprintf+0x974>
   84c7c:	f94047e0 	ldr	x0, [sp, #136]
   84c80:	8b38c000 	add	x0, x0, w24, sxtw
   84c84:	2a0103f8 	mov	w24, w1
   84c88:	17ffff4b 	b	849b4 <_vsnprintf+0x794>
   84c8c:	11002301 	add	w1, w24, #0x8
   84c90:	7100003f 	cmp	w1, #0x0
   84c94:	5400098d 	b.le	84dc4 <_vsnprintf+0xba4>
   84c98:	aa1703e0 	mov	x0, x23
   84c9c:	91002ee2 	add	x2, x23, #0xb
   84ca0:	b9400005 	ldr	w5, [x0]
   84ca4:	2a0103f8 	mov	w24, w1
   84ca8:	927df057 	and	x23, x2, #0xfffffffffffffff8
   84cac:	17ffff74 	b	84a7c <_vsnprintf+0x85c>
   84cb0:	52800056 	mov	w22, #0x2                   	// #2
   84cb4:	17fffe4f 	b	845f0 <_vsnprintf+0x3d0>
   84cb8:	11002301 	add	w1, w24, #0x8
   84cbc:	7100003f 	cmp	w1, #0x0
   84cc0:	5400064d 	b.le	84d88 <_vsnprintf+0xb68>
   84cc4:	aa1703e0 	mov	x0, x23
   84cc8:	91002ee2 	add	x2, x23, #0xb
   84ccc:	79c00005 	ldrsh	w5, [x0]
   84cd0:	2a0103f8 	mov	w24, w1
   84cd4:	927df057 	and	x23, x2, #0xfffffffffffffff8
   84cd8:	17ffff69 	b	84a7c <_vsnprintf+0x85c>
   84cdc:	b94093e1 	ldr	w1, [sp, #144]
   84ce0:	11000421 	add	w1, w1, #0x1
   84ce4:	b90093e1 	str	w1, [sp, #144]
   84ce8:	35ffcdc0 	cbnz	w0, 846a0 <_vsnprintf+0x480>
   84cec:	17ffff1d 	b	84960 <_vsnprintf+0x740>
   84cf0:	11002302 	add	w2, w24, #0x8
   84cf4:	7100005f 	cmp	w2, #0x0
   84cf8:	540005cd 	b.le	84db0 <_vsnprintf+0xb90>
   84cfc:	aa1703e1 	mov	x1, x23
   84d00:	91002ee3 	add	x3, x23, #0xb
   84d04:	b9400024 	ldr	w4, [x1]
   84d08:	2a0203f8 	mov	w24, w2
   84d0c:	927df077 	and	x23, x3, #0xfffffffffffffff8
   84d10:	17ffff6f 	b	84acc <_vsnprintf+0x8ac>
   84d14:	f94047e1 	ldr	x1, [sp, #136]
   84d18:	8b38c021 	add	x1, x1, w24, sxtw
   84d1c:	2a0203f8 	mov	w24, w2
   84d20:	17ffff46 	b	84a38 <_vsnprintf+0x818>
   84d24:	f94047e0 	ldr	x0, [sp, #136]
   84d28:	8b38c000 	add	x0, x0, w24, sxtw
   84d2c:	2a0103f8 	mov	w24, w1
   84d30:	17ffff52 	b	84a78 <_vsnprintf+0x858>
   84d34:	11002302 	add	w2, w24, #0x8
   84d38:	7100005f 	cmp	w2, #0x0
   84d3c:	5400030d 	b.le	84d9c <_vsnprintf+0xb7c>
   84d40:	aa1703e1 	mov	x1, x23
   84d44:	91002ee3 	add	x3, x23, #0xb
   84d48:	79400024 	ldrh	w4, [x1]
   84d4c:	2a0203f8 	mov	w24, w2
   84d50:	927df077 	and	x23, x3, #0xfffffffffffffff8
   84d54:	17ffff5e 	b	84acc <_vsnprintf+0x8ac>
   84d58:	f94047e0 	ldr	x0, [sp, #136]
   84d5c:	8b38c000 	add	x0, x0, w24, sxtw
   84d60:	2a0103f8 	mov	w24, w1
   84d64:	17ffff79 	b	84b48 <_vsnprintf+0x928>
   84d68:	f94047e1 	ldr	x1, [sp, #136]
   84d6c:	8b38c021 	add	x1, x1, w24, sxtw
   84d70:	2a0203f8 	mov	w24, w2
   84d74:	17ffff55 	b	84ac8 <_vsnprintf+0x8a8>
   84d78:	f94047e1 	ldr	x1, [sp, #136]
   84d7c:	8b38c021 	add	x1, x1, w24, sxtw
   84d80:	2a0203f8 	mov	w24, w2
   84d84:	17ffff84 	b	84b94 <_vsnprintf+0x974>
   84d88:	f94047e0 	ldr	x0, [sp, #136]
   84d8c:	8b38c000 	add	x0, x0, w24, sxtw
   84d90:	2a0103f8 	mov	w24, w1
   84d94:	79c00005 	ldrsh	w5, [x0]
   84d98:	17ffff39 	b	84a7c <_vsnprintf+0x85c>
   84d9c:	f94047e1 	ldr	x1, [sp, #136]
   84da0:	8b38c021 	add	x1, x1, w24, sxtw
   84da4:	2a0203f8 	mov	w24, w2
   84da8:	79400024 	ldrh	w4, [x1]
   84dac:	17ffff48 	b	84acc <_vsnprintf+0x8ac>
   84db0:	f94047e1 	ldr	x1, [sp, #136]
   84db4:	8b38c021 	add	x1, x1, w24, sxtw
   84db8:	2a0203f8 	mov	w24, w2
   84dbc:	b9400024 	ldr	w4, [x1]
   84dc0:	17ffff43 	b	84acc <_vsnprintf+0x8ac>
   84dc4:	f94047e0 	ldr	x0, [sp, #136]
   84dc8:	8b38c000 	add	x0, x0, w24, sxtw
   84dcc:	2a0103f8 	mov	w24, w1
   84dd0:	b9400005 	ldr	w5, [x0]
   84dd4:	17ffff2a 	b	84a7c <_vsnprintf+0x85c>
   84dd8:	7101901f 	cmp	w0, #0x64
   84ddc:	54ffc960 	b.eq	84708 <_vsnprintf+0x4e8>  // b.none
   84de0:	2a0b03e2 	mov	w2, w11
   84de4:	d2800146 	mov	x6, #0xa                   	// #10
   84de8:	17fffd85 	b	843fc <_vsnprintf+0x1dc>
   84dec:	d503201f 	nop

0000000000084df0 <printf_>:
   84df0:	a9ae7bfd 	stp	x29, x30, [sp, #-288]!
   84df4:	128006ea 	mov	w10, #0xffffffc8            	// #-56
   84df8:	910383eb 	add	x11, sp, #0xe0
   84dfc:	910483e8 	add	x8, sp, #0x120
   84e00:	12800fe9 	mov	w9, #0xffffff80            	// #-128
   84e04:	910003fd 	mov	x29, sp
   84e08:	a90423e8 	stp	x8, x8, [sp, #64]
   84e0c:	aa0003e8 	mov	x8, x0
   84e10:	90000000 	adrp	x0, 84000 <_ntoa_long+0x3c0>
   84e14:	9107c000 	add	x0, x0, #0x1f0
   84e18:	f9002beb 	str	x11, [sp, #80]
   84e1c:	290b27ea 	stp	w10, w9, [sp, #88]
   84e20:	ad4247f0 	ldp	q16, q17, [sp, #64]
   84e24:	a90e8be1 	stp	x1, x2, [sp, #232]
   84e28:	9100e3e1 	add	x1, sp, #0x38
   84e2c:	92800002 	mov	x2, #0xffffffffffffffff    	// #-1
   84e30:	a90f93e3 	stp	x3, x4, [sp, #248]
   84e34:	910043e4 	add	x4, sp, #0x10
   84e38:	aa0803e3 	mov	x3, x8
   84e3c:	3d801be0 	str	q0, [sp, #96]
   84e40:	ad00c7f0 	stp	q16, q17, [sp, #16]
   84e44:	3d801fe1 	str	q1, [sp, #112]
   84e48:	3d8023e2 	str	q2, [sp, #128]
   84e4c:	3d8027e3 	str	q3, [sp, #144]
   84e50:	3d802be4 	str	q4, [sp, #160]
   84e54:	3d802fe5 	str	q5, [sp, #176]
   84e58:	3d8033e6 	str	q6, [sp, #192]
   84e5c:	3d8037e7 	str	q7, [sp, #208]
   84e60:	a9109be5 	stp	x5, x6, [sp, #264]
   84e64:	f9008fe7 	str	x7, [sp, #280]
   84e68:	97fffcee 	bl	84220 <_vsnprintf>
   84e6c:	a8d27bfd 	ldp	x29, x30, [sp], #288
   84e70:	d65f03c0 	ret
   84e74:	d503201f 	nop
   84e78:	d503201f 	nop
   84e7c:	d503201f 	nop

0000000000084e80 <sprintf_>:
   84e80:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   84e84:	910403eb 	add	x11, sp, #0x100
   84e88:	910403ea 	add	x10, sp, #0x100
   84e8c:	910003fd 	mov	x29, sp
   84e90:	910343e8 	add	x8, sp, #0xd0
   84e94:	128005e9 	mov	w9, #0xffffffd0            	// #-48
   84e98:	a9032fea 	stp	x10, x11, [sp, #48]
   84e9c:	12800fea 	mov	w10, #0xffffff80            	// #-128
   84ea0:	f90023e8 	str	x8, [sp, #64]
   84ea4:	aa0103e8 	mov	x8, x1
   84ea8:	aa0003e1 	mov	x1, x0
   84eac:	b9004be9 	str	w9, [sp, #72]
   84eb0:	f0ffffe9 	adrp	x9, 83000 <linenoiseEditFeed+0x50>
   84eb4:	b9004fea 	str	w10, [sp, #76]
   84eb8:	91304120 	add	x0, x9, #0xc10
   84ebc:	ad41c7f0 	ldp	q16, q17, [sp, #48]
   84ec0:	a90d0fe2 	stp	x2, x3, [sp, #208]
   84ec4:	92800002 	mov	x2, #0xffffffffffffffff    	// #-1
   84ec8:	aa0803e3 	mov	x3, x8
   84ecc:	a90e17e4 	stp	x4, x5, [sp, #224]
   84ed0:	910043e4 	add	x4, sp, #0x10
   84ed4:	3d8017e0 	str	q0, [sp, #80]
   84ed8:	ad00c7f0 	stp	q16, q17, [sp, #16]
   84edc:	3d801be1 	str	q1, [sp, #96]
   84ee0:	3d801fe2 	str	q2, [sp, #112]
   84ee4:	3d8023e3 	str	q3, [sp, #128]
   84ee8:	3d8027e4 	str	q4, [sp, #144]
   84eec:	3d802be5 	str	q5, [sp, #160]
   84ef0:	3d802fe6 	str	q6, [sp, #176]
   84ef4:	3d8033e7 	str	q7, [sp, #192]
   84ef8:	a90f1fe6 	stp	x6, x7, [sp, #240]
   84efc:	97fffcc9 	bl	84220 <_vsnprintf>
   84f00:	a8d07bfd 	ldp	x29, x30, [sp], #256
   84f04:	d65f03c0 	ret
   84f08:	d503201f 	nop
   84f0c:	d503201f 	nop

0000000000084f10 <snprintf_>:
   84f10:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   84f14:	12800feb 	mov	w11, #0xffffff80            	// #-128
   84f18:	910343e8 	add	x8, sp, #0xd0
   84f1c:	910403ea 	add	x10, sp, #0x100
   84f20:	128004e9 	mov	w9, #0xffffffd8            	// #-40
   84f24:	910003fd 	mov	x29, sp
   84f28:	a9032bea 	stp	x10, x10, [sp, #48]
   84f2c:	aa0103ea 	mov	x10, x1
   84f30:	aa0003e1 	mov	x1, x0
   84f34:	f90023e8 	str	x8, [sp, #64]
   84f38:	aa0203e8 	mov	x8, x2
   84f3c:	aa0a03e2 	mov	x2, x10
   84f40:	29092fe9 	stp	w9, w11, [sp, #72]
   84f44:	f0ffffe9 	adrp	x9, 83000 <linenoiseEditFeed+0x50>
   84f48:	ad41c7f0 	ldp	q16, q17, [sp, #48]
   84f4c:	91304120 	add	x0, x9, #0xc10
   84f50:	a90d93e3 	stp	x3, x4, [sp, #216]
   84f54:	910043e4 	add	x4, sp, #0x10
   84f58:	aa0803e3 	mov	x3, x8
   84f5c:	3d8017e0 	str	q0, [sp, #80]
   84f60:	3d801be1 	str	q1, [sp, #96]
   84f64:	ad00c7f0 	stp	q16, q17, [sp, #16]
   84f68:	3d801fe2 	str	q2, [sp, #112]
   84f6c:	3d8023e3 	str	q3, [sp, #128]
   84f70:	3d8027e4 	str	q4, [sp, #144]
   84f74:	3d802be5 	str	q5, [sp, #160]
   84f78:	3d802fe6 	str	q6, [sp, #176]
   84f7c:	3d8033e7 	str	q7, [sp, #192]
   84f80:	a90e9be5 	stp	x5, x6, [sp, #232]
   84f84:	f9007fe7 	str	x7, [sp, #248]
   84f88:	97fffca6 	bl	84220 <_vsnprintf>
   84f8c:	a8d07bfd 	ldp	x29, x30, [sp], #256
   84f90:	d65f03c0 	ret
   84f94:	d503201f 	nop
   84f98:	d503201f 	nop
   84f9c:	d503201f 	nop

0000000000084fa0 <vprintf_>:
   84fa0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   84fa4:	910003fd 	mov	x29, sp
   84fa8:	90000002 	adrp	x2, 84000 <_ntoa_long+0x3c0>
   84fac:	aa0003e3 	mov	x3, x0
   84fb0:	910043e4 	add	x4, sp, #0x10
   84fb4:	9107c040 	add	x0, x2, #0x1f0
   84fb8:	ad400420 	ldp	q0, q1, [x1]
   84fbc:	92800002 	mov	x2, #0xffffffffffffffff    	// #-1
   84fc0:	9100e3e1 	add	x1, sp, #0x38
   84fc4:	ad0087e0 	stp	q0, q1, [sp, #16]
   84fc8:	97fffc96 	bl	84220 <_vsnprintf>
   84fcc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   84fd0:	d65f03c0 	ret
   84fd4:	d503201f 	nop
   84fd8:	d503201f 	nop
   84fdc:	d503201f 	nop

0000000000084fe0 <vsnprintf_>:
   84fe0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   84fe4:	910003fd 	mov	x29, sp
   84fe8:	aa0103e4 	mov	x4, x1
   84fec:	f0ffffe5 	adrp	x5, 83000 <linenoiseEditFeed+0x50>
   84ff0:	aa0003e1 	mov	x1, x0
   84ff4:	913040a0 	add	x0, x5, #0xc10
   84ff8:	ad400460 	ldp	q0, q1, [x3]
   84ffc:	aa0203e3 	mov	x3, x2
   85000:	aa0403e2 	mov	x2, x4
   85004:	910043e4 	add	x4, sp, #0x10
   85008:	ad0087e0 	stp	q0, q1, [sp, #16]
   8500c:	97fffc85 	bl	84220 <_vsnprintf>
   85010:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85014:	d65f03c0 	ret
   85018:	d503201f 	nop
   8501c:	d503201f 	nop

0000000000085020 <fctprintf>:
   85020:	a9af7bfd 	stp	x29, x30, [sp, #-272]!
   85024:	128004ec 	mov	w12, #0xffffffd8            	// #-40
   85028:	910383e8 	add	x8, sp, #0xe0
   8502c:	910443e9 	add	x9, sp, #0x110
   85030:	12800feb 	mov	w11, #0xffffff80            	// #-128
   85034:	910003fd 	mov	x29, sp
   85038:	aa0203ea 	mov	x10, x2
   8503c:	a90427e9 	stp	x9, x9, [sp, #64]
   85040:	aa0003e9 	mov	x9, x0
   85044:	92800002 	mov	x2, #0xffffffffffffffff    	// #-1
   85048:	f0ffffe0 	adrp	x0, 84000 <_ntoa_long+0x3c0>
   8504c:	91080000 	add	x0, x0, #0x200
   85050:	f9002be8 	str	x8, [sp, #80]
   85054:	aa0103e8 	mov	x8, x1
   85058:	9100c3e1 	add	x1, sp, #0x30
   8505c:	290b2fec 	stp	w12, w11, [sp, #88]
   85060:	ad4247f0 	ldp	q16, q17, [sp, #64]
   85064:	a90e93e3 	stp	x3, x4, [sp, #232]
   85068:	910043e4 	add	x4, sp, #0x10
   8506c:	aa0a03e3 	mov	x3, x10
   85070:	a90323e9 	stp	x9, x8, [sp, #48]
   85074:	3d801be0 	str	q0, [sp, #96]
   85078:	ad00c7f0 	stp	q16, q17, [sp, #16]
   8507c:	3d801fe1 	str	q1, [sp, #112]
   85080:	3d8023e2 	str	q2, [sp, #128]
   85084:	3d8027e3 	str	q3, [sp, #144]
   85088:	3d802be4 	str	q4, [sp, #160]
   8508c:	3d802fe5 	str	q5, [sp, #176]
   85090:	3d8033e6 	str	q6, [sp, #192]
   85094:	3d8037e7 	str	q7, [sp, #208]
   85098:	a90f9be5 	stp	x5, x6, [sp, #248]
   8509c:	f90087e7 	str	x7, [sp, #264]
   850a0:	97fffc60 	bl	84220 <_vsnprintf>
   850a4:	a8d17bfd 	ldp	x29, x30, [sp], #272
   850a8:	d65f03c0 	ret
   850ac:	00000000 	udf	#0

00000000000850b0 <timer_init>:
   850b0:	d65f03c0 	ret
   850b4:	d503201f 	nop
   850b8:	d503201f 	nop
   850bc:	d503201f 	nop

00000000000850c0 <timer_get_ticks>:
   850c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   850c4:	910003fd 	mov	x29, sp
   850c8:	94001e4a 	bl	8c9f0 <CTimer::Get()>
   850cc:	94001b41 	bl	8bdd0 <CTimer::GetClockTicks()>
   850d0:	2a0003e0 	mov	w0, w0
   850d4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   850d8:	d65f03c0 	ret
   850dc:	d503201f 	nop

00000000000850e0 <timer_sleep_ticks>:
   850e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   850e4:	910003fd 	mov	x29, sp
   850e8:	f9000bf3 	str	x19, [sp, #16]
   850ec:	aa0003f3 	mov	x19, x0
   850f0:	94001e40 	bl	8c9f0 <CTimer::Get()>
   850f4:	2a1303e0 	mov	w0, w19
   850f8:	f9400bf3 	ldr	x19, [sp, #16]
   850fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85100:	14001df8 	b	8c8e0 <CTimer::SimpleusDelay(unsigned int)>
   85104:	d503201f 	nop
   85108:	d503201f 	nop
   8510c:	d503201f 	nop

0000000000085110 <timer_sleep_ms>:
   85110:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85114:	910003fd 	mov	x29, sp
   85118:	f9000bf3 	str	x19, [sp, #16]
   8511c:	aa0003f3 	mov	x19, x0
   85120:	94001e34 	bl	8c9f0 <CTimer::Get()>
   85124:	d37bea61 	lsl	x1, x19, #5
   85128:	cb130021 	sub	x1, x1, x19
   8512c:	8b010a60 	add	x0, x19, x1, lsl #2
   85130:	f9400bf3 	ldr	x19, [sp, #16]
   85134:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85138:	531d7000 	lsl	w0, w0, #3
   8513c:	14001de9 	b	8c8e0 <CTimer::SimpleusDelay(unsigned int)>

0000000000085140 <timer_get_millis>:
   85140:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85144:	910003fd 	mov	x29, sp
   85148:	94001e2a 	bl	8c9f0 <CTimer::Get()>
   8514c:	94001b21 	bl	8bdd0 <CTimer::GetClockTicks()>
   85150:	d29ef9e1 	mov	x1, #0xf7cf                	// #63439
   85154:	f2bc6a61 	movk	x1, #0xe353, lsl #16
   85158:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8515c:	f2d374a1 	movk	x1, #0x9ba5, lsl #32
   85160:	f2e41881 	movk	x1, #0x20c4, lsl #48
   85164:	53037c00 	lsr	w0, w0, #3
   85168:	9bc17c00 	umulh	x0, x0, x1
   8516c:	d344fc00 	lsr	x0, x0, #4
   85170:	d65f03c0 	ret
	...

0000000000085180 <CCPUThrottle::IsDynamic() const>:
   85180:	39400000 	ldrb	w0, [x0]
   85184:	d65f03c0 	ret
   85188:	d503201f 	nop
   8518c:	d503201f 	nop

0000000000085190 <CCPUThrottle::GetClockRate() const>:
   85190:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85194:	52800001 	mov	w1, #0x0                   	// #0
   85198:	910003fd 	mov	x29, sp
   8519c:	910083e0 	add	x0, sp, #0x20
   851a0:	f9000bf3 	str	x19, [sp, #16]
   851a4:	940029a3 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   851a8:	52800063 	mov	w3, #0x3                   	// #3
   851ac:	9100a3e2 	add	x2, sp, #0x28
   851b0:	52800084 	mov	w4, #0x4                   	// #4
   851b4:	910083e0 	add	x0, sp, #0x20
   851b8:	52800041 	mov	w1, #0x2                   	// #2
   851bc:	72a00061 	movk	w1, #0x3, lsl #16
   851c0:	b90037e3 	str	w3, [sp, #52]
   851c4:	52800283 	mov	w3, #0x14                  	// #20
   851c8:	940029ea 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   851cc:	2a0003e1 	mov	w1, w0
   851d0:	910083e0 	add	x0, sp, #0x20
   851d4:	b9403bf3 	ldr	w19, [sp, #56]
   851d8:	f240003f 	tst	x1, #0x1
   851dc:	1a9f1273 	csel	w19, w19, wzr, ne	// ne = any
   851e0:	94002998 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   851e4:	2a1303e0 	mov	w0, w19
   851e8:	f9400bf3 	ldr	x19, [sp, #16]
   851ec:	a8c47bfd 	ldp	x29, x30, [sp], #64
   851f0:	d65f03c0 	ret
   851f4:	d503201f 	nop
   851f8:	d503201f 	nop
   851fc:	d503201f 	nop

0000000000085200 <CCPUThrottle::GetMinClockRate() const>:
   85200:	b9400400 	ldr	w0, [x0, #4]
   85204:	d65f03c0 	ret
   85208:	d503201f 	nop
   8520c:	d503201f 	nop

0000000000085210 <CCPUThrottle::GetMaxClockRate() const>:
   85210:	b9400800 	ldr	w0, [x0, #8]
   85214:	d65f03c0 	ret
   85218:	d503201f 	nop
   8521c:	d503201f 	nop

0000000000085220 <CCPUThrottle::GetTemperature() const>:
   85220:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85224:	52800001 	mov	w1, #0x0                   	// #0
   85228:	910003fd 	mov	x29, sp
   8522c:	910083e0 	add	x0, sp, #0x20
   85230:	f9000bf3 	str	x19, [sp, #16]
   85234:	52800013 	mov	w19, #0x0                   	// #0
   85238:	9400297e 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   8523c:	9100a3e2 	add	x2, sp, #0x28
   85240:	910083e0 	add	x0, sp, #0x20
   85244:	b90037ff 	str	wzr, [sp, #52]
   85248:	528000c1 	mov	w1, #0x6                   	// #6
   8524c:	72a00061 	movk	w1, #0x3, lsl #16
   85250:	52800084 	mov	w4, #0x4                   	// #4
   85254:	52800283 	mov	w3, #0x14                  	// #20
   85258:	940029c6 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   8525c:	360000e0 	tbz	w0, #0, 85278 <CCPUThrottle::GetTemperature() const+0x58>
   85260:	b9403bf3 	ldr	w19, [sp, #56]
   85264:	5289ba60 	mov	w0, #0x4dd3                	// #19923
   85268:	72a20c40 	movk	w0, #0x1062, lsl #16
   8526c:	1107d273 	add	w19, w19, #0x1f4
   85270:	9ba07e73 	umull	x19, w19, w0
   85274:	d366fe73 	lsr	x19, x19, #38
   85278:	910083e0 	add	x0, sp, #0x20
   8527c:	94002971 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85280:	2a1303e0 	mov	w0, w19
   85284:	f9400bf3 	ldr	x19, [sp, #16]
   85288:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8528c:	d65f03c0 	ret

0000000000085290 <CCPUThrottle::GetMaxTemperature() const>:
   85290:	b9400c00 	ldr	w0, [x0, #12]
   85294:	5289ba61 	mov	w1, #0x4dd3                	// #19923
   85298:	72a20c41 	movk	w1, #0x1062, lsl #16
   8529c:	1107d000 	add	w0, w0, #0x1f4
   852a0:	9ba17c00 	umull	x0, w0, w1
   852a4:	d366fc00 	lsr	x0, x0, #38
   852a8:	d65f03c0 	ret
   852ac:	d503201f 	nop

00000000000852b0 <CCPUThrottle::RegisterSystemThrottledHandler(unsigned int, void (*)(TSystemThrottledState, void*), void*)>:
   852b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   852b4:	910003fd 	mov	x29, sp
   852b8:	34000121 	cbz	w1, 852dc <CCPUThrottle::RegisterSystemThrottledHandler(unsigned int, void (*)(TSystemThrottledState, void*), void*)+0x2c>
   852bc:	f9401404 	ldr	x4, [x0, #40]
   852c0:	b9002001 	str	w1, [x0, #32]
   852c4:	b5000184 	cbnz	x4, 852f4 <CCPUThrottle::RegisterSystemThrottledHandler(unsigned int, void (*)(TSystemThrottledState, void*), void*)+0x44>
   852c8:	f9001402 	str	x2, [x0, #40]
   852cc:	b4000202 	cbz	x2, 8530c <CCPUThrottle::RegisterSystemThrottledHandler(unsigned int, void (*)(TSystemThrottledState, void*), void*)+0x5c>
   852d0:	f9001803 	str	x3, [x0, #48]
   852d4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   852d8:	d65f03c0 	ret
   852dc:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   852e0:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   852e4:	91006021 	add	x1, x1, #0x18
   852e8:	9100a000 	add	x0, x0, #0x28
   852ec:	528020c2 	mov	w2, #0x106                 	// #262
   852f0:	9400292c 	bl	8f7a0 <assertion_failed>
   852f4:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   852f8:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   852fc:	91006021 	add	x1, x1, #0x18
   85300:	9100e000 	add	x0, x0, #0x38
   85304:	52802122 	mov	w2, #0x109                 	// #265
   85308:	94002926 	bl	8f7a0 <assertion_failed>
   8530c:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   85310:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   85314:	91006021 	add	x1, x1, #0x18
   85318:	91016000 	add	x0, x0, #0x58
   8531c:	52802162 	mov	w2, #0x10b                 	// #267
   85320:	94002920 	bl	8f7a0 <assertion_failed>
   85324:	d503201f 	nop
   85328:	d503201f 	nop
   8532c:	d503201f 	nop

0000000000085330 <CCPUThrottle::DumpStatus(bool)>:
   85330:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   85334:	910003fd 	mov	x29, sp
   85338:	a90153f3 	stp	x19, x20, [sp, #16]
   8533c:	aa0003f4 	mov	x20, x0
   85340:	a9025bf5 	stp	x21, x22, [sp, #32]
   85344:	12001c35 	and	w21, w1, #0xff
   85348:	94000a5a 	bl	87cb0 <CLogger::Get()>
   8534c:	b4000da0 	cbz	x0, 85500 <CCPUThrottle::DumpStatus(bool)+0x1d0>
   85350:	aa0003f3 	mov	x19, x0
   85354:	370007d5 	tbnz	w21, #0, 8544c <CCPUThrottle::DumpStatus(bool)+0x11c>
   85358:	b0000075 	adrp	x21, 92000 <uart_putHexByte::hexDigits>
   8535c:	9107a2b5 	add	x21, x21, #0x1e8
   85360:	52800001 	mov	w1, #0x0                   	// #0
   85364:	9100c3e0 	add	x0, sp, #0x30
   85368:	94002932 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   8536c:	52800063 	mov	w3, #0x3                   	// #3
   85370:	52800041 	mov	w1, #0x2                   	// #2
   85374:	72a00061 	movk	w1, #0x3, lsl #16
   85378:	9100e3e2 	add	x2, sp, #0x38
   8537c:	9100c3e0 	add	x0, sp, #0x30
   85380:	52800084 	mov	w4, #0x4                   	// #4
   85384:	b90047e3 	str	w3, [sp, #68]
   85388:	52800283 	mov	w3, #0x14                  	// #20
   8538c:	52800014 	mov	w20, #0x0                   	// #0
   85390:	94002978 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   85394:	360000c0 	tbz	w0, #0, 853ac <CCPUThrottle::DumpStatus(bool)+0x7c>
   85398:	b9404bf4 	ldr	w20, [sp, #72]
   8539c:	529bd060 	mov	w0, #0xde83                	// #56963
   853a0:	72a86360 	movk	w0, #0x431b, lsl #16
   853a4:	9ba07e94 	umull	x20, w20, w0
   853a8:	d372fe94 	lsr	x20, x20, #50
   853ac:	9100c3e0 	add	x0, sp, #0x30
   853b0:	94002924 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   853b4:	b0000063 	adrp	x3, 92000 <uart_putHexByte::hexDigits>
   853b8:	2a1403e4 	mov	w4, w20
   853bc:	91042063 	add	x3, x3, #0x108
   853c0:	52800082 	mov	w2, #0x4                   	// #4
   853c4:	aa1503e1 	mov	x1, x21
   853c8:	aa1303e0 	mov	x0, x19
   853cc:	94000c1d 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   853d0:	9100c3e0 	add	x0, sp, #0x30
   853d4:	52800001 	mov	w1, #0x0                   	// #0
   853d8:	94002916 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   853dc:	528000c1 	mov	w1, #0x6                   	// #6
   853e0:	72a00061 	movk	w1, #0x3, lsl #16
   853e4:	b90047ff 	str	wzr, [sp, #68]
   853e8:	9100e3e2 	add	x2, sp, #0x38
   853ec:	9100c3e0 	add	x0, sp, #0x30
   853f0:	52800084 	mov	w4, #0x4                   	// #4
   853f4:	52800283 	mov	w3, #0x14                  	// #20
   853f8:	52800014 	mov	w20, #0x0                   	// #0
   853fc:	9400295d 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   85400:	360000e0 	tbz	w0, #0, 8541c <CCPUThrottle::DumpStatus(bool)+0xec>
   85404:	b9404bf4 	ldr	w20, [sp, #72]
   85408:	5289ba60 	mov	w0, #0x4dd3                	// #19923
   8540c:	72a20c40 	movk	w0, #0x1062, lsl #16
   85410:	1107d294 	add	w20, w20, #0x1f4
   85414:	9ba07e94 	umull	x20, w20, w0
   85418:	d366fe94 	lsr	x20, x20, #38
   8541c:	9100c3e0 	add	x0, sp, #0x30
   85420:	94002908 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85424:	b0000063 	adrp	x3, 92000 <uart_putHexByte::hexDigits>
   85428:	2a1403e4 	mov	w4, w20
   8542c:	aa1503e1 	mov	x1, x21
   85430:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85434:	aa1303e0 	mov	x0, x19
   85438:	9104a063 	add	x3, x3, #0x128
   8543c:	52800082 	mov	w2, #0x4                   	// #4
   85440:	a94153f3 	ldp	x19, x20, [sp, #16]
   85444:	a8c57bfd 	ldp	x29, x30, [sp], #80
   85448:	14000bfe 	b	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8544c:	39400281 	ldrb	w1, [x20]
   85450:	36000481 	tbz	w1, #0, 854e0 <CCPUThrottle::DumpStatus(bool)+0x1b0>
   85454:	29409684 	ldp	w4, w5, [x20, #4]
   85458:	529bd066 	mov	w6, #0xde83                	// #56963
   8545c:	72a86366 	movk	w6, #0x431b, lsl #16
   85460:	b0000075 	adrp	x21, 92000 <uart_putHexByte::hexDigits>
   85464:	9107a2b5 	add	x21, x21, #0x1e8
   85468:	b0000063 	adrp	x3, 92000 <uart_putHexByte::hexDigits>
   8546c:	aa1503e1 	mov	x1, x21
   85470:	91022063 	add	x3, x3, #0x88
   85474:	52800082 	mov	w2, #0x4                   	// #4
   85478:	5289ba76 	mov	w22, #0x4dd3                	// #19923
   8547c:	72a20c56 	movk	w22, #0x1062, lsl #16
   85480:	9ba67c84 	umull	x4, w4, w6
   85484:	9ba67ca5 	umull	x5, w5, w6
   85488:	d372fc84 	lsr	x4, x4, #50
   8548c:	d372fca5 	lsr	x5, x5, #50
   85490:	94000bec 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   85494:	b9400e84 	ldr	w4, [x20, #12]
   85498:	b0000063 	adrp	x3, 92000 <uart_putHexByte::hexDigits>
   8549c:	aa1503e1 	mov	x1, x21
   854a0:	aa1303e0 	mov	x0, x19
   854a4:	9102a063 	add	x3, x3, #0xa8
   854a8:	52800082 	mov	w2, #0x4                   	// #4
   854ac:	9bb67c84 	umull	x4, w4, w22
   854b0:	d366fc84 	lsr	x4, x4, #38
   854b4:	94000be3 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   854b8:	b9401284 	ldr	w4, [x20, #16]
   854bc:	b0000063 	adrp	x3, 92000 <uart_putHexByte::hexDigits>
   854c0:	aa1503e1 	mov	x1, x21
   854c4:	aa1303e0 	mov	x0, x19
   854c8:	91032063 	add	x3, x3, #0xc8
   854cc:	52800082 	mov	w2, #0x4                   	// #4
   854d0:	9bb67c84 	umull	x4, w4, w22
   854d4:	d366fc84 	lsr	x4, x4, #38
   854d8:	94000bda 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   854dc:	17ffffa1 	b	85360 <CCPUThrottle::DumpStatus(bool)+0x30>
   854e0:	b0000075 	adrp	x21, 92000 <uart_putHexByte::hexDigits>
   854e4:	9107a2b5 	add	x21, x21, #0x1e8
   854e8:	b0000063 	adrp	x3, 92000 <uart_putHexByte::hexDigits>
   854ec:	aa1503e1 	mov	x1, x21
   854f0:	9103a063 	add	x3, x3, #0xe8
   854f4:	52800082 	mov	w2, #0x4                   	// #4
   854f8:	94000bd2 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   854fc:	17ffff99 	b	85360 <CCPUThrottle::DumpStatus(bool)+0x30>
   85500:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   85504:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   85508:	91006021 	add	x1, x1, #0x18
   8550c:	9101e000 	add	x0, x0, #0x78
   85510:	52802262 	mov	w2, #0x113                 	// #275
   85514:	940028a3 	bl	8f7a0 <assertion_failed>
   85518:	d503201f 	nop
   8551c:	d503201f 	nop

0000000000085520 <CCPUThrottle::Get()>:
   85520:	b0000160 	adrp	x0, b2000 <appendBuf+0xa0>
   85524:	f941b800 	ldr	x0, [x0, #880]
   85528:	b4000040 	cbz	x0, 85530 <CCPUThrottle::Get()+0x10>
   8552c:	d65f03c0 	ret
   85530:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   85534:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   85538:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8553c:	91006021 	add	x1, x1, #0x18
   85540:	910003fd 	mov	x29, sp
   85544:	91052000 	add	x0, x0, #0x148
   85548:	52802602 	mov	w2, #0x130                 	// #304
   8554c:	94002895 	bl	8f7a0 <assertion_failed>

0000000000085550 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)>:
   85550:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   85554:	910003fd 	mov	x29, sp
   85558:	a90153f3 	stp	x19, x20, [sp, #16]
   8555c:	aa0003f3 	mov	x19, x0
   85560:	39400000 	ldrb	w0, [x0]
   85564:	f90013f5 	str	x21, [sp, #32]
   85568:	36000660 	tbz	w0, #0, 85634 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)+0xe4>
   8556c:	2a0103f4 	mov	w20, w1
   85570:	12001c55 	and	w21, w2, #0xff
   85574:	94001a17 	bl	8bdd0 <CTimer::GetClockTicks()>
   85578:	b9401a61 	ldr	w1, [x19, #24]
   8557c:	4b010002 	sub	w2, w0, w1
   85580:	7105885f 	cmp	w2, #0x162
   85584:	54000429 	b.ls	85608 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)+0xb8>  // b.plast
   85588:	94001a12 	bl	8bdd0 <CTimer::GetClockTicks()>
   8558c:	b9001a60 	str	w0, [x19, #24]
   85590:	34000394 	cbz	w20, 85600 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)+0xb0>
   85594:	7100069f 	cmp	w20, #0x1
   85598:	540005a1 	b.ne	8564c <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)+0xfc>  // b.any
   8559c:	b9400a73 	ldr	w19, [x19, #8]
   855a0:	52800001 	mov	w1, #0x0                   	// #0
   855a4:	9100c3e0 	add	x0, sp, #0x30
   855a8:	940028a2 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   855ac:	52800063 	mov	w3, #0x3                   	// #3
   855b0:	9100e3e2 	add	x2, sp, #0x38
   855b4:	b9004fff 	str	wzr, [sp, #76]
   855b8:	9100c3e0 	add	x0, sp, #0x30
   855bc:	52900041 	mov	w1, #0x8002                	// #32770
   855c0:	72a00061 	movk	w1, #0x3, lsl #16
   855c4:	52800184 	mov	w4, #0xc                   	// #12
   855c8:	2908cfe3 	stp	w3, w19, [sp, #68]
   855cc:	52800303 	mov	w3, #0x18                  	// #24
   855d0:	940028e8 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   855d4:	12001c14 	and	w20, w0, #0xff
   855d8:	9100c3e0 	add	x0, sp, #0x30
   855dc:	2a1403f3 	mov	w19, w20
   855e0:	94002898 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   855e4:	36000054 	tbz	w20, #0, 855ec <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)+0x9c>
   855e8:	37000195 	tbnz	w21, #0, 85618 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)+0xc8>
   855ec:	f94013f5 	ldr	x21, [sp, #32]
   855f0:	2a1303e0 	mov	w0, w19
   855f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   855f8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   855fc:	d65f03c0 	ret
   85600:	b9400673 	ldr	w19, [x19, #4]
   85604:	17ffffe7 	b	855a0 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)+0x50>
   85608:	11058c21 	add	w1, w1, #0x163
   8560c:	4b000020 	sub	w0, w1, w0
   85610:	94001cb4 	bl	8c8e0 <CTimer::SimpleusDelay(unsigned int)>
   85614:	17ffffdd 	b	85588 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)+0x38>
   85618:	52802c60 	mov	w0, #0x163                 	// #355
   8561c:	94001cb1 	bl	8c8e0 <CTimer::SimpleusDelay(unsigned int)>
   85620:	f94013f5 	ldr	x21, [sp, #32]
   85624:	2a1303e0 	mov	w0, w19
   85628:	a94153f3 	ldp	x19, x20, [sp, #16]
   8562c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   85630:	d65f03c0 	ret
   85634:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   85638:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8563c:	91006021 	add	x1, x1, #0x18
   85640:	91056000 	add	x0, x0, #0x158
   85644:	528026c2 	mov	w2, #0x136                 	// #310
   85648:	94002856 	bl	8f7a0 <assertion_failed>
   8564c:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   85650:	d0000060 	adrp	x0, 93000 <vtable for CString+0x38>
   85654:	91006021 	add	x1, x1, #0x18
   85658:	9115a000 	add	x0, x0, #0x568
   8565c:	52802942 	mov	w2, #0x14a                 	// #330
   85660:	94002850 	bl	8f7a0 <assertion_failed>
   85664:	d503201f 	nop
   85668:	d503201f 	nop
   8566c:	d503201f 	nop

0000000000085670 <CCPUThrottle::SetSpeed(TCPUSpeed, bool)>:
   85670:	39400003 	ldrb	w3, [x0]
   85674:	37000063 	tbnz	w3, #0, 85680 <CCPUThrottle::SetSpeed(TCPUSpeed, bool)+0x10>
   85678:	52800020 	mov	w0, #0x1                   	// #1
   8567c:	d65f03c0 	ret
   85680:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85684:	12001c42 	and	w2, w2, #0xff
   85688:	910003fd 	mov	x29, sp
   8568c:	a90153f3 	stp	x19, x20, [sp, #16]
   85690:	2a0103f4 	mov	w20, w1
   85694:	aa0003f3 	mov	x19, x0
   85698:	97ffffae 	bl	85550 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)>
   8569c:	2a0003e1 	mov	w1, w0
   856a0:	52800040 	mov	w0, #0x2                   	// #2
   856a4:	36000061 	tbz	w1, #0, 856b0 <CCPUThrottle::SetSpeed(TCPUSpeed, bool)+0x40>
   856a8:	b9401660 	ldr	w0, [x19, #20]
   856ac:	b9001674 	str	w20, [x19, #20]
   856b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   856b4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   856b8:	d65f03c0 	ret
   856bc:	d503201f 	nop

00000000000856c0 <CCPUThrottle::SetOnTemperature()>:
   856c0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   856c4:	910003fd 	mov	x29, sp
   856c8:	a90153f3 	stp	x19, x20, [sp, #16]
   856cc:	aa0003f3 	mov	x19, x0
   856d0:	3940e000 	ldrb	w0, [x0, #56]
   856d4:	370007c0 	tbnz	w0, #0, 857cc <CCPUThrottle::SetOnTemperature()+0x10c>
   856d8:	39400260 	ldrb	w0, [x19]
   856dc:	370000a0 	tbnz	w0, #0, 856f0 <CCPUThrottle::SetOnTemperature()+0x30>
   856e0:	a94153f3 	ldp	x19, x20, [sp, #16]
   856e4:	52800020 	mov	w0, #0x1                   	// #1
   856e8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   856ec:	d65f03c0 	ret
   856f0:	52800001 	mov	w1, #0x0                   	// #0
   856f4:	9100c3e0 	add	x0, sp, #0x30
   856f8:	9400284e 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   856fc:	52800063 	mov	w3, #0x3                   	// #3
   85700:	52800041 	mov	w1, #0x2                   	// #2
   85704:	72a00061 	movk	w1, #0x3, lsl #16
   85708:	9100e3e2 	add	x2, sp, #0x38
   8570c:	9100c3e0 	add	x0, sp, #0x30
   85710:	52800084 	mov	w4, #0x4                   	// #4
   85714:	b90047e3 	str	w3, [sp, #68]
   85718:	52800283 	mov	w3, #0x14                  	// #20
   8571c:	94002895 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   85720:	360009c0 	tbz	w0, #0, 85858 <CCPUThrottle::SetOnTemperature()+0x198>
   85724:	b9404bf4 	ldr	w20, [sp, #72]
   85728:	9100c3e0 	add	x0, sp, #0x30
   8572c:	94002845 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85730:	34000994 	cbz	w20, 85860 <CCPUThrottle::SetOnTemperature()+0x1a0>
   85734:	52800001 	mov	w1, #0x0                   	// #0
   85738:	9100c3e0 	add	x0, sp, #0x30
   8573c:	9400283d 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   85740:	528000c1 	mov	w1, #0x6                   	// #6
   85744:	72a00061 	movk	w1, #0x3, lsl #16
   85748:	b90047ff 	str	wzr, [sp, #68]
   8574c:	9100e3e2 	add	x2, sp, #0x38
   85750:	9100c3e0 	add	x0, sp, #0x30
   85754:	52800084 	mov	w4, #0x4                   	// #4
   85758:	52800283 	mov	w3, #0x14                  	// #20
   8575c:	94002885 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   85760:	360007c0 	tbz	w0, #0, 85858 <CCPUThrottle::SetOnTemperature()+0x198>
   85764:	9100c3e0 	add	x0, sp, #0x30
   85768:	f90013f5 	str	x21, [sp, #32]
   8576c:	b9404bf5 	ldr	w21, [sp, #72]
   85770:	94002834 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85774:	34000b15 	cbz	w21, 858d4 <CCPUThrottle::SetOnTemperature()+0x214>
   85778:	b9401260 	ldr	w0, [x19, #16]
   8577c:	529387e1 	mov	w1, #0x9c3f                	// #39999
   85780:	6b01001f 	cmp	w0, w1
   85784:	54000ae9 	b.ls	858e0 <CCPUThrottle::SetOnTemperature()+0x220>  // b.plast
   85788:	b9400e61 	ldr	w1, [x19, #12]
   8578c:	6b01001f 	cmp	w0, w1
   85790:	54000069 	b.ls	8579c <CCPUThrottle::SetOnTemperature()+0xdc>  // b.plast
   85794:	2a0103e0 	mov	w0, w1
   85798:	b9001261 	str	w1, [x19, #16]
   8579c:	6b15001f 	cmp	w0, w21
   857a0:	54000682 	b.cs	85870 <CCPUThrottle::SetOnTemperature()+0x1b0>  // b.hs, b.nlast
   857a4:	b9400661 	ldr	w1, [x19, #4]
   857a8:	6b14003f 	cmp	w1, w20
   857ac:	54000622 	b.cs	85870 <CCPUThrottle::SetOnTemperature()+0x1b0>  // b.hs, b.nlast
   857b0:	aa1303e0 	mov	x0, x19
   857b4:	52800002 	mov	w2, #0x0                   	// #0
   857b8:	52800001 	mov	w1, #0x0                   	// #0
   857bc:	a94153f3 	ldp	x19, x20, [sp, #16]
   857c0:	f94013f5 	ldr	x21, [sp, #32]
   857c4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   857c8:	17ffff62 	b	85550 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)>
   857cc:	52800001 	mov	w1, #0x0                   	// #0
   857d0:	9100c3e0 	add	x0, sp, #0x30
   857d4:	94002817 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   857d8:	528000c1 	mov	w1, #0x6                   	// #6
   857dc:	72a00061 	movk	w1, #0x3, lsl #16
   857e0:	b90047ff 	str	wzr, [sp, #68]
   857e4:	9100e3e2 	add	x2, sp, #0x38
   857e8:	9100c3e0 	add	x0, sp, #0x30
   857ec:	52800084 	mov	w4, #0x4                   	// #4
   857f0:	52800283 	mov	w3, #0x14                  	// #20
   857f4:	9400285f 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   857f8:	36000300 	tbz	w0, #0, 85858 <CCPUThrottle::SetOnTemperature()+0x198>
   857fc:	b9404bf4 	ldr	w20, [sp, #72]
   85800:	9100c3e0 	add	x0, sp, #0x30
   85804:	9400280f 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85808:	340002d4 	cbz	w20, 85860 <CCPUThrottle::SetOnTemperature()+0x1a0>
   8580c:	b9401260 	ldr	w0, [x19, #16]
   85810:	529387e1 	mov	w1, #0x9c3f                	// #39999
   85814:	6b01001f 	cmp	w0, w1
   85818:	54000509 	b.ls	858b8 <CCPUThrottle::SetOnTemperature()+0x1f8>  // b.plast
   8581c:	b9400e61 	ldr	w1, [x19, #12]
   85820:	6b01001f 	cmp	w0, w1
   85824:	54000069 	b.ls	85830 <CCPUThrottle::SetOnTemperature()+0x170>  // b.plast
   85828:	2a0103e0 	mov	w0, w1
   8582c:	b9001261 	str	w1, [x19, #16]
   85830:	6b14001f 	cmp	w0, w20
   85834:	540003a3 	b.cc	858a8 <CCPUThrottle::SetOnTemperature()+0x1e8>  // b.lo, b.ul, b.last
   85838:	128270e1 	mov	w1, #0xffffec78            	// #-5000
   8583c:	0b010000 	add	w0, w0, w1
   85840:	6b14001f 	cmp	w0, w20
   85844:	54fff4e9 	b.ls	856e0 <CCPUThrottle::SetOnTemperature()+0x20>  // b.plast
   85848:	91010260 	add	x0, x19, #0x40
   8584c:	52800001 	mov	w1, #0x0                   	// #0
   85850:	94000388 	bl	86670 <CGPIOPin::Write(unsigned int)>
   85854:	17ffffa3 	b	856e0 <CCPUThrottle::SetOnTemperature()+0x20>
   85858:	9100c3e0 	add	x0, sp, #0x30
   8585c:	940027f9 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85860:	52800000 	mov	w0, #0x0                   	// #0
   85864:	a94153f3 	ldp	x19, x20, [sp, #16]
   85868:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8586c:	d65f03c0 	ret
   85870:	512ee000 	sub	w0, w0, #0xbb8
   85874:	6b15001f 	cmp	w0, w21
   85878:	54000149 	b.ls	858a0 <CCPUThrottle::SetOnTemperature()+0x1e0>  // b.plast
   8587c:	b9400a60 	ldr	w0, [x19, #8]
   85880:	6b14001f 	cmp	w0, w20
   85884:	540000e9 	b.ls	858a0 <CCPUThrottle::SetOnTemperature()+0x1e0>  // b.plast
   85888:	b9401661 	ldr	w1, [x19, #20]
   8588c:	7100043f 	cmp	w1, #0x1
   85890:	54000081 	b.ne	858a0 <CCPUThrottle::SetOnTemperature()+0x1e0>  // b.any
   85894:	aa1303e0 	mov	x0, x19
   85898:	52800002 	mov	w2, #0x0                   	// #0
   8589c:	17ffffc8 	b	857bc <CCPUThrottle::SetOnTemperature()+0xfc>
   858a0:	f94013f5 	ldr	x21, [sp, #32]
   858a4:	17ffff8f 	b	856e0 <CCPUThrottle::SetOnTemperature()+0x20>
   858a8:	91010260 	add	x0, x19, #0x40
   858ac:	52800021 	mov	w1, #0x1                   	// #1
   858b0:	94000370 	bl	86670 <CGPIOPin::Write(unsigned int)>
   858b4:	17ffff8b 	b	856e0 <CCPUThrottle::SetOnTemperature()+0x20>
   858b8:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   858bc:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   858c0:	f90013f5 	str	x21, [sp, #32]
   858c4:	91006021 	add	x1, x1, #0x18
   858c8:	9105a000 	add	x0, x0, #0x168
   858cc:	52801622 	mov	w2, #0xb1                  	// #177
   858d0:	940027b4 	bl	8f7a0 <assertion_failed>
   858d4:	f94013f5 	ldr	x21, [sp, #32]
   858d8:	52800000 	mov	w0, #0x0                   	// #0
   858dc:	17ffffe2 	b	85864 <CCPUThrottle::SetOnTemperature()+0x1a4>
   858e0:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   858e4:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   858e8:	91006021 	add	x1, x1, #0x18
   858ec:	9105a000 	add	x0, x0, #0x168
   858f0:	52801a82 	mov	w2, #0xd4                  	// #212
   858f4:	940027ab 	bl	8f7a0 <assertion_failed>
   858f8:	d503201f 	nop
   858fc:	d503201f 	nop

0000000000085900 <CCPUThrottle::CCPUThrottle(TCPUSpeed)>:
   85900:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   85904:	d2804b03 	mov	x3, #0x258                 	// #600
   85908:	910003fd 	mov	x29, sp
   8590c:	d29d4c02 	mov	x2, #0xea60                	// #60000
   85910:	52804b04 	mov	w4, #0x258                 	// #600
   85914:	f2c00042 	movk	x2, #0x2, lsl #32
   85918:	f2c98103 	movk	x3, #0x4c08, lsl #32
   8591c:	f2e00023 	movk	x3, #0x1, lsl #48
   85920:	a90153f3 	stp	x19, x20, [sp, #16]
   85924:	aa0003f3 	mov	x19, x0
   85928:	2a0103f4 	mov	w20, w1
   8592c:	a9025bf5 	stp	x21, x22, [sp, #32]
   85930:	91010015 	add	x21, x0, #0x40
   85934:	aa1503e0 	mov	x0, x21
   85938:	3900027f 	strb	wzr, [x19]
   8593c:	b9000664 	str	w4, [x19, #4]
   85940:	a9008a63 	stp	x3, x2, [x19, #8]
   85944:	a901fe7f 	stp	xzr, xzr, [x19, #24]
   85948:	a902fe7f 	stp	xzr, xzr, [x19, #40]
   8594c:	3900e27f 	strb	wzr, [x19, #56]
   85950:	94000318 	bl	865b0 <CGPIOPin::CGPIOPin()>
   85954:	b0000160 	adrp	x0, b2000 <appendBuf+0xa0>
   85958:	f941b801 	ldr	x1, [x0, #880]
   8595c:	b5000f61 	cbnz	x1, 85b48 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x248>
   85960:	f901b813 	str	x19, [x0, #880]
   85964:	94000703 	bl	87570 <CKernelOptions::Get()>
   85968:	940006f6 	bl	87540 <CKernelOptions::GetGPIOFanPin() const>
   8596c:	35000b00 	cbnz	w0, 85acc <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x1cc>
   85970:	71000a9f 	cmp	w20, #0x2
   85974:	54000960 	b.eq	85aa0 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x1a0>  // b.none
   85978:	940006fe 	bl	87570 <CKernelOptions::Get()>
   8597c:	940006ed 	bl	87530 <CKernelOptions::GetSoCMaxTemp() const>
   85980:	52807d02 	mov	w2, #0x3e8                 	// #1000
   85984:	52800001 	mov	w1, #0x0                   	// #0
   85988:	52800075 	mov	w21, #0x3                   	// #3
   8598c:	1b027c02 	mul	w2, w0, w2
   85990:	9100c3e0 	add	x0, sp, #0x30
   85994:	b9001262 	str	w2, [x19, #16]
   85998:	940027a6 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   8599c:	528000e1 	mov	w1, #0x7                   	// #7
   859a0:	72a00061 	movk	w1, #0x3, lsl #16
   859a4:	b90047f5 	str	w21, [sp, #68]
   859a8:	9100e3e2 	add	x2, sp, #0x38
   859ac:	9100c3e0 	add	x0, sp, #0x30
   859b0:	52800084 	mov	w4, #0x4                   	// #4
   859b4:	52800283 	mov	w3, #0x14                  	// #20
   859b8:	940027ee 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   859bc:	36000a20 	tbz	w0, #0, 85b00 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x200>
   859c0:	b9404bf6 	ldr	w22, [sp, #72]
   859c4:	9100c3e0 	add	x0, sp, #0x30
   859c8:	9400279e 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   859cc:	b9000676 	str	w22, [x19, #4]
   859d0:	34000616 	cbz	w22, 85a90 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x190>
   859d4:	52800001 	mov	w1, #0x0                   	// #0
   859d8:	9100c3e0 	add	x0, sp, #0x30
   859dc:	94002795 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   859e0:	52800081 	mov	w1, #0x4                   	// #4
   859e4:	72a00061 	movk	w1, #0x3, lsl #16
   859e8:	b90047f5 	str	w21, [sp, #68]
   859ec:	9100e3e2 	add	x2, sp, #0x38
   859f0:	9100c3e0 	add	x0, sp, #0x30
   859f4:	52800084 	mov	w4, #0x4                   	// #4
   859f8:	52800283 	mov	w3, #0x14                  	// #20
   859fc:	940027dd 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   85a00:	36000960 	tbz	w0, #0, 85b2c <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x22c>
   85a04:	b9404bf5 	ldr	w21, [sp, #72]
   85a08:	9100c3e0 	add	x0, sp, #0x30
   85a0c:	9400278d 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85a10:	b9000a75 	str	w21, [x19, #8]
   85a14:	340003f5 	cbz	w21, 85a90 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x190>
   85a18:	52800001 	mov	w1, #0x0                   	// #0
   85a1c:	9100c3e0 	add	x0, sp, #0x30
   85a20:	94002784 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   85a24:	52800141 	mov	w1, #0xa                   	// #10
   85a28:	72a00061 	movk	w1, #0x3, lsl #16
   85a2c:	b90047ff 	str	wzr, [sp, #68]
   85a30:	9100e3e2 	add	x2, sp, #0x38
   85a34:	9100c3e0 	add	x0, sp, #0x30
   85a38:	52800084 	mov	w4, #0x4                   	// #4
   85a3c:	52800283 	mov	w3, #0x14                  	// #20
   85a40:	940027cc 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   85a44:	360006c0 	tbz	w0, #0, 85b1c <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x21c>
   85a48:	b9404bf5 	ldr	w21, [sp, #72]
   85a4c:	9100c3e0 	add	x0, sp, #0x30
   85a50:	9400277c 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85a54:	b9000e75 	str	w21, [x19, #12]
   85a58:	340001d5 	cbz	w21, 85a90 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x190>
   85a5c:	b9401260 	ldr	w0, [x19, #16]
   85a60:	6b15001f 	cmp	w0, w21
   85a64:	540007e8 	b.hi	85b60 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x260>  // b.pmore
   85a68:	29408261 	ldp	w1, w0, [x19, #4]
   85a6c:	6b00003f 	cmp	w1, w0
   85a70:	54000102 	b.cs	85a90 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x190>  // b.hs, b.nlast
   85a74:	52800022 	mov	w2, #0x1                   	// #1
   85a78:	2a1403e1 	mov	w1, w20
   85a7c:	aa1303e0 	mov	x0, x19
   85a80:	39000262 	strb	w2, [x19]
   85a84:	97fffeb3 	bl	85550 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)>
   85a88:	36000040 	tbz	w0, #0, 85a90 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x190>
   85a8c:	b9001674 	str	w20, [x19, #20]
   85a90:	a94153f3 	ldp	x19, x20, [sp, #16]
   85a94:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85a98:	a8c57bfd 	ldp	x29, x30, [sp], #80
   85a9c:	d65f03c0 	ret
   85aa0:	940006b4 	bl	87570 <CKernelOptions::Get()>
   85aa4:	9400069f 	bl	87520 <CKernelOptions::GetCPUSpeed() const>
   85aa8:	7100041f 	cmp	w0, #0x1
   85aac:	2a0003f4 	mov	w20, w0
   85ab0:	54fff64d 	b.le	85978 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x78>
   85ab4:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   85ab8:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   85abc:	91006021 	add	x1, x1, #0x18
   85ac0:	91066000 	add	x0, x0, #0x198
   85ac4:	52800822 	mov	w2, #0x41                  	// #65
   85ac8:	94002736 	bl	8f7a0 <assertion_failed>
   85acc:	52800022 	mov	w2, #0x1                   	// #1
   85ad0:	2a0003e1 	mov	w1, w0
   85ad4:	aa1503e0 	mov	x0, x21
   85ad8:	3900e262 	strb	w2, [x19, #56]
   85adc:	940002c1 	bl	865e0 <CGPIOPin::AssignPin(unsigned int)>
   85ae0:	aa1503e0 	mov	x0, x21
   85ae4:	52800002 	mov	w2, #0x0                   	// #0
   85ae8:	52800021 	mov	w1, #0x1                   	// #1
   85aec:	94000569 	bl	87090 <CGPIOPin::SetMode(TGPIOMode, bool)>
   85af0:	aa1503e0 	mov	x0, x21
   85af4:	52800021 	mov	w1, #0x1                   	// #1
   85af8:	940002de 	bl	86670 <CGPIOPin::Write(unsigned int)>
   85afc:	17ffff9d 	b	85970 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x70>
   85b00:	9100c3e0 	add	x0, sp, #0x30
   85b04:	9400274f 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85b08:	b900067f 	str	wzr, [x19, #4]
   85b0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   85b10:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85b14:	a8c57bfd 	ldp	x29, x30, [sp], #80
   85b18:	d65f03c0 	ret
   85b1c:	9100c3e0 	add	x0, sp, #0x30
   85b20:	94002748 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85b24:	b9000e7f 	str	wzr, [x19, #12]
   85b28:	17ffffda 	b	85a90 <CCPUThrottle::CCPUThrottle(TCPUSpeed)+0x190>
   85b2c:	9100c3e0 	add	x0, sp, #0x30
   85b30:	94002744 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85b34:	b9000a7f 	str	wzr, [x19, #8]
   85b38:	a94153f3 	ldp	x19, x20, [sp, #16]
   85b3c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   85b40:	a8c57bfd 	ldp	x29, x30, [sp], #80
   85b44:	d65f03c0 	ret
   85b48:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   85b4c:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   85b50:	91006021 	add	x1, x1, #0x18
   85b54:	91062000 	add	x0, x0, #0x188
   85b58:	52800602 	mov	w2, #0x30                  	// #48
   85b5c:	94002711 	bl	8f7a0 <assertion_failed>
   85b60:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   85b64:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   85b68:	91006021 	add	x1, x1, #0x18
   85b6c:	9106e000 	add	x0, x0, #0x1b8
   85b70:	52800b02 	mov	w2, #0x58                  	// #88
   85b74:	9400270b 	bl	8f7a0 <assertion_failed>
   85b78:	d503201f 	nop
   85b7c:	d503201f 	nop

0000000000085b80 <CCPUThrottle::CheckThrottledState()>:
   85b80:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85b84:	910003fd 	mov	x29, sp
   85b88:	52800001 	mov	w1, #0x0                   	// #0
   85b8c:	a90153f3 	stp	x19, x20, [sp, #16]
   85b90:	aa0003f3 	mov	x19, x0
   85b94:	9100a3e0 	add	x0, sp, #0x28
   85b98:	94002726 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   85b9c:	529fffe3 	mov	w3, #0xffff                	// #65535
   85ba0:	9100c3e2 	add	x2, sp, #0x30
   85ba4:	9100a3e0 	add	x0, sp, #0x28
   85ba8:	528008c1 	mov	w1, #0x46                  	// #70
   85bac:	72a00061 	movk	w1, #0x3, lsl #16
   85bb0:	52800084 	mov	w4, #0x4                   	// #4
   85bb4:	b9003fe3 	str	w3, [sp, #60]
   85bb8:	52800203 	mov	w3, #0x10                  	// #16
   85bbc:	9400276d 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   85bc0:	2a0003f4 	mov	w20, w0
   85bc4:	360001f4 	tbz	w20, #0, 85c00 <CCPUThrottle::CheckThrottledState()+0x80>
   85bc8:	b9403fe0 	ldr	w0, [sp, #60]
   85bcc:	b9402261 	ldr	w1, [x19, #32]
   85bd0:	0a010000 	and	w0, w0, w1
   85bd4:	b9003fe0 	str	w0, [sp, #60]
   85bd8:	34000120 	cbz	w0, 85bfc <CCPUThrottle::CheckThrottledState()+0x7c>
   85bdc:	b9402661 	ldr	w1, [x19, #36]
   85be0:	6b01001f 	cmp	w0, w1
   85be4:	540000c0 	b.eq	85bfc <CCPUThrottle::CheckThrottledState()+0x7c>  // b.none
   85be8:	f9401662 	ldr	x2, [x19, #40]
   85bec:	b4000162 	cbz	x2, 85c18 <CCPUThrottle::CheckThrottledState()+0x98>
   85bf0:	f9401a61 	ldr	x1, [x19, #48]
   85bf4:	d63f0040 	blr	x2
   85bf8:	b9403fe0 	ldr	w0, [sp, #60]
   85bfc:	b9002660 	str	w0, [x19, #36]
   85c00:	9100a3e0 	add	x0, sp, #0x28
   85c04:	9400270f 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85c08:	2a1403e0 	mov	w0, w20
   85c0c:	a94153f3 	ldp	x19, x20, [sp, #16]
   85c10:	a8c47bfd 	ldp	x29, x30, [sp], #64
   85c14:	d65f03c0 	ret
   85c18:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   85c1c:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   85c20:	91006021 	add	x1, x1, #0x18
   85c24:	91016000 	add	x0, x0, #0x58
   85c28:	52802d62 	mov	w2, #0x16b                 	// #363
   85c2c:	940026dd 	bl	8f7a0 <assertion_failed>

0000000000085c30 <CCPUThrottle::Update()>:
   85c30:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   85c34:	910003fd 	mov	x29, sp
   85c38:	a90153f3 	stp	x19, x20, [sp, #16]
   85c3c:	aa0003f3 	mov	x19, x0
   85c40:	94001864 	bl	8bdd0 <CTimer::GetClockTicks()>
   85c44:	b9401e61 	ldr	w1, [x19, #28]
   85c48:	52811fe2 	mov	w2, #0x8ff                 	// #2303
   85c4c:	72a007a2 	movk	w2, #0x3d, lsl #16
   85c50:	4b010001 	sub	w1, w0, w1
   85c54:	6b02003f 	cmp	w1, w2
   85c58:	540000a8 	b.hi	85c6c <CCPUThrottle::Update()+0x3c>  // b.pmore
   85c5c:	a94153f3 	ldp	x19, x20, [sp, #16]
   85c60:	52800020 	mov	w0, #0x1                   	// #1
   85c64:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85c68:	d65f03c0 	ret
   85c6c:	2a0003f4 	mov	w20, w0
   85c70:	aa1303e0 	mov	x0, x19
   85c74:	f90013f5 	str	x21, [sp, #32]
   85c78:	97fffe92 	bl	856c0 <CCPUThrottle::SetOnTemperature()>
   85c7c:	f9401661 	ldr	x1, [x19, #40]
   85c80:	12001c15 	and	w21, w0, #0xff
   85c84:	b40000c1 	cbz	x1, 85c9c <CCPUThrottle::Update()+0x6c>
   85c88:	aa1303e0 	mov	x0, x19
   85c8c:	97ffffbd 	bl	85b80 <CCPUThrottle::CheckThrottledState()>
   85c90:	2a0003e1 	mov	w1, w0
   85c94:	12001c00 	and	w0, w0, #0xff
   85c98:	36000041 	tbz	w1, #0, 85ca0 <CCPUThrottle::Update()+0x70>
   85c9c:	2a1503e0 	mov	w0, w21
   85ca0:	f94013f5 	ldr	x21, [sp, #32]
   85ca4:	b9001e74 	str	w20, [x19, #28]
   85ca8:	a94153f3 	ldp	x19, x20, [sp, #16]
   85cac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   85cb0:	d65f03c0 	ret
   85cb4:	d503201f 	nop
   85cb8:	d503201f 	nop
   85cbc:	d503201f 	nop

0000000000085cc0 <CCPUThrottle::SetToSetDelay()>:
   85cc0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85cc4:	910003fd 	mov	x29, sp
   85cc8:	f9000bf3 	str	x19, [sp, #16]
   85ccc:	aa0003f3 	mov	x19, x0
   85cd0:	94001840 	bl	8bdd0 <CTimer::GetClockTicks()>
   85cd4:	b9401a61 	ldr	w1, [x19, #24]
   85cd8:	4b010002 	sub	w2, w0, w1
   85cdc:	7105885f 	cmp	w2, #0x162
   85ce0:	540000c9 	b.ls	85cf8 <CCPUThrottle::SetToSetDelay()+0x38>  // b.plast
   85ce4:	9400183b 	bl	8bdd0 <CTimer::GetClockTicks()>
   85ce8:	b9001a60 	str	w0, [x19, #24]
   85cec:	f9400bf3 	ldr	x19, [sp, #16]
   85cf0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85cf4:	d65f03c0 	ret
   85cf8:	11058c21 	add	w1, w1, #0x163
   85cfc:	4b000020 	sub	w0, w1, w0
   85d00:	94001af8 	bl	8c8e0 <CTimer::SimpleusDelay(unsigned int)>
   85d04:	94001833 	bl	8bdd0 <CTimer::GetClockTicks()>
   85d08:	b9001a60 	str	w0, [x19, #24]
   85d0c:	f9400bf3 	ldr	x19, [sp, #16]
   85d10:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85d14:	d65f03c0 	ret
   85d18:	d503201f 	nop
   85d1c:	d503201f 	nop

0000000000085d20 <CCPUThrottle::GetClockRate(unsigned int)>:
   85d20:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85d24:	910003fd 	mov	x29, sp
   85d28:	52800001 	mov	w1, #0x0                   	// #0
   85d2c:	f9000bf3 	str	x19, [sp, #16]
   85d30:	2a0003f3 	mov	w19, w0
   85d34:	910083e0 	add	x0, sp, #0x20
   85d38:	940026be 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   85d3c:	52800065 	mov	w5, #0x3                   	// #3
   85d40:	9100a3e2 	add	x2, sp, #0x28
   85d44:	2a1303e1 	mov	w1, w19
   85d48:	52800084 	mov	w4, #0x4                   	// #4
   85d4c:	52800283 	mov	w3, #0x14                  	// #20
   85d50:	910083e0 	add	x0, sp, #0x20
   85d54:	b90037e5 	str	w5, [sp, #52]
   85d58:	94002706 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   85d5c:	2a0003e1 	mov	w1, w0
   85d60:	910083e0 	add	x0, sp, #0x20
   85d64:	b9403bf3 	ldr	w19, [sp, #56]
   85d68:	f240003f 	tst	x1, #0x1
   85d6c:	1a9f1273 	csel	w19, w19, wzr, ne	// ne = any
   85d70:	940026b4 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85d74:	2a1303e0 	mov	w0, w19
   85d78:	f9400bf3 	ldr	x19, [sp, #16]
   85d7c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   85d80:	d65f03c0 	ret
   85d84:	d503201f 	nop
   85d88:	d503201f 	nop
   85d8c:	d503201f 	nop

0000000000085d90 <CCPUThrottle::GetTemperature(unsigned int)>:
   85d90:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85d94:	910003fd 	mov	x29, sp
   85d98:	52800001 	mov	w1, #0x0                   	// #0
   85d9c:	f9000bf3 	str	x19, [sp, #16]
   85da0:	2a0003f3 	mov	w19, w0
   85da4:	910083e0 	add	x0, sp, #0x20
   85da8:	940026a2 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   85dac:	9100a3e2 	add	x2, sp, #0x28
   85db0:	2a1303e1 	mov	w1, w19
   85db4:	b90037ff 	str	wzr, [sp, #52]
   85db8:	52800084 	mov	w4, #0x4                   	// #4
   85dbc:	52800283 	mov	w3, #0x14                  	// #20
   85dc0:	910083e0 	add	x0, sp, #0x20
   85dc4:	940026eb 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   85dc8:	2a0003e1 	mov	w1, w0
   85dcc:	910083e0 	add	x0, sp, #0x20
   85dd0:	b9403bf3 	ldr	w19, [sp, #56]
   85dd4:	f240003f 	tst	x1, #0x1
   85dd8:	1a9f1273 	csel	w19, w19, wzr, ne	// ne = any
   85ddc:	94002699 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85de0:	2a1303e0 	mov	w0, w19
   85de4:	f9400bf3 	ldr	x19, [sp, #16]
   85de8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   85dec:	d65f03c0 	ret

0000000000085df0 <CCPUThrottle::SetClockRate(unsigned int, bool)>:
   85df0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85df4:	910003fd 	mov	x29, sp
   85df8:	a90153f3 	stp	x19, x20, [sp, #16]
   85dfc:	2a0003f3 	mov	w19, w0
   85e00:	12001c34 	and	w20, w1, #0xff
   85e04:	910083e0 	add	x0, sp, #0x20
   85e08:	52800001 	mov	w1, #0x0                   	// #0
   85e0c:	94002689 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   85e10:	52800063 	mov	w3, #0x3                   	// #3
   85e14:	9100a3e2 	add	x2, sp, #0x28
   85e18:	b9003ff4 	str	w20, [sp, #60]
   85e1c:	52800184 	mov	w4, #0xc                   	// #12
   85e20:	910083e0 	add	x0, sp, #0x20
   85e24:	52900041 	mov	w1, #0x8002                	// #32770
   85e28:	72a00061 	movk	w1, #0x3, lsl #16
   85e2c:	2906cfe3 	stp	w3, w19, [sp, #52]
   85e30:	52800303 	mov	w3, #0x18                  	// #24
   85e34:	940026cf 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   85e38:	2a0003f3 	mov	w19, w0
   85e3c:	910083e0 	add	x0, sp, #0x20
   85e40:	94002680 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   85e44:	2a1303e0 	mov	w0, w19
   85e48:	a94153f3 	ldp	x19, x20, [sp, #16]
   85e4c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   85e50:	d65f03c0 	ret
   85e54:	d503201f 	nop
   85e58:	d503201f 	nop
   85e5c:	d503201f 	nop

0000000000085e60 <CCPUThrottle::~CCPUThrottle()>:
   85e60:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85e64:	910003fd 	mov	x29, sp
   85e68:	a90153f3 	stp	x19, x20, [sp, #16]
   85e6c:	aa0003f3 	mov	x19, x0
   85e70:	91010274 	add	x20, x19, #0x40
   85e74:	3940e000 	ldrb	w0, [x0, #56]
   85e78:	f900167f 	str	xzr, [x19, #40]
   85e7c:	37000120 	tbnz	w0, #0, 85ea0 <CCPUThrottle::~CCPUThrottle()+0x40>
   85e80:	39400260 	ldrb	w0, [x19]
   85e84:	370001a0 	tbnz	w0, #0, 85eb8 <CCPUThrottle::~CCPUThrottle()+0x58>
   85e88:	b0000161 	adrp	x1, b2000 <appendBuf+0xa0>
   85e8c:	aa1403e0 	mov	x0, x20
   85e90:	a94153f3 	ldp	x19, x20, [sp, #16]
   85e94:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85e98:	f901b83f 	str	xzr, [x1, #880]
   85e9c:	140001bd 	b	86590 <CGPIOPin::~CGPIOPin()>
   85ea0:	aa1403e0 	mov	x0, x20
   85ea4:	52800022 	mov	w2, #0x1                   	// #1
   85ea8:	52800001 	mov	w1, #0x0                   	// #0
   85eac:	94000479 	bl	87090 <CGPIOPin::SetMode(TGPIOMode, bool)>
   85eb0:	39400260 	ldrb	w0, [x19]
   85eb4:	3607fea0 	tbz	w0, #0, 85e88 <CCPUThrottle::~CCPUThrottle()+0x28>
   85eb8:	52800022 	mov	w2, #0x1                   	// #1
   85ebc:	52800001 	mov	w1, #0x0                   	// #0
   85ec0:	aa1303e0 	mov	x0, x19
   85ec4:	97fffda3 	bl	85550 <CCPUThrottle::SetSpeedInternal(TCPUSpeed, bool)>
   85ec8:	36000040 	tbz	w0, #0, 85ed0 <CCPUThrottle::~CCPUThrottle()+0x70>
   85ecc:	b900167f 	str	wzr, [x19, #20]
   85ed0:	b0000161 	adrp	x1, b2000 <appendBuf+0xa0>
   85ed4:	aa1403e0 	mov	x0, x20
   85ed8:	3900027f 	strb	wzr, [x19]
   85edc:	a94153f3 	ldp	x19, x20, [sp, #16]
   85ee0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85ee4:	f901b83f 	str	xzr, [x1, #880]
   85ee8:	140001aa 	b	86590 <CGPIOPin::~CGPIOPin()>
   85eec:	00000000 	udf	#0

0000000000085ef0 <CDeviceNameService::CDeviceNameService()>:
   85ef0:	b0000161 	adrp	x1, b2000 <appendBuf+0xa0>
   85ef4:	f900001f 	str	xzr, [x0]
   85ef8:	f941bc22 	ldr	x2, [x1, #888]
   85efc:	b900081f 	str	wzr, [x0, #8]
   85f00:	b5000062 	cbnz	x2, 85f0c <CDeviceNameService::CDeviceNameService()+0x1c>
   85f04:	f901bc20 	str	x0, [x1, #888]
   85f08:	d65f03c0 	ret
   85f0c:	b0000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   85f10:	b0000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   85f14:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   85f18:	9107e021 	add	x1, x1, #0x1f8
   85f1c:	910003fd 	mov	x29, sp
   85f20:	91084000 	add	x0, x0, #0x210
   85f24:	528003e2 	mov	w2, #0x1f                  	// #31
   85f28:	9400261e 	bl	8f7a0 <assertion_failed>
   85f2c:	d503201f 	nop

0000000000085f30 <CDeviceNameService::~CDeviceNameService()>:
   85f30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   85f34:	910003fd 	mov	x29, sp
   85f38:	a90153f3 	stp	x19, x20, [sp, #16]
   85f3c:	f9400013 	ldr	x19, [x0]
   85f40:	b4000173 	cbz	x19, 85f6c <CDeviceNameService::~CDeviceNameService()+0x3c>
   85f44:	aa0003f4 	mov	x20, x0
   85f48:	f9400660 	ldr	x0, [x19, #8]
   85f4c:	f9400273 	ldr	x19, [x19]
   85f50:	b4000040 	cbz	x0, 85f58 <CDeviceNameService::~CDeviceNameService()+0x28>
   85f54:	94001d4b 	bl	8d480 <operator delete[](void*)>
   85f58:	f9400280 	ldr	x0, [x20]
   85f5c:	d2800401 	mov	x1, #0x20                  	// #32
   85f60:	94001d54 	bl	8d4b0 <operator delete(void*, unsigned long)>
   85f64:	f9000293 	str	x19, [x20]
   85f68:	b5ffff13 	cbnz	x19, 85f48 <CDeviceNameService::~CDeviceNameService()+0x18>
   85f6c:	b0000160 	adrp	x0, b2000 <appendBuf+0xa0>
   85f70:	a94153f3 	ldp	x19, x20, [sp, #16]
   85f74:	f901bc1f 	str	xzr, [x0, #888]
   85f78:	a8c27bfd 	ldp	x29, x30, [sp], #32
   85f7c:	d65f03c0 	ret

0000000000085f80 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
   85f80:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   85f84:	910003fd 	mov	x29, sp
   85f88:	a90153f3 	stp	x19, x20, [sp, #16]
   85f8c:	aa0003f4 	mov	x20, x0
   85f90:	b9400800 	ldr	w0, [x0, #8]
   85f94:	a9025bf5 	stp	x21, x22, [sp, #32]
   85f98:	aa0103f5 	mov	x21, x1
   85f9c:	aa0203f6 	mov	x22, x2
   85fa0:	f9001bf7 	str	x23, [sp, #48]
   85fa4:	12001c77 	and	w23, w3, #0xff
   85fa8:	35000320 	cbnz	w0, 8600c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x8c>
   85fac:	d2800400 	mov	x0, #0x20                  	// #32
   85fb0:	94001d00 	bl	8d3b0 <operator new(unsigned long)>
   85fb4:	aa0003f3 	mov	x19, x0
   85fb8:	b4000355 	cbz	x21, 86020 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa0>
   85fbc:	aa1503e0 	mov	x0, x21
   85fc0:	94001abc 	bl	8cab0 <strlen>
   85fc4:	91000400 	add	x0, x0, #0x1
   85fc8:	94001d0e 	bl	8d400 <operator new[](unsigned long)>
   85fcc:	aa1503e1 	mov	x1, x21
   85fd0:	f9000660 	str	x0, [x19, #8]
   85fd4:	94001b47 	bl	8ccf0 <strcpy>
   85fd8:	b40003b6 	cbz	x22, 8604c <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xcc>
   85fdc:	f9400281 	ldr	x1, [x20]
   85fe0:	f9000293 	str	x19, [x20]
   85fe4:	b9400a80 	ldr	w0, [x20, #8]
   85fe8:	f9000a76 	str	x22, [x19, #16]
   85fec:	39006277 	strb	w23, [x19, #24]
   85ff0:	f9000261 	str	x1, [x19]
   85ff4:	35000220 	cbnz	w0, 86038 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
   85ff8:	a94153f3 	ldp	x19, x20, [sp, #16]
   85ffc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86000:	f9401bf7 	ldr	x23, [sp, #48]
   86004:	a8c47bfd 	ldp	x29, x30, [sp], #64
   86008:	d65f03c0 	ret
   8600c:	94001f85 	bl	8de20 <EnterCritical>
   86010:	d2800400 	mov	x0, #0x20                  	// #32
   86014:	94001ce7 	bl	8d3b0 <operator new(unsigned long)>
   86018:	aa0003f3 	mov	x19, x0
   8601c:	b5fffd15 	cbnz	x21, 85fbc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x3c>
   86020:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86024:	90000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   86028:	9107e021 	add	x1, x1, #0x1f8
   8602c:	91088000 	add	x0, x0, #0x220
   86030:	52800762 	mov	w2, #0x3b                  	// #59
   86034:	940025db 	bl	8f7a0 <assertion_failed>
   86038:	a94153f3 	ldp	x19, x20, [sp, #16]
   8603c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86040:	f9401bf7 	ldr	x23, [sp, #48]
   86044:	a8c47bfd 	ldp	x29, x30, [sp], #64
   86048:	14001fa6 	b	8dee0 <LeaveCritical>
   8604c:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86050:	90000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   86054:	9107e021 	add	x1, x1, #0x1f8
   86058:	9108c000 	add	x0, x0, #0x230
   8605c:	52800802 	mov	w2, #0x40                  	// #64
   86060:	940025d0 	bl	8f7a0 <assertion_failed>
   86064:	d503201f 	nop
   86068:	d503201f 	nop
   8606c:	d503201f 	nop

0000000000086070 <CDeviceNameService::RemoveDevice(char const*, bool)>:
   86070:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   86074:	910003fd 	mov	x29, sp
   86078:	a90153f3 	stp	x19, x20, [sp, #16]
   8607c:	a9025bf5 	stp	x21, x22, [sp, #32]
   86080:	f9001bf7 	str	x23, [sp, #48]
   86084:	b40006e1 	cbz	x1, 86160 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
   86088:	aa0003f6 	mov	x22, x0
   8608c:	b9400800 	ldr	w0, [x0, #8]
   86090:	aa0103f4 	mov	x20, x1
   86094:	12001c57 	and	w23, w2, #0xff
   86098:	350002e0 	cbnz	w0, 860f4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x84>
   8609c:	f94002d3 	ldr	x19, [x22]
   860a0:	b4000713 	cbz	x19, 86180 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   860a4:	d2800015 	mov	x21, #0x0                   	// #0
   860a8:	1400000b 	b	860d4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x64>
   860ac:	aa1403e0 	mov	x0, x20
   860b0:	94001a8c 	bl	8cae0 <strcmp>
   860b4:	35000080 	cbnz	w0, 860c4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x54>
   860b8:	39406261 	ldrb	w1, [x19, #24]
   860bc:	6b17003f 	cmp	w1, w23
   860c0:	540002e0 	b.eq	8611c <CDeviceNameService::RemoveDevice(char const*, bool)+0xac>  // b.none
   860c4:	f9400262 	ldr	x2, [x19]
   860c8:	aa1303f5 	mov	x21, x19
   860cc:	b40001a2 	cbz	x2, 86100 <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
   860d0:	aa0203f3 	mov	x19, x2
   860d4:	f9400661 	ldr	x1, [x19, #8]
   860d8:	b5fffea1 	cbnz	x1, 860ac <CDeviceNameService::RemoveDevice(char const*, bool)+0x3c>
   860dc:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   860e0:	90000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   860e4:	9107e021 	add	x1, x1, #0x1f8
   860e8:	91090000 	add	x0, x0, #0x240
   860ec:	52800bc2 	mov	w2, #0x5e                  	// #94
   860f0:	940025ac 	bl	8f7a0 <assertion_failed>
   860f4:	94001f4b 	bl	8de20 <EnterCritical>
   860f8:	f94002d3 	ldr	x19, [x22]
   860fc:	b5fffd53 	cbnz	x19, 860a4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x34>
   86100:	b9400ac0 	ldr	w0, [x22, #8]
   86104:	340003e0 	cbz	w0, 86180 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
   86108:	a94153f3 	ldp	x19, x20, [sp, #16]
   8610c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86110:	f9401bf7 	ldr	x23, [sp, #48]
   86114:	a8c47bfd 	ldp	x29, x30, [sp], #64
   86118:	14001f72 	b	8dee0 <LeaveCritical>
   8611c:	f9400260 	ldr	x0, [x19]
   86120:	b40001d5 	cbz	x21, 86158 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe8>
   86124:	f90002a0 	str	x0, [x21]
   86128:	b9400ac0 	ldr	w0, [x22, #8]
   8612c:	35000260 	cbnz	w0, 86178 <CDeviceNameService::RemoveDevice(char const*, bool)+0x108>
   86130:	f9400660 	ldr	x0, [x19, #8]
   86134:	b4000040 	cbz	x0, 8613c <CDeviceNameService::RemoveDevice(char const*, bool)+0xcc>
   86138:	94001cd2 	bl	8d480 <operator delete[](void*)>
   8613c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86140:	aa1303e0 	mov	x0, x19
   86144:	d2800401 	mov	x1, #0x20                  	// #32
   86148:	a94153f3 	ldp	x19, x20, [sp, #16]
   8614c:	f9401bf7 	ldr	x23, [sp, #48]
   86150:	a8c47bfd 	ldp	x29, x30, [sp], #64
   86154:	14001cd7 	b	8d4b0 <operator delete(void*, unsigned long)>
   86158:	f90002c0 	str	x0, [x22]
   8615c:	17fffff3 	b	86128 <CDeviceNameService::RemoveDevice(char const*, bool)+0xb8>
   86160:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86164:	90000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   86168:	9107e021 	add	x1, x1, #0x1f8
   8616c:	91088000 	add	x0, x0, #0x220
   86170:	52800ac2 	mov	w2, #0x56                  	// #86
   86174:	9400258b 	bl	8f7a0 <assertion_failed>
   86178:	94001f5a 	bl	8dee0 <LeaveCritical>
   8617c:	17ffffed 	b	86130 <CDeviceNameService::RemoveDevice(char const*, bool)+0xc0>
   86180:	a94153f3 	ldp	x19, x20, [sp, #16]
   86184:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86188:	f9401bf7 	ldr	x23, [sp, #48]
   8618c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   86190:	d65f03c0 	ret
   86194:	d503201f 	nop
   86198:	d503201f 	nop
   8619c:	d503201f 	nop

00000000000861a0 <CDeviceNameService::GetDevice(char const*, bool)>:
   861a0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   861a4:	910003fd 	mov	x29, sp
   861a8:	a90153f3 	stp	x19, x20, [sp, #16]
   861ac:	a9025bf5 	stp	x21, x22, [sp, #32]
   861b0:	b40004a1 	cbz	x1, 86244 <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
   861b4:	aa0003f5 	mov	x21, x0
   861b8:	aa0103f4 	mov	x20, x1
   861bc:	b9400800 	ldr	w0, [x0, #8]
   861c0:	12001c56 	and	w22, w2, #0xff
   861c4:	35000280 	cbnz	w0, 86214 <CDeviceNameService::GetDevice(char const*, bool)+0x74>
   861c8:	f94002b3 	ldr	x19, [x21]
   861cc:	b5000153 	cbnz	x19, 861f4 <CDeviceNameService::GetDevice(char const*, bool)+0x54>
   861d0:	14000016 	b	86228 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   861d4:	aa1403e0 	mov	x0, x20
   861d8:	94001a42 	bl	8cae0 <strcmp>
   861dc:	35000080 	cbnz	w0, 861ec <CDeviceNameService::GetDevice(char const*, bool)+0x4c>
   861e0:	39406261 	ldrb	w1, [x19, #24]
   861e4:	6b16003f 	cmp	w1, w22
   861e8:	540003a0 	b.eq	8625c <CDeviceNameService::GetDevice(char const*, bool)+0xbc>  // b.none
   861ec:	f9400273 	ldr	x19, [x19]
   861f0:	b4000193 	cbz	x19, 86220 <CDeviceNameService::GetDevice(char const*, bool)+0x80>
   861f4:	f9400661 	ldr	x1, [x19, #8]
   861f8:	b5fffee1 	cbnz	x1, 861d4 <CDeviceNameService::GetDevice(char const*, bool)+0x34>
   861fc:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86200:	90000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   86204:	9107e021 	add	x1, x1, #0x1f8
   86208:	91090000 	add	x0, x0, #0x240
   8620c:	52801242 	mov	w2, #0x92                  	// #146
   86210:	94002564 	bl	8f7a0 <assertion_failed>
   86214:	94001f03 	bl	8de20 <EnterCritical>
   86218:	f94002b3 	ldr	x19, [x21]
   8621c:	b5fffed3 	cbnz	x19, 861f4 <CDeviceNameService::GetDevice(char const*, bool)+0x54>
   86220:	b9400aa0 	ldr	w0, [x21, #8]
   86224:	350000c0 	cbnz	w0, 8623c <CDeviceNameService::GetDevice(char const*, bool)+0x9c>
   86228:	d2800000 	mov	x0, #0x0                   	// #0
   8622c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86230:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86234:	a8c47bfd 	ldp	x29, x30, [sp], #64
   86238:	d65f03c0 	ret
   8623c:	94001f29 	bl	8dee0 <LeaveCritical>
   86240:	17fffffa 	b	86228 <CDeviceNameService::GetDevice(char const*, bool)+0x88>
   86244:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86248:	90000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8624c:	9107e021 	add	x1, x1, #0x1f8
   86250:	91088000 	add	x0, x0, #0x220
   86254:	52801162 	mov	w2, #0x8b                  	// #139
   86258:	94002552 	bl	8f7a0 <assertion_failed>
   8625c:	b9400aa1 	ldr	w1, [x21, #8]
   86260:	f9400a60 	ldr	x0, [x19, #16]
   86264:	35000101 	cbnz	w1, 86284 <CDeviceNameService::GetDevice(char const*, bool)+0xe4>
   86268:	b5fffe20 	cbnz	x0, 8622c <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
   8626c:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86270:	90000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   86274:	9107e021 	add	x1, x1, #0x1f8
   86278:	91096000 	add	x0, x0, #0x258
   8627c:	52801342 	mov	w2, #0x9a                  	// #154
   86280:	94002548 	bl	8f7a0 <assertion_failed>
   86284:	f9001fe0 	str	x0, [sp, #56]
   86288:	94001f16 	bl	8dee0 <LeaveCritical>
   8628c:	f9401fe0 	ldr	x0, [sp, #56]
   86290:	b5fffce0 	cbnz	x0, 8622c <CDeviceNameService::GetDevice(char const*, bool)+0x8c>
   86294:	17fffff6 	b	8626c <CDeviceNameService::GetDevice(char const*, bool)+0xcc>
   86298:	d503201f 	nop
   8629c:	d503201f 	nop

00000000000862a0 <CDeviceNameService::Get()>:
   862a0:	90000160 	adrp	x0, b2000 <appendBuf+0xa0>
   862a4:	f941bc00 	ldr	x0, [x0, #888]
   862a8:	b4000040 	cbz	x0, 862b0 <CDeviceNameService::Get()+0x10>
   862ac:	d65f03c0 	ret
   862b0:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   862b4:	90000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   862b8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   862bc:	9107e021 	add	x1, x1, #0x1f8
   862c0:	910003fd 	mov	x29, sp
   862c4:	9109a000 	add	x0, x0, #0x268
   862c8:	52801982 	mov	w2, #0xcc                  	// #204
   862cc:	94002535 	bl	8f7a0 <assertion_failed>

00000000000862d0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
   862d0:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   862d4:	910003fd 	mov	x29, sp
   862d8:	a90153f3 	stp	x19, x20, [sp, #16]
   862dc:	aa0003f3 	mov	x19, x0
   862e0:	910103e0 	add	x0, sp, #0x40
   862e4:	aa0303f4 	mov	x20, x3
   862e8:	a9025bf5 	stp	x21, x22, [sp, #32]
   862ec:	aa0103f5 	mov	x21, x1
   862f0:	2a0203f6 	mov	w22, w2
   862f4:	f9001bf7 	str	x23, [sp, #48]
   862f8:	12001c97 	and	w23, w4, #0xff
   862fc:	94000ff1 	bl	8a2c0 <CString::CString()>
   86300:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86304:	2a1603e3 	mov	w3, w22
   86308:	aa1503e2 	mov	x2, x21
   8630c:	910103e0 	add	x0, sp, #0x40
   86310:	9109e021 	add	x1, x1, #0x278
   86314:	94001563 	bl	8b8a0 <CString::Format(char const*, ...)>
   86318:	910103e0 	add	x0, sp, #0x40
   8631c:	9400102d 	bl	8a3d0 <CString::operator char const*() const>
   86320:	2a1703e3 	mov	w3, w23
   86324:	aa1403e2 	mov	x2, x20
   86328:	aa0003e1 	mov	x1, x0
   8632c:	aa1303e0 	mov	x0, x19
   86330:	97ffff14 	bl	85f80 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
   86334:	910103e0 	add	x0, sp, #0x40
   86338:	94000fa6 	bl	8a1d0 <CString::~CString()>
   8633c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86340:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86344:	f9401bf7 	ldr	x23, [sp, #48]
   86348:	a8c67bfd 	ldp	x29, x30, [sp], #96
   8634c:	d65f03c0 	ret

0000000000086350 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
   86350:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   86354:	910003fd 	mov	x29, sp
   86358:	a90153f3 	stp	x19, x20, [sp, #16]
   8635c:	aa0003f3 	mov	x19, x0
   86360:	9100c3e0 	add	x0, sp, #0x30
   86364:	aa0103f4 	mov	x20, x1
   86368:	a9025bf5 	stp	x21, x22, [sp, #32]
   8636c:	2a0203f5 	mov	w21, w2
   86370:	12001c76 	and	w22, w3, #0xff
   86374:	94000fd3 	bl	8a2c0 <CString::CString()>
   86378:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8637c:	2a1503e3 	mov	w3, w21
   86380:	aa1403e2 	mov	x2, x20
   86384:	9100c3e0 	add	x0, sp, #0x30
   86388:	9109e021 	add	x1, x1, #0x278
   8638c:	94001545 	bl	8b8a0 <CString::Format(char const*, ...)>
   86390:	9100c3e0 	add	x0, sp, #0x30
   86394:	9400100f 	bl	8a3d0 <CString::operator char const*() const>
   86398:	2a1603e2 	mov	w2, w22
   8639c:	aa0003e1 	mov	x1, x0
   863a0:	aa1303e0 	mov	x0, x19
   863a4:	97ffff33 	bl	86070 <CDeviceNameService::RemoveDevice(char const*, bool)>
   863a8:	9100c3e0 	add	x0, sp, #0x30
   863ac:	94000f89 	bl	8a1d0 <CString::~CString()>
   863b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   863b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   863b8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   863bc:	d65f03c0 	ret

00000000000863c0 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
   863c0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   863c4:	910003fd 	mov	x29, sp
   863c8:	a90153f3 	stp	x19, x20, [sp, #16]
   863cc:	aa0003f3 	mov	x19, x0
   863d0:	9100c3e0 	add	x0, sp, #0x30
   863d4:	aa0103f4 	mov	x20, x1
   863d8:	a9025bf5 	stp	x21, x22, [sp, #32]
   863dc:	2a0203f5 	mov	w21, w2
   863e0:	12001c76 	and	w22, w3, #0xff
   863e4:	94000fb7 	bl	8a2c0 <CString::CString()>
   863e8:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   863ec:	2a1503e3 	mov	w3, w21
   863f0:	aa1403e2 	mov	x2, x20
   863f4:	9100c3e0 	add	x0, sp, #0x30
   863f8:	9109e021 	add	x1, x1, #0x278
   863fc:	94001529 	bl	8b8a0 <CString::Format(char const*, ...)>
   86400:	9100c3e0 	add	x0, sp, #0x30
   86404:	94000ff3 	bl	8a3d0 <CString::operator char const*() const>
   86408:	2a1603e2 	mov	w2, w22
   8640c:	aa0003e1 	mov	x1, x0
   86410:	aa1303e0 	mov	x0, x19
   86414:	97ffff63 	bl	861a0 <CDeviceNameService::GetDevice(char const*, bool)>
   86418:	aa0003f3 	mov	x19, x0
   8641c:	9100c3e0 	add	x0, sp, #0x30
   86420:	94000f6c 	bl	8a1d0 <CString::~CString()>
   86424:	a9425bf5 	ldp	x21, x22, [sp, #32]
   86428:	aa1303e0 	mov	x0, x19
   8642c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86430:	a8c57bfd 	ldp	x29, x30, [sp], #80
   86434:	d65f03c0 	ret
   86438:	d503201f 	nop
   8643c:	d503201f 	nop

0000000000086440 <CDeviceNameService::ListDevices(CDevice*)>:
   86440:	a9b87bfd 	stp	x29, x30, [sp, #-128]!
   86444:	910003fd 	mov	x29, sp
   86448:	a90153f3 	stp	x19, x20, [sp, #16]
   8644c:	b40008c1 	cbz	x1, 86564 <CDeviceNameService::ListDevices(CDevice*)+0x124>
   86450:	f9400013 	ldr	x19, [x0]
   86454:	b4000833 	cbz	x19, 86558 <CDeviceNameService::ListDevices(CDevice*)+0x118>
   86458:	52800014 	mov	w20, #0x0                   	// #0
   8645c:	a9025bf5 	stp	x21, x22, [sp, #32]
   86460:	aa0103f6 	mov	x22, x1
   86464:	a90363f7 	stp	x23, x24, [sp, #48]
   86468:	90000077 	adrp	x23, 92000 <uart_putHexByte::hexDigits>
   8646c:	910a42f7 	add	x23, x23, #0x290
   86470:	52800158 	mov	w24, #0xa                   	// #10
   86474:	a9046bf9 	stp	x25, x26, [sp, #64]
   86478:	52800c7a 	mov	w26, #0x63                  	// #99
   8647c:	52800419 	mov	w25, #0x20                  	// #32
   86480:	a90573fb 	stp	x27, x28, [sp, #80]
   86484:	14000018 	b	864e4 <CDeviceNameService::ListDevices(CDevice*)+0xa4>
   86488:	39406262 	ldrb	w2, [x19, #24]
   8648c:	11000694 	add	w20, w20, #0x1
   86490:	aa1703e1 	mov	x1, x23
   86494:	7200069b 	ands	w27, w20, #0x3
   86498:	910183e0 	add	x0, sp, #0x60
   8649c:	1a981324 	csel	w4, w25, w24, ne	// ne = any
   864a0:	4b020342 	sub	w2, w26, w2
   864a4:	940014ff 	bl	8b8a0 <CString::Format(char const*, ...)>
   864a8:	f94002c1 	ldr	x1, [x22]
   864ac:	910183e0 	add	x0, sp, #0x60
   864b0:	f9400c3c 	ldr	x28, [x1, #24]
   864b4:	94000fc7 	bl	8a3d0 <CString::operator char const*() const>
   864b8:	aa0003f5 	mov	x21, x0
   864bc:	910183e0 	add	x0, sp, #0x60
   864c0:	94001010 	bl	8a500 <CString::GetLength() const>
   864c4:	aa0003e2 	mov	x2, x0
   864c8:	aa1503e1 	mov	x1, x21
   864cc:	aa1603e0 	mov	x0, x22
   864d0:	d63f0380 	blr	x28
   864d4:	f9400273 	ldr	x19, [x19]
   864d8:	910183e0 	add	x0, sp, #0x60
   864dc:	94000f3d 	bl	8a1d0 <CString::~CString()>
   864e0:	b4000173 	cbz	x19, 8650c <CDeviceNameService::ListDevices(CDevice*)+0xcc>
   864e4:	910183e0 	add	x0, sp, #0x60
   864e8:	94000f76 	bl	8a2c0 <CString::CString()>
   864ec:	f9400663 	ldr	x3, [x19, #8]
   864f0:	b5fffcc3 	cbnz	x3, 86488 <CDeviceNameService::ListDevices(CDevice*)+0x48>
   864f4:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   864f8:	90000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   864fc:	9107e021 	add	x1, x1, #0x1f8
   86500:	91090000 	add	x0, x0, #0x240
   86504:	52801722 	mov	w2, #0xb9                  	// #185
   86508:	940024a6 	bl	8f7a0 <assertion_failed>
   8650c:	340001fb 	cbz	w27, 86548 <CDeviceNameService::ListDevices(CDevice*)+0x108>
   86510:	f94002c3 	ldr	x3, [x22]
   86514:	f0000041 	adrp	x1, 91000 <VectorTable>
   86518:	aa1603e0 	mov	x0, x22
   8651c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86520:	91372021 	add	x1, x1, #0xdc8
   86524:	d2800022 	mov	x2, #0x1                   	// #1
   86528:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8652c:	a94363f7 	ldp	x23, x24, [sp, #48]
   86530:	a9446bf9 	ldp	x25, x26, [sp, #64]
   86534:	a94573fb 	ldp	x27, x28, [sp, #80]
   86538:	f9400c63 	ldr	x3, [x3, #24]
   8653c:	a8c87bfd 	ldp	x29, x30, [sp], #128
   86540:	aa0303f0 	mov	x16, x3
   86544:	d61f0200 	br	x16
   86548:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8654c:	a94363f7 	ldp	x23, x24, [sp, #48]
   86550:	a9446bf9 	ldp	x25, x26, [sp, #64]
   86554:	a94573fb 	ldp	x27, x28, [sp, #80]
   86558:	a94153f3 	ldp	x19, x20, [sp, #16]
   8655c:	a8c87bfd 	ldp	x29, x30, [sp], #128
   86560:	d65f03c0 	ret
   86564:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86568:	90000060 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8656c:	a9025bf5 	stp	x21, x22, [sp, #32]
   86570:	9107e021 	add	x1, x1, #0x1f8
   86574:	910a0000 	add	x0, x0, #0x280
   86578:	52801602 	mov	w2, #0xb0                  	// #176
   8657c:	a90363f7 	stp	x23, x24, [sp, #48]
   86580:	a9046bf9 	stp	x25, x26, [sp, #64]
   86584:	a90573fb 	stp	x27, x28, [sp, #80]
   86588:	94002486 	bl	8f7a0 <assertion_failed>
   8658c:	00000000 	udf	#0

0000000000086590 <CGPIOPin::~CGPIOPin()>:
   86590:	d65f03c0 	ret
   86594:	d503201f 	nop
   86598:	d503201f 	nop
   8659c:	d503201f 	nop

00000000000865a0 <CGPIOPin::~CGPIOPin()>:
   865a0:	d2800901 	mov	x1, #0x48                  	// #72
   865a4:	14001bc3 	b	8d4b0 <operator delete(void*, unsigned long)>
   865a8:	d503201f 	nop
   865ac:	d503201f 	nop

00000000000865b0 <CGPIOPin::CGPIOPin()>:
   865b0:	528006c4 	mov	w4, #0x36                  	// #54
   865b4:	52800143 	mov	w3, #0xa                   	// #10
   865b8:	a9027c1f 	stp	xzr, xzr, [x0, #32]
   865bc:	b21f07e2 	mov	x2, #0x600000006           	// #25769803782
   865c0:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   865c4:	910ac021 	add	x1, x1, #0x2b0
   865c8:	b9000804 	str	w4, [x0, #8]
   865cc:	f9000001 	str	x1, [x0]
   865d0:	b9001403 	str	w3, [x0, #20]
   865d4:	f803c002 	stur	x2, [x0, #60]
   865d8:	d65f03c0 	ret
   865dc:	d503201f 	nop

00000000000865e0 <CGPIOPin::AssignPin(unsigned int)>:
   865e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   865e4:	910003fd 	mov	x29, sp
   865e8:	a90153f3 	stp	x19, x20, [sp, #16]
   865ec:	aa0003f4 	mov	x20, x0
   865f0:	b9400800 	ldr	w0, [x0, #8]
   865f4:	7100d81f 	cmp	w0, #0x36
   865f8:	54000321 	b.ne	8665c <CGPIOPin::AssignPin(unsigned int)+0x7c>  // b.any
   865fc:	7100d43f 	cmp	w1, #0x35
   86600:	b9000a81 	str	w1, [x20, #8]
   86604:	2a0103f3 	mov	w19, w1
   86608:	54000128 	b.hi	8662c <CGPIOPin::AssignPin(unsigned int)+0x4c>  // b.pmore
   8660c:	53057e61 	lsr	w1, w19, #5
   86610:	52800020 	mov	w0, #0x1                   	// #1
   86614:	1ad32000 	lsl	w0, w0, w19
   86618:	531e7421 	lsl	w1, w1, #2
   8661c:	29018281 	stp	w1, w0, [x20, #12]
   86620:	a94153f3 	ldp	x19, x20, [sp, #16]
   86624:	a8c27bfd 	ldp	x29, x30, [sp], #32
   86628:	d65f03c0 	ret
   8662c:	94000ab1 	bl	890f0 <CMachineInfo::Get()>
   86630:	2a1303e1 	mov	w1, w19
   86634:	9400096f 	bl	88bf0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   86638:	7100d41f 	cmp	w0, #0x35
   8663c:	b9000a80 	str	w0, [x20, #8]
   86640:	2a0003f3 	mov	w19, w0
   86644:	54fffe49 	b.ls	8660c <CGPIOPin::AssignPin(unsigned int)+0x2c>  // b.plast
   86648:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8664c:	910b0021 	add	x1, x1, #0x2c0
   86650:	9100a020 	add	x0, x1, #0x28
   86654:	528008e2 	mov	w2, #0x47                  	// #71
   86658:	94002452 	bl	8f7a0 <assertion_failed>
   8665c:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86660:	910b0021 	add	x1, x1, #0x2c0
   86664:	91004020 	add	x0, x1, #0x10
   86668:	52800802 	mov	w2, #0x40                  	// #64
   8666c:	9400244d 	bl	8f7a0 <assertion_failed>

0000000000086670 <CGPIOPin::Write(unsigned int)>:
   86670:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86674:	910003fd 	mov	x29, sp
   86678:	b9400802 	ldr	w2, [x0, #8]
   8667c:	7100d45f 	cmp	w2, #0x35
   86680:	54000248 	b.hi	866c8 <CGPIOPin::Write(unsigned int)+0x58>  // b.pmore
   86684:	b9401402 	ldr	w2, [x0, #20]
   86688:	71000c5f 	cmp	w2, #0x3
   8668c:	5400028c 	b.gt	866dc <CGPIOPin::Write(unsigned int)+0x6c>
   86690:	7100043f 	cmp	w1, #0x1
   86694:	540002e8 	b.hi	866f0 <CGPIOPin::Write(unsigned int)+0x80>  // b.pmore
   86698:	b9400c03 	ldr	w3, [x0, #12]
   8669c:	52800502 	mov	w2, #0x28                  	// #40
   866a0:	72bfc402 	movk	w2, #0xfe20, lsl #16
   866a4:	b9001801 	str	w1, [x0, #24]
   866a8:	7100003f 	cmp	w1, #0x0
   866ac:	51003044 	sub	w4, w2, #0xc
   866b0:	b9401000 	ldr	w0, [x0, #16]
   866b4:	1a840042 	csel	w2, w2, w4, eq	// eq = none
   866b8:	0b030042 	add	w2, w2, w3
   866bc:	b9000040 	str	w0, [x2]
   866c0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   866c4:	d65f03c0 	ret
   866c8:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   866cc:	910b0021 	add	x1, x1, #0x2c0
   866d0:	9100a020 	add	x0, x1, #0x28
   866d4:	52801222 	mov	w2, #0x91                  	// #145
   866d8:	94002432 	bl	8f7a0 <assertion_failed>
   866dc:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   866e0:	910b0021 	add	x1, x1, #0x2c0
   866e4:	91010020 	add	x0, x1, #0x40
   866e8:	52801282 	mov	w2, #0x94                  	// #148
   866ec:	9400242d 	bl	8f7a0 <assertion_failed>
   866f0:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   866f4:	910b0021 	add	x1, x1, #0x2c0
   866f8:	9101a020 	add	x0, x1, #0x68
   866fc:	52801302 	mov	w2, #0x98                  	// #152
   86700:	94002428 	bl	8f7a0 <assertion_failed>
   86704:	d503201f 	nop
   86708:	d503201f 	nop
   8670c:	d503201f 	nop

0000000000086710 <CGPIOPin::Read() const>:
   86710:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86714:	910003fd 	mov	x29, sp
   86718:	b9400801 	ldr	w1, [x0, #8]
   8671c:	7100d43f 	cmp	w1, #0x35
   86720:	540001e8 	b.hi	8675c <CGPIOPin::Read() const+0x4c>  // b.pmore
   86724:	b9401401 	ldr	w1, [x0, #20]
   86728:	7100003f 	cmp	w1, #0x0
   8672c:	51000821 	sub	w1, w1, #0x2
   86730:	7a411820 	ccmp	w1, #0x1, #0x0, ne	// ne = any
   86734:	540001e8 	b.hi	86770 <CGPIOPin::Read() const+0x60>  // b.pmore
   86738:	29418801 	ldp	w1, w2, [x0, #12]
   8673c:	52800683 	mov	w3, #0x34                  	// #52
   86740:	72bfc403 	movk	w3, #0xfe20, lsl #16
   86744:	a8c17bfd 	ldp	x29, x30, [sp], #16
   86748:	0b030020 	add	w0, w1, w3
   8674c:	b9400000 	ldr	w0, [x0]
   86750:	6a02001f 	tst	w0, w2
   86754:	1a9f07e0 	cset	w0, ne	// ne = any
   86758:	d65f03c0 	ret
   8675c:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86760:	910b0021 	add	x1, x1, #0x2c0
   86764:	9100a020 	add	x0, x1, #0x28
   86768:	52801482 	mov	w2, #0xa4                  	// #164
   8676c:	9400240d 	bl	8f7a0 <assertion_failed>
   86770:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86774:	910b0021 	add	x1, x1, #0x2c0
   86778:	91022020 	add	x0, x1, #0x88
   8677c:	528014c2 	mov	w2, #0xa6                  	// #166
   86780:	94002408 	bl	8f7a0 <assertion_failed>
   86784:	d503201f 	nop
   86788:	d503201f 	nop
   8678c:	d503201f 	nop

0000000000086790 <CGPIOPin::Invert()>:
   86790:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86794:	910003fd 	mov	x29, sp
   86798:	b9401401 	ldr	w1, [x0, #20]
   8679c:	7100043f 	cmp	w1, #0x1
   867a0:	54000281 	b.ne	867f0 <CGPIOPin::Invert()+0x60>  // b.any
   867a4:	b9400801 	ldr	w1, [x0, #8]
   867a8:	b9401802 	ldr	w2, [x0, #24]
   867ac:	7100d43f 	cmp	w1, #0x35
   867b0:	52000043 	eor	w3, w2, #0x1
   867b4:	54000288 	b.hi	86804 <CGPIOPin::Invert()+0x74>  // b.pmore
   867b8:	7100047f 	cmp	w3, #0x1
   867bc:	540002e8 	b.hi	86818 <CGPIOPin::Invert()+0x88>  // b.pmore
   867c0:	b9400c04 	ldr	w4, [x0, #12]
   867c4:	52800501 	mov	w1, #0x28                  	// #40
   867c8:	72bfc401 	movk	w1, #0xfe20, lsl #16
   867cc:	b9001803 	str	w3, [x0, #24]
   867d0:	7100045f 	cmp	w2, #0x1
   867d4:	51003022 	sub	w2, w1, #0xc
   867d8:	b9401000 	ldr	w0, [x0, #16]
   867dc:	1a820021 	csel	w1, w1, w2, eq	// eq = none
   867e0:	0b040021 	add	w1, w1, w4
   867e4:	b9000020 	str	w0, [x1]
   867e8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   867ec:	d65f03c0 	ret
   867f0:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   867f4:	910b0021 	add	x1, x1, #0x2c0
   867f8:	9103a020 	add	x0, x1, #0xe8
   867fc:	528016a2 	mov	w2, #0xb5                  	// #181
   86800:	940023e8 	bl	8f7a0 <assertion_failed>
   86804:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86808:	910b0021 	add	x1, x1, #0x2c0
   8680c:	9100a020 	add	x0, x1, #0x28
   86810:	52801222 	mov	w2, #0x91                  	// #145
   86814:	940023e3 	bl	8f7a0 <assertion_failed>
   86818:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8681c:	910b0021 	add	x1, x1, #0x2c0
   86820:	9101a020 	add	x0, x1, #0x68
   86824:	52801302 	mov	w2, #0x98                  	// #152
   86828:	940023de 	bl	8f7a0 <assertion_failed>
   8682c:	d503201f 	nop

0000000000086830 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)>:
   86830:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86834:	aa0003e4 	mov	x4, x0
   86838:	910003fd 	mov	x29, sp
   8683c:	b9401400 	ldr	w0, [x0, #20]
   86840:	7100001f 	cmp	w0, #0x0
   86844:	51000800 	sub	w0, w0, #0x2
   86848:	7a411800 	ccmp	w0, #0x1, #0x0, ne	// ne = any
   8684c:	54000568 	b.hi	868f8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xc8>  // b.pmore
   86850:	b9403c80 	ldr	w0, [x4, #60]
   86854:	7100181f 	cmp	w0, #0x6
   86858:	540001e1 	b.ne	86894 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x64>  // b.any
   8685c:	b9404080 	ldr	w0, [x4, #64]
   86860:	7100181f 	cmp	w0, #0x6
   86864:	54000221 	b.ne	868a8 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x78>  // b.any
   86868:	b40002a1 	cbz	x1, 868bc <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0x8c>
   8686c:	f9401480 	ldr	x0, [x4, #40]
   86870:	b5000300 	cbnz	x0, 868d0 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xa0>
   86874:	12001c63 	and	w3, w3, #0xff
   86878:	f9401080 	ldr	x0, [x4, #32]
   8687c:	a9028881 	stp	x1, x2, [x4, #40]
   86880:	3900e083 	strb	w3, [x4, #56]
   86884:	b4000300 	cbz	x0, 868e4 <CGPIOPin::ConnectInterrupt(void (*)(void*), void*, bool)+0xb4>
   86888:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8688c:	aa0403e1 	mov	x1, x4
   86890:	140025bc 	b	8ff80 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>
   86894:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86898:	910b0021 	add	x1, x1, #0x2c0
   8689c:	91042020 	add	x0, x1, #0x108
   868a0:	52801802 	mov	w2, #0xc0                  	// #192
   868a4:	940023bf 	bl	8f7a0 <assertion_failed>
   868a8:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   868ac:	910b0021 	add	x1, x1, #0x2c0
   868b0:	9104c020 	add	x0, x1, #0x130
   868b4:	52801822 	mov	w2, #0xc1                  	// #193
   868b8:	940023ba 	bl	8f7a0 <assertion_failed>
   868bc:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   868c0:	910b0021 	add	x1, x1, #0x2c0
   868c4:	91056020 	add	x0, x1, #0x158
   868c8:	52801862 	mov	w2, #0xc3                  	// #195
   868cc:	940023b5 	bl	8f7a0 <assertion_failed>
   868d0:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   868d4:	910b0021 	add	x1, x1, #0x2c0
   868d8:	9105a020 	add	x0, x1, #0x168
   868dc:	52801882 	mov	w2, #0xc4                  	// #196
   868e0:	940023b0 	bl	8f7a0 <assertion_failed>
   868e4:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   868e8:	910b0021 	add	x1, x1, #0x2c0
   868ec:	9105e020 	add	x0, x1, #0x178
   868f0:	52801962 	mov	w2, #0xcb                  	// #203
   868f4:	940023ab 	bl	8f7a0 <assertion_failed>
   868f8:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   868fc:	910b0021 	add	x1, x1, #0x2c0
   86900:	91022020 	add	x0, x1, #0x88
   86904:	52801782 	mov	w2, #0xbc                  	// #188
   86908:	940023a6 	bl	8f7a0 <assertion_failed>
   8690c:	d503201f 	nop

0000000000086910 <CGPIOPin::DisconnectInterrupt()>:
   86910:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86914:	aa0003e1 	mov	x1, x0
   86918:	910003fd 	mov	x29, sp
   8691c:	b9401400 	ldr	w0, [x0, #20]
   86920:	7100001f 	cmp	w0, #0x0
   86924:	51000800 	sub	w0, w0, #0x2
   86928:	7a411800 	ccmp	w0, #0x1, #0x0, ne	// ne = any
   8692c:	54000448 	b.hi	869b4 <CGPIOPin::DisconnectInterrupt()+0xa4>  // b.pmore
   86930:	b9403c20 	ldr	w0, [x1, #60]
   86934:	7100181f 	cmp	w0, #0x6
   86938:	54000161 	b.ne	86964 <CGPIOPin::DisconnectInterrupt()+0x54>  // b.any
   8693c:	b9404020 	ldr	w0, [x1, #64]
   86940:	7100181f 	cmp	w0, #0x6
   86944:	540001a1 	b.ne	86978 <CGPIOPin::DisconnectInterrupt()+0x68>  // b.any
   86948:	f9401420 	ldr	x0, [x1, #40]
   8694c:	b4000200 	cbz	x0, 8698c <CGPIOPin::DisconnectInterrupt()+0x7c>
   86950:	f9401020 	ldr	x0, [x1, #32]
   86954:	f900143f 	str	xzr, [x1, #40]
   86958:	b4000240 	cbz	x0, 869a0 <CGPIOPin::DisconnectInterrupt()+0x90>
   8695c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   86960:	140025b0 	b	90020 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>
   86964:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86968:	910b0021 	add	x1, x1, #0x2c0
   8696c:	91042020 	add	x0, x1, #0x108
   86970:	52801aa2 	mov	w2, #0xd5                  	// #213
   86974:	9400238b 	bl	8f7a0 <assertion_failed>
   86978:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8697c:	910b0021 	add	x1, x1, #0x2c0
   86980:	9104c020 	add	x0, x1, #0x130
   86984:	52801ac2 	mov	w2, #0xd6                  	// #214
   86988:	94002386 	bl	8f7a0 <assertion_failed>
   8698c:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86990:	910b0021 	add	x1, x1, #0x2c0
   86994:	91062020 	add	x0, x1, #0x188
   86998:	52801b02 	mov	w2, #0xd8                  	// #216
   8699c:	94002381 	bl	8f7a0 <assertion_failed>
   869a0:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   869a4:	910b0021 	add	x1, x1, #0x2c0
   869a8:	9105e020 	add	x0, x1, #0x178
   869ac:	52801b62 	mov	w2, #0xdb                  	// #219
   869b0:	9400237c 	bl	8f7a0 <assertion_failed>
   869b4:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   869b8:	910b0021 	add	x1, x1, #0x2c0
   869bc:	91022020 	add	x0, x1, #0x88
   869c0:	52801a22 	mov	w2, #0xd1                  	// #209
   869c4:	94002377 	bl	8f7a0 <assertion_failed>
   869c8:	d503201f 	nop
   869cc:	d503201f 	nop

00000000000869d0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)>:
   869d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   869d4:	910003fd 	mov	x29, sp
   869d8:	a90153f3 	stp	x19, x20, [sp, #16]
   869dc:	aa0003f3 	mov	x19, x0
   869e0:	b9401400 	ldr	w0, [x0, #20]
   869e4:	f90013f5 	str	x21, [sp, #32]
   869e8:	7100001f 	cmp	w0, #0x0
   869ec:	51000800 	sub	w0, w0, #0x2
   869f0:	7a411800 	ccmp	w0, #0x1, #0x0, ne	// ne = any
   869f4:	540007e8 	b.hi	86af0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x120>  // b.pmore
   869f8:	f9401660 	ldr	x0, [x19, #40]
   869fc:	b4000520 	cbz	x0, 86aa0 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xd0>
   86a00:	b9403e60 	ldr	w0, [x19, #60]
   86a04:	7100181f 	cmp	w0, #0x6
   86a08:	54000561 	b.ne	86ab4 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xe4>  // b.any
   86a0c:	7100143f 	cmp	w1, #0x5
   86a10:	540005cc 	b.gt	86ac8 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xf8>
   86a14:	b9404260 	ldr	w0, [x19, #64]
   86a18:	6b01001f 	cmp	w0, w1
   86a1c:	54000600 	b.eq	86adc <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x10c>  // b.none
   86a20:	b9400e62 	ldr	w2, [x19, #12]
   86a24:	0b010434 	add	w20, w1, w1, lsl #1
   86a28:	52800983 	mov	w3, #0x4c                  	// #76
   86a2c:	72bfc403 	movk	w3, #0xfe20, lsl #16
   86a30:	90000175 	adrp	x21, b2000 <appendBuf+0xa0>
   86a34:	b9003e61 	str	w1, [x19, #60]
   86a38:	b94382a0 	ldr	w0, [x21, #896]
   86a3c:	0b030041 	add	w1, w2, w3
   86a40:	0b140834 	add	w20, w1, w20, lsl #2
   86a44:	350001e0 	cbnz	w0, 86a80 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xb0>
   86a48:	b9401261 	ldr	w1, [x19, #16]
   86a4c:	b9400280 	ldr	w0, [x20]
   86a50:	2a010000 	orr	w0, w0, w1
   86a54:	b9000280 	str	w0, [x20]
   86a58:	b94382a0 	ldr	w0, [x21, #896]
   86a5c:	350000a0 	cbnz	w0, 86a70 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa0>
   86a60:	a94153f3 	ldp	x19, x20, [sp, #16]
   86a64:	f94013f5 	ldr	x21, [sp, #32]
   86a68:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86a6c:	d65f03c0 	ret
   86a70:	a94153f3 	ldp	x19, x20, [sp, #16]
   86a74:	f94013f5 	ldr	x21, [sp, #32]
   86a78:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86a7c:	14001d19 	b	8dee0 <LeaveCritical>
   86a80:	94001ce8 	bl	8de20 <EnterCritical>
   86a84:	b9401261 	ldr	w1, [x19, #16]
   86a88:	b9400280 	ldr	w0, [x20]
   86a8c:	2a010000 	orr	w0, w0, w1
   86a90:	b9000280 	str	w0, [x20]
   86a94:	b94382a0 	ldr	w0, [x21, #896]
   86a98:	34fffe40 	cbz	w0, 86a60 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0x90>
   86a9c:	17fffff5 	b	86a70 <CGPIOPin::EnableInterrupt(TGPIOInterrupt)+0xa0>
   86aa0:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86aa4:	910b0021 	add	x1, x1, #0x2c0
   86aa8:	91062020 	add	x0, x1, #0x188
   86aac:	52801c82 	mov	w2, #0xe4                  	// #228
   86ab0:	9400233c 	bl	8f7a0 <assertion_failed>
   86ab4:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86ab8:	910b0021 	add	x1, x1, #0x2c0
   86abc:	91042020 	add	x0, x1, #0x108
   86ac0:	52801cc2 	mov	w2, #0xe6                  	// #230
   86ac4:	94002337 	bl	8f7a0 <assertion_failed>
   86ac8:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86acc:	910b0021 	add	x1, x1, #0x2c0
   86ad0:	91066020 	add	x0, x1, #0x198
   86ad4:	52801ce2 	mov	w2, #0xe7                  	// #231
   86ad8:	94002332 	bl	8f7a0 <assertion_failed>
   86adc:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86ae0:	910b0021 	add	x1, x1, #0x2c0
   86ae4:	91070020 	add	x0, x1, #0x1c0
   86ae8:	52801d02 	mov	w2, #0xe8                  	// #232
   86aec:	9400232d 	bl	8f7a0 <assertion_failed>
   86af0:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86af4:	910b0021 	add	x1, x1, #0x2c0
   86af8:	91022020 	add	x0, x1, #0x88
   86afc:	52801c22 	mov	w2, #0xe1                  	// #225
   86b00:	94002328 	bl	8f7a0 <assertion_failed>
   86b04:	d503201f 	nop
   86b08:	d503201f 	nop
   86b0c:	d503201f 	nop

0000000000086b10 <CGPIOPin::DisableInterrupt()>:
   86b10:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86b14:	910003fd 	mov	x29, sp
   86b18:	a90153f3 	stp	x19, x20, [sp, #16]
   86b1c:	aa0003f4 	mov	x20, x0
   86b20:	b9401400 	ldr	w0, [x0, #20]
   86b24:	f90013f5 	str	x21, [sp, #32]
   86b28:	7100001f 	cmp	w0, #0x0
   86b2c:	51000800 	sub	w0, w0, #0x2
   86b30:	7a411800 	ccmp	w0, #0x1, #0x0, ne	// ne = any
   86b34:	54000588 	b.hi	86be4 <CGPIOPin::DisableInterrupt()+0xd4>  // b.pmore
   86b38:	b9403e81 	ldr	w1, [x20, #60]
   86b3c:	7100143f 	cmp	w1, #0x5
   86b40:	5400048c 	b.gt	86bd0 <CGPIOPin::DisableInterrupt()+0xc0>
   86b44:	b9400e82 	ldr	w2, [x20, #12]
   86b48:	0b010421 	add	w1, w1, w1, lsl #1
   86b4c:	52800983 	mov	w3, #0x4c                  	// #76
   86b50:	72bfc403 	movk	w3, #0xfe20, lsl #16
   86b54:	90000175 	adrp	x21, b2000 <appendBuf+0xa0>
   86b58:	b94382a0 	ldr	w0, [x21, #896]
   86b5c:	0b030042 	add	w2, w2, w3
   86b60:	0b010853 	add	w19, w2, w1, lsl #2
   86b64:	350001a0 	cbnz	w0, 86b98 <CGPIOPin::DisableInterrupt()+0x88>
   86b68:	b9400261 	ldr	w1, [x19]
   86b6c:	b9401280 	ldr	w0, [x20, #16]
   86b70:	0a200020 	bic	w0, w1, w0
   86b74:	b9000260 	str	w0, [x19]
   86b78:	b94382a0 	ldr	w0, [x21, #896]
   86b7c:	350001c0 	cbnz	w0, 86bb4 <CGPIOPin::DisableInterrupt()+0xa4>
   86b80:	528000c0 	mov	w0, #0x6                   	// #6
   86b84:	f94013f5 	ldr	x21, [sp, #32]
   86b88:	b9003e80 	str	w0, [x20, #60]
   86b8c:	a94153f3 	ldp	x19, x20, [sp, #16]
   86b90:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86b94:	d65f03c0 	ret
   86b98:	94001ca2 	bl	8de20 <EnterCritical>
   86b9c:	b9400261 	ldr	w1, [x19]
   86ba0:	b9401280 	ldr	w0, [x20, #16]
   86ba4:	0a200020 	bic	w0, w1, w0
   86ba8:	b9000260 	str	w0, [x19]
   86bac:	b94382a0 	ldr	w0, [x21, #896]
   86bb0:	34fffe80 	cbz	w0, 86b80 <CGPIOPin::DisableInterrupt()+0x70>
   86bb4:	94001ccb 	bl	8dee0 <LeaveCritical>
   86bb8:	528000c0 	mov	w0, #0x6                   	// #6
   86bbc:	f94013f5 	ldr	x21, [sp, #32]
   86bc0:	b9003e80 	str	w0, [x20, #60]
   86bc4:	a94153f3 	ldp	x19, x20, [sp, #16]
   86bc8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86bcc:	d65f03c0 	ret
   86bd0:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86bd4:	910b0021 	add	x1, x1, #0x2c0
   86bd8:	91078020 	add	x0, x1, #0x1e0
   86bdc:	52801f62 	mov	w2, #0xfb                  	// #251
   86be0:	940022f0 	bl	8f7a0 <assertion_failed>
   86be4:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86be8:	910b0021 	add	x1, x1, #0x2c0
   86bec:	91022020 	add	x0, x1, #0x88
   86bf0:	52801ee2 	mov	w2, #0xf7                  	// #247
   86bf4:	940022eb 	bl	8f7a0 <assertion_failed>
   86bf8:	d503201f 	nop
   86bfc:	d503201f 	nop

0000000000086c00 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)>:
   86c00:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86c04:	910003fd 	mov	x29, sp
   86c08:	a90153f3 	stp	x19, x20, [sp, #16]
   86c0c:	aa0003f3 	mov	x19, x0
   86c10:	b9401400 	ldr	w0, [x0, #20]
   86c14:	f90013f5 	str	x21, [sp, #32]
   86c18:	7100001f 	cmp	w0, #0x0
   86c1c:	51000800 	sub	w0, w0, #0x2
   86c20:	7a411800 	ccmp	w0, #0x1, #0x0, ne	// ne = any
   86c24:	540007e8 	b.hi	86d20 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x120>  // b.pmore
   86c28:	f9401660 	ldr	x0, [x19, #40]
   86c2c:	b4000520 	cbz	x0, 86cd0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xd0>
   86c30:	b9404260 	ldr	w0, [x19, #64]
   86c34:	7100181f 	cmp	w0, #0x6
   86c38:	54000561 	b.ne	86ce4 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xe4>  // b.any
   86c3c:	7100143f 	cmp	w1, #0x5
   86c40:	540005cc 	b.gt	86cf8 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xf8>
   86c44:	b9403e60 	ldr	w0, [x19, #60]
   86c48:	6b01001f 	cmp	w0, w1
   86c4c:	54000600 	b.eq	86d0c <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x10c>  // b.none
   86c50:	b9400e62 	ldr	w2, [x19, #12]
   86c54:	0b010434 	add	w20, w1, w1, lsl #1
   86c58:	52800983 	mov	w3, #0x4c                  	// #76
   86c5c:	72bfc403 	movk	w3, #0xfe20, lsl #16
   86c60:	90000175 	adrp	x21, b2000 <appendBuf+0xa0>
   86c64:	b9004261 	str	w1, [x19, #64]
   86c68:	b94382a0 	ldr	w0, [x21, #896]
   86c6c:	0b030041 	add	w1, w2, w3
   86c70:	0b140834 	add	w20, w1, w20, lsl #2
   86c74:	350001e0 	cbnz	w0, 86cb0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xb0>
   86c78:	b9401261 	ldr	w1, [x19, #16]
   86c7c:	b9400280 	ldr	w0, [x20]
   86c80:	2a010000 	orr	w0, w0, w1
   86c84:	b9000280 	str	w0, [x20]
   86c88:	b94382a0 	ldr	w0, [x21, #896]
   86c8c:	350000a0 	cbnz	w0, 86ca0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa0>
   86c90:	a94153f3 	ldp	x19, x20, [sp, #16]
   86c94:	f94013f5 	ldr	x21, [sp, #32]
   86c98:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86c9c:	d65f03c0 	ret
   86ca0:	a94153f3 	ldp	x19, x20, [sp, #16]
   86ca4:	f94013f5 	ldr	x21, [sp, #32]
   86ca8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86cac:	14001c8d 	b	8dee0 <LeaveCritical>
   86cb0:	94001c5c 	bl	8de20 <EnterCritical>
   86cb4:	b9401261 	ldr	w1, [x19, #16]
   86cb8:	b9400280 	ldr	w0, [x20]
   86cbc:	2a010000 	orr	w0, w0, w1
   86cc0:	b9000280 	str	w0, [x20]
   86cc4:	b94382a0 	ldr	w0, [x21, #896]
   86cc8:	34fffe40 	cbz	w0, 86c90 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0x90>
   86ccc:	17fffff5 	b	86ca0 <CGPIOPin::EnableInterrupt2(TGPIOInterrupt)+0xa0>
   86cd0:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86cd4:	910b0021 	add	x1, x1, #0x2c0
   86cd8:	91062020 	add	x0, x1, #0x188
   86cdc:	528021a2 	mov	w2, #0x10d                 	// #269
   86ce0:	940022b0 	bl	8f7a0 <assertion_failed>
   86ce4:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86ce8:	910b0021 	add	x1, x1, #0x2c0
   86cec:	9104c020 	add	x0, x1, #0x130
   86cf0:	528021e2 	mov	w2, #0x10f                 	// #271
   86cf4:	940022ab 	bl	8f7a0 <assertion_failed>
   86cf8:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86cfc:	910b0021 	add	x1, x1, #0x2c0
   86d00:	91066020 	add	x0, x1, #0x198
   86d04:	52802202 	mov	w2, #0x110                 	// #272
   86d08:	940022a6 	bl	8f7a0 <assertion_failed>
   86d0c:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86d10:	910b0021 	add	x1, x1, #0x2c0
   86d14:	91082020 	add	x0, x1, #0x208
   86d18:	52802222 	mov	w2, #0x111                 	// #273
   86d1c:	940022a1 	bl	8f7a0 <assertion_failed>
   86d20:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86d24:	910b0021 	add	x1, x1, #0x2c0
   86d28:	91022020 	add	x0, x1, #0x88
   86d2c:	52802142 	mov	w2, #0x10a                 	// #266
   86d30:	9400229c 	bl	8f7a0 <assertion_failed>
   86d34:	d503201f 	nop
   86d38:	d503201f 	nop
   86d3c:	d503201f 	nop

0000000000086d40 <CGPIOPin::DisableInterrupt2()>:
   86d40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86d44:	910003fd 	mov	x29, sp
   86d48:	a90153f3 	stp	x19, x20, [sp, #16]
   86d4c:	aa0003f4 	mov	x20, x0
   86d50:	b9401400 	ldr	w0, [x0, #20]
   86d54:	f90013f5 	str	x21, [sp, #32]
   86d58:	7100001f 	cmp	w0, #0x0
   86d5c:	51000800 	sub	w0, w0, #0x2
   86d60:	7a411800 	ccmp	w0, #0x1, #0x0, ne	// ne = any
   86d64:	54000588 	b.hi	86e14 <CGPIOPin::DisableInterrupt2()+0xd4>  // b.pmore
   86d68:	b9404281 	ldr	w1, [x20, #64]
   86d6c:	7100143f 	cmp	w1, #0x5
   86d70:	5400048c 	b.gt	86e00 <CGPIOPin::DisableInterrupt2()+0xc0>
   86d74:	b9400e82 	ldr	w2, [x20, #12]
   86d78:	0b010421 	add	w1, w1, w1, lsl #1
   86d7c:	52800983 	mov	w3, #0x4c                  	// #76
   86d80:	72bfc403 	movk	w3, #0xfe20, lsl #16
   86d84:	90000175 	adrp	x21, b2000 <appendBuf+0xa0>
   86d88:	b94382a0 	ldr	w0, [x21, #896]
   86d8c:	0b030042 	add	w2, w2, w3
   86d90:	0b010853 	add	w19, w2, w1, lsl #2
   86d94:	350001a0 	cbnz	w0, 86dc8 <CGPIOPin::DisableInterrupt2()+0x88>
   86d98:	b9400261 	ldr	w1, [x19]
   86d9c:	b9401280 	ldr	w0, [x20, #16]
   86da0:	0a200020 	bic	w0, w1, w0
   86da4:	b9000260 	str	w0, [x19]
   86da8:	b94382a0 	ldr	w0, [x21, #896]
   86dac:	350001c0 	cbnz	w0, 86de4 <CGPIOPin::DisableInterrupt2()+0xa4>
   86db0:	528000c0 	mov	w0, #0x6                   	// #6
   86db4:	f94013f5 	ldr	x21, [sp, #32]
   86db8:	b9004280 	str	w0, [x20, #64]
   86dbc:	a94153f3 	ldp	x19, x20, [sp, #16]
   86dc0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86dc4:	d65f03c0 	ret
   86dc8:	94001c16 	bl	8de20 <EnterCritical>
   86dcc:	b9400261 	ldr	w1, [x19]
   86dd0:	b9401280 	ldr	w0, [x20, #16]
   86dd4:	0a200020 	bic	w0, w1, w0
   86dd8:	b9000260 	str	w0, [x19]
   86ddc:	b94382a0 	ldr	w0, [x21, #896]
   86de0:	34fffe80 	cbz	w0, 86db0 <CGPIOPin::DisableInterrupt2()+0x70>
   86de4:	94001c3f 	bl	8dee0 <LeaveCritical>
   86de8:	528000c0 	mov	w0, #0x6                   	// #6
   86dec:	f94013f5 	ldr	x21, [sp, #32]
   86df0:	b9004280 	str	w0, [x20, #64]
   86df4:	a94153f3 	ldp	x19, x20, [sp, #16]
   86df8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86dfc:	d65f03c0 	ret
   86e00:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86e04:	910b0021 	add	x1, x1, #0x2c0
   86e08:	9108a020 	add	x0, x1, #0x228
   86e0c:	52802482 	mov	w2, #0x124                 	// #292
   86e10:	94002264 	bl	8f7a0 <assertion_failed>
   86e14:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86e18:	910b0021 	add	x1, x1, #0x2c0
   86e1c:	91022020 	add	x0, x1, #0x88
   86e20:	52802402 	mov	w2, #0x120                 	// #288
   86e24:	9400225f 	bl	8f7a0 <assertion_failed>
   86e28:	d503201f 	nop
   86e2c:	d503201f 	nop

0000000000086e30 <CGPIOPin::AcknowledgeInterrupt()>:
   86e30:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   86e34:	910003fd 	mov	x29, sp
   86e38:	f9401401 	ldr	x1, [x0, #40]
   86e3c:	b4000141 	cbz	x1, 86e64 <CGPIOPin::AcknowledgeInterrupt()+0x34>
   86e40:	3940e001 	ldrb	w1, [x0, #56]
   86e44:	370001a1 	tbnz	w1, #0, 86e78 <CGPIOPin::AcknowledgeInterrupt()+0x48>
   86e48:	29418801 	ldp	w1, w2, [x0, #12]
   86e4c:	52800803 	mov	w3, #0x40                  	// #64
   86e50:	72bfc403 	movk	w3, #0xfe20, lsl #16
   86e54:	0b030020 	add	w0, w1, w3
   86e58:	b9000002 	str	w2, [x0]
   86e5c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   86e60:	d65f03c0 	ret
   86e64:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86e68:	910b0021 	add	x1, x1, #0x2c0
   86e6c:	91062020 	add	x0, x1, #0x188
   86e70:	52802662 	mov	w2, #0x133                 	// #307
   86e74:	9400224b 	bl	8f7a0 <assertion_failed>
   86e78:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86e7c:	910b0021 	add	x1, x1, #0x2c0
   86e80:	91094020 	add	x0, x1, #0x250
   86e84:	52802682 	mov	w2, #0x134                 	// #308
   86e88:	94002246 	bl	8f7a0 <assertion_failed>
   86e8c:	d503201f 	nop

0000000000086e90 <CGPIOPin::WriteAll(unsigned int, unsigned int)>:
   86e90:	6a200022 	bics	w2, w1, w0
   86e94:	54000080 	b.eq	86ea4 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x14>  // b.none
   86e98:	d2800503 	mov	x3, #0x28                  	// #40
   86e9c:	f2bfc403 	movk	x3, #0xfe20, lsl #16
   86ea0:	b9000062 	str	w2, [x3]
   86ea4:	6a010000 	ands	w0, w0, w1
   86ea8:	54000080 	b.eq	86eb8 <CGPIOPin::WriteAll(unsigned int, unsigned int)+0x28>  // b.none
   86eac:	d2800381 	mov	x1, #0x1c                  	// #28
   86eb0:	f2bfc401 	movk	x1, #0xfe20, lsl #16
   86eb4:	b9000020 	str	w0, [x1]
   86eb8:	d65f03c0 	ret
   86ebc:	d503201f 	nop

0000000000086ec0 <CGPIOPin::ReadAll()>:
   86ec0:	d2800680 	mov	x0, #0x34                  	// #52
   86ec4:	f2bfc400 	movk	x0, #0xfe20, lsl #16
   86ec8:	b9400000 	ldr	w0, [x0]
   86ecc:	d65f03c0 	ret

0000000000086ed0 <CGPIOPin::SetPullMode(TGPIOPullMode)>:
   86ed0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86ed4:	910003fd 	mov	x29, sp
   86ed8:	f90013f5 	str	x21, [sp, #32]
   86edc:	90000175 	adrp	x21, b2000 <appendBuf+0xa0>
   86ee0:	b94382a2 	ldr	w2, [x21, #896]
   86ee4:	a90153f3 	stp	x19, x20, [sp, #16]
   86ee8:	aa0003f4 	mov	x20, x0
   86eec:	2a0103f3 	mov	w19, w1
   86ef0:	35000382 	cbnz	w2, 86f60 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x90>
   86ef4:	b9400a80 	ldr	w0, [x20, #8]
   86ef8:	7100d41f 	cmp	w0, #0x35
   86efc:	540003c8 	b.hi	86f74 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xa4>  // b.pmore
   86f00:	52800722 	mov	w2, #0x39                  	// #57
   86f04:	72a7f102 	movk	w2, #0x3f88, lsl #16
   86f08:	0b401042 	add	w2, w2, w0, lsr #4
   86f0c:	71000a7f 	cmp	w19, #0x2
   86f10:	531f0c00 	ubfiz	w0, w0, #1, #4
   86f14:	531e7442 	lsl	w2, w2, #2
   86f18:	5400040c 	b.gt	86f98 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xc8>
   86f1c:	90000064 	adrp	x4, 92000 <uart_putHexByte::hexDigits>
   86f20:	910b0084 	add	x4, x4, #0x2c0
   86f24:	b9400045 	ldr	w5, [x2]
   86f28:	9109c084 	add	x4, x4, #0x270
   86f2c:	52800063 	mov	w3, #0x3                   	// #3
   86f30:	b873d881 	ldr	w1, [x4, w19, sxtw #2]
   86f34:	1ac02063 	lsl	w3, w3, w0
   86f38:	0a2300a3 	bic	w3, w5, w3
   86f3c:	1ac02020 	lsl	w0, w1, w0
   86f40:	2a030000 	orr	w0, w0, w3
   86f44:	b9000040 	str	w0, [x2]
   86f48:	b94382a0 	ldr	w0, [x21, #896]
   86f4c:	350001e0 	cbnz	w0, 86f88 <CGPIOPin::SetPullMode(TGPIOPullMode)+0xb8>
   86f50:	a94153f3 	ldp	x19, x20, [sp, #16]
   86f54:	f94013f5 	ldr	x21, [sp, #32]
   86f58:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86f5c:	d65f03c0 	ret
   86f60:	2a0203e0 	mov	w0, w2
   86f64:	94001baf 	bl	8de20 <EnterCritical>
   86f68:	b9400a80 	ldr	w0, [x20, #8]
   86f6c:	7100d41f 	cmp	w0, #0x35
   86f70:	54fffc89 	b.ls	86f00 <CGPIOPin::SetPullMode(TGPIOPullMode)+0x30>  // b.plast
   86f74:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86f78:	910b0021 	add	x1, x1, #0x2c0
   86f7c:	9100a020 	add	x0, x1, #0x28
   86f80:	52802da2 	mov	w2, #0x16d                 	// #365
   86f84:	94002207 	bl	8f7a0 <assertion_failed>
   86f88:	a94153f3 	ldp	x19, x20, [sp, #16]
   86f8c:	f94013f5 	ldr	x21, [sp, #32]
   86f90:	a8c37bfd 	ldp	x29, x30, [sp], #48
   86f94:	14001bd3 	b	8dee0 <LeaveCritical>
   86f98:	90000061 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   86f9c:	910b0021 	add	x1, x1, #0x2c0
   86fa0:	91098020 	add	x0, x1, #0x260
   86fa4:	52802e22 	mov	w2, #0x171                 	// #369
   86fa8:	940021fe 	bl	8f7a0 <assertion_failed>
   86fac:	d503201f 	nop

0000000000086fb0 <CGPIOPin::SetAlternateFunction(unsigned int)>:
   86fb0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   86fb4:	910003fd 	mov	x29, sp
   86fb8:	b9400803 	ldr	w3, [x0, #8]
   86fbc:	a90153f3 	stp	x19, x20, [sp, #16]
   86fc0:	a9025bf5 	stp	x21, x22, [sp, #32]
   86fc4:	7100d47f 	cmp	w3, #0x35
   86fc8:	54000508 	b.hi	87068 <CGPIOPin::SetAlternateFunction(unsigned int)+0xb8>  // b.pmore
   86fcc:	529999a0 	mov	w0, #0xcccd                	// #52429
   86fd0:	72b99980 	movk	w0, #0xcccc, lsl #16
   86fd4:	2a0103f5 	mov	w21, w1
   86fd8:	52a7f101 	mov	w1, #0x3f880000            	// #1065877504
   86fdc:	9ba07c60 	umull	x0, w3, w0
   86fe0:	710016bf 	cmp	w21, #0x5
   86fe4:	d363fc00 	lsr	x0, x0, #35
   86fe8:	0b000802 	add	w2, w0, w0, lsl #2
   86fec:	0b010000 	add	w0, w0, w1
   86ff0:	531e7413 	lsl	w19, w0, #2
   86ff4:	4b020460 	sub	w0, w3, w2, lsl #1
   86ff8:	0b000414 	add	w20, w0, w0, lsl #1
   86ffc:	54000408 	b.hi	8707c <CGPIOPin::SetAlternateFunction(unsigned int)+0xcc>  // b.pmore
   87000:	f0000156 	adrp	x22, b2000 <appendBuf+0xa0>
   87004:	b94382c0 	ldr	w0, [x22, #896]
   87008:	35000240 	cbnz	w0, 87050 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa0>
   8700c:	f0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   87010:	910b0000 	add	x0, x0, #0x2c0
   87014:	b9400263 	ldr	w3, [x19]
   87018:	910a4000 	add	x0, x0, #0x290
   8701c:	528000e2 	mov	w2, #0x7                   	// #7
   87020:	b8755800 	ldr	w0, [x0, w21, uxtw #2]
   87024:	1ad42041 	lsl	w1, w2, w20
   87028:	0a210061 	bic	w1, w3, w1
   8702c:	1ad42000 	lsl	w0, w0, w20
   87030:	2a010000 	orr	w0, w0, w1
   87034:	b9000260 	str	w0, [x19]
   87038:	b94382c0 	ldr	w0, [x22, #896]
   8703c:	350000e0 	cbnz	w0, 87058 <CGPIOPin::SetAlternateFunction(unsigned int)+0xa8>
   87040:	a94153f3 	ldp	x19, x20, [sp, #16]
   87044:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87048:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8704c:	d65f03c0 	ret
   87050:	94001b74 	bl	8de20 <EnterCritical>
   87054:	17ffffee 	b	8700c <CGPIOPin::SetAlternateFunction(unsigned int)+0x5c>
   87058:	a94153f3 	ldp	x19, x20, [sp, #16]
   8705c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87060:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87064:	14001b9f 	b	8dee0 <LeaveCritical>
   87068:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8706c:	910b0021 	add	x1, x1, #0x2c0
   87070:	9100a020 	add	x0, x1, #0x28
   87074:	52803022 	mov	w2, #0x181                 	// #385
   87078:	940021ca 	bl	8f7a0 <assertion_failed>
   8707c:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87080:	910b0021 	add	x1, x1, #0x2c0
   87084:	910a0020 	add	x0, x1, #0x280
   87088:	528030a2 	mov	w2, #0x185                 	// #389
   8708c:	940021c5 	bl	8f7a0 <assertion_failed>

0000000000087090 <CGPIOPin::SetMode(TGPIOMode, bool)>:
   87090:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   87094:	910003fd 	mov	x29, sp
   87098:	7100243f 	cmp	w1, #0x9
   8709c:	a90153f3 	stp	x19, x20, [sp, #16]
   870a0:	a9025bf5 	stp	x21, x22, [sp, #32]
   870a4:	54000b0c 	b.gt	87204 <CGPIOPin::SetMode(TGPIOMode, bool)+0x174>
   870a8:	51001023 	sub	w3, w1, #0x4
   870ac:	12001c56 	and	w22, w2, #0xff
   870b0:	7100147f 	cmp	w3, #0x5
   870b4:	b9001401 	str	w1, [x0, #20]
   870b8:	2a0103e4 	mov	w4, w1
   870bc:	aa0003f4 	mov	x20, x0
   870c0:	54000669 	b.ls	8718c <CGPIOPin::SetMode(TGPIOMode, bool)+0xfc>  // b.plast
   870c4:	710002df 	cmp	w22, #0x0
   870c8:	f9001bf7 	str	x23, [sp, #48]
   870cc:	7a411820 	ccmp	w1, #0x1, #0x0, ne	// ne = any
   870d0:	54000a60 	b.eq	8721c <CGPIOPin::SetMode(TGPIOMode, bool)+0x18c>  // b.none
   870d4:	b9400a83 	ldr	w3, [x20, #8]
   870d8:	7100d47f 	cmp	w3, #0x35
   870dc:	54000a68 	b.hi	87228 <CGPIOPin::SetMode(TGPIOMode, bool)+0x198>  // b.pmore
   870e0:	529999a1 	mov	w1, #0xcccd                	// #52429
   870e4:	72b99981 	movk	w1, #0xcccc, lsl #16
   870e8:	52a7f102 	mov	w2, #0x3f880000            	// #1065877504
   870ec:	f0000157 	adrp	x23, b2000 <appendBuf+0xa0>
   870f0:	9ba17c61 	umull	x1, w3, w1
   870f4:	b94382e0 	ldr	w0, [x23, #896]
   870f8:	d363fc21 	lsr	x1, x1, #35
   870fc:	0b010835 	add	w21, w1, w1, lsl #2
   87100:	0b020021 	add	w1, w1, w2
   87104:	531e7433 	lsl	w19, w1, #2
   87108:	4b150475 	sub	w21, w3, w21, lsl #1
   8710c:	0b1506b5 	add	w21, w21, w21, lsl #1
   87110:	35000520 	cbnz	w0, 871b4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x124>
   87114:	b9401680 	ldr	w0, [x20, #20]
   87118:	528000e1 	mov	w1, #0x7                   	// #7
   8711c:	1ad52021 	lsl	w1, w1, w21
   87120:	b9400262 	ldr	w2, [x19]
   87124:	7100041f 	cmp	w0, #0x1
   87128:	1a9f17e0 	cset	w0, eq	// eq = none
   8712c:	1ad52000 	lsl	w0, w0, w21
   87130:	0a210041 	bic	w1, w2, w1
   87134:	2a010000 	orr	w0, w0, w1
   87138:	b9000260 	str	w0, [x19]
   8713c:	b94382e0 	ldr	w0, [x23, #896]
   87140:	35000340 	cbnz	w0, 871a8 <CGPIOPin::SetMode(TGPIOMode, bool)+0x118>
   87144:	360001b6 	tbz	w22, #0, 87178 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe8>
   87148:	b9401681 	ldr	w1, [x20, #20]
   8714c:	7100083f 	cmp	w1, #0x2
   87150:	540007c0 	b.eq	87248 <CGPIOPin::SetMode(TGPIOMode, bool)+0x1b8>  // b.none
   87154:	54000348 	b.hi	871bc <CGPIOPin::SetMode(TGPIOMode, bool)+0x12c>  // b.pmore
   87158:	34000721 	cbz	w1, 8723c <CGPIOPin::SetMode(TGPIOMode, bool)+0x1ac>
   8715c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87160:	aa1403e0 	mov	x0, x20
   87164:	52800001 	mov	w1, #0x0                   	// #0
   87168:	a94153f3 	ldp	x19, x20, [sp, #16]
   8716c:	f9401bf7 	ldr	x23, [sp, #48]
   87170:	a8c47bfd 	ldp	x29, x30, [sp], #64
   87174:	17fffd3f 	b	86670 <CGPIOPin::Write(unsigned int)>
   87178:	a94153f3 	ldp	x19, x20, [sp, #16]
   8717c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87180:	f9401bf7 	ldr	x23, [sp, #48]
   87184:	a8c47bfd 	ldp	x29, x30, [sp], #64
   87188:	d65f03c0 	ret
   8718c:	370002b6 	tbnz	w22, #0, 871e0 <CGPIOPin::SetMode(TGPIOMode, bool)+0x150>
   87190:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87194:	aa1403e0 	mov	x0, x20
   87198:	51001081 	sub	w1, w4, #0x4
   8719c:	a94153f3 	ldp	x19, x20, [sp, #16]
   871a0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   871a4:	17ffff83 	b	86fb0 <CGPIOPin::SetAlternateFunction(unsigned int)>
   871a8:	94001b4e 	bl	8dee0 <LeaveCritical>
   871ac:	3607fe76 	tbz	w22, #0, 87178 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe8>
   871b0:	17ffffe6 	b	87148 <CGPIOPin::SetMode(TGPIOMode, bool)+0xb8>
   871b4:	94001b1b 	bl	8de20 <EnterCritical>
   871b8:	17ffffd7 	b	87114 <CGPIOPin::SetMode(TGPIOMode, bool)+0x84>
   871bc:	71000c3f 	cmp	w1, #0x3
   871c0:	54fffdc1 	b.ne	87178 <CGPIOPin::SetMode(TGPIOMode, bool)+0xe8>  // b.any
   871c4:	aa1403e0 	mov	x0, x20
   871c8:	52800021 	mov	w1, #0x1                   	// #1
   871cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   871d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   871d4:	f9401bf7 	ldr	x23, [sp, #48]
   871d8:	a8c47bfd 	ldp	x29, x30, [sp], #64
   871dc:	17ffff3d 	b	86ed0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   871e0:	52800001 	mov	w1, #0x0                   	// #0
   871e4:	97ffff3b 	bl	86ed0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   871e8:	b9401684 	ldr	w4, [x20, #20]
   871ec:	aa1403e0 	mov	x0, x20
   871f0:	a94153f3 	ldp	x19, x20, [sp, #16]
   871f4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   871f8:	51001081 	sub	w1, w4, #0x4
   871fc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   87200:	17ffff6c 	b	86fb0 <CGPIOPin::SetAlternateFunction(unsigned int)>
   87204:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87208:	910b0021 	add	x1, x1, #0x2c0
   8720c:	f9001bf7 	str	x23, [sp, #48]
   87210:	910aa020 	add	x0, x1, #0x2a8
   87214:	528009e2 	mov	w2, #0x4f                  	// #79
   87218:	94002162 	bl	8f7a0 <assertion_failed>
   8721c:	52800001 	mov	w1, #0x0                   	// #0
   87220:	97ffff2c 	bl	86ed0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   87224:	17ffffac 	b	870d4 <CGPIOPin::SetMode(TGPIOMode, bool)+0x44>
   87228:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8722c:	910b0021 	add	x1, x1, #0x2c0
   87230:	9100a020 	add	x0, x1, #0x28
   87234:	52800d02 	mov	w2, #0x68                  	// #104
   87238:	9400215a 	bl	8f7a0 <assertion_failed>
   8723c:	aa1403e0 	mov	x0, x20
   87240:	52800001 	mov	w1, #0x0                   	// #0
   87244:	17ffffe2 	b	871cc <CGPIOPin::SetMode(TGPIOMode, bool)+0x13c>
   87248:	aa1403e0 	mov	x0, x20
   8724c:	17ffffe0 	b	871cc <CGPIOPin::SetMode(TGPIOMode, bool)+0x13c>

0000000000087250 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)>:
   87250:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87254:	910003fd 	mov	x29, sp
   87258:	52800144 	mov	w4, #0xa                   	// #10
   8725c:	7100d43f 	cmp	w1, #0x35
   87260:	a90153f3 	stp	x19, x20, [sp, #16]
   87264:	aa0003f3 	mov	x19, x0
   87268:	2a0103f4 	mov	w20, w1
   8726c:	f0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   87270:	910ac000 	add	x0, x0, #0x2b0
   87274:	f90013f5 	str	x21, [sp, #32]
   87278:	2a0203f5 	mov	w21, w2
   8727c:	b9000a61 	str	w1, [x19, #8]
   87280:	b21f07e1 	mov	x1, #0x600000006           	// #25769803782
   87284:	f9000260 	str	x0, [x19]
   87288:	b9001664 	str	w4, [x19, #20]
   8728c:	a9027e63 	stp	x3, xzr, [x19, #32]
   87290:	f803c261 	stur	x1, [x19, #60]
   87294:	54000188 	b.hi	872c4 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x74>  // b.pmore
   87298:	53057e83 	lsr	w3, w20, #5
   8729c:	52800022 	mov	w2, #0x1                   	// #1
   872a0:	1ad42054 	lsl	w20, w2, w20
   872a4:	531e7463 	lsl	w3, w3, #2
   872a8:	2a1503e1 	mov	w1, w21
   872ac:	f94013f5 	ldr	x21, [sp, #32]
   872b0:	aa1303e0 	mov	x0, x19
   872b4:	2901d263 	stp	w3, w20, [x19, #12]
   872b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   872bc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   872c0:	17ffff74 	b	87090 <CGPIOPin::SetMode(TGPIOMode, bool)>
   872c4:	9400078b 	bl	890f0 <CMachineInfo::Get()>
   872c8:	2a1403e1 	mov	w1, w20
   872cc:	94000649 	bl	88bf0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>
   872d0:	7100d41f 	cmp	w0, #0x35
   872d4:	b9000a60 	str	w0, [x19, #8]
   872d8:	2a0003f4 	mov	w20, w0
   872dc:	54fffde9 	b.ls	87298 <CGPIOPin::CGPIOPin(unsigned int, TGPIOMode, CGPIOManager*)+0x48>  // b.plast
   872e0:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   872e4:	910b0021 	add	x1, x1, #0x2c0
   872e8:	9100a020 	add	x0, x1, #0x28
   872ec:	528008e2 	mov	w2, #0x47                  	// #71
   872f0:	9400212c 	bl	8f7a0 <assertion_failed>
   872f4:	d503201f 	nop
   872f8:	d503201f 	nop
   872fc:	d503201f 	nop

0000000000087300 <CGPIOPin::InterruptHandler()>:
   87300:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   87304:	910003fd 	mov	x29, sp
   87308:	b9401401 	ldr	w1, [x0, #20]
   8730c:	7100003f 	cmp	w1, #0x0
   87310:	51000821 	sub	w1, w1, #0x2
   87314:	7a411820 	ccmp	w1, #0x1, #0x0, ne	// ne = any
   87318:	540002e8 	b.hi	87374 <CGPIOPin::InterruptHandler()+0x74>  // b.pmore
   8731c:	b9403c01 	ldr	w1, [x0, #60]
   87320:	7100143f 	cmp	w1, #0x5
   87324:	540000ec 	b.gt	87340 <CGPIOPin::InterruptHandler()+0x40>
   87328:	f9401401 	ldr	x1, [x0, #40]
   8732c:	b40001a1 	cbz	x1, 87360 <CGPIOPin::InterruptHandler()+0x60>
   87330:	f9401800 	ldr	x0, [x0, #48]
   87334:	aa0103f0 	mov	x16, x1
   87338:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8733c:	d61f0200 	br	x16
   87340:	b9404001 	ldr	w1, [x0, #64]
   87344:	7100143f 	cmp	w1, #0x5
   87348:	54ffff0d 	b.le	87328 <CGPIOPin::InterruptHandler()+0x28>
   8734c:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87350:	910b0021 	add	x1, x1, #0x2c0
   87354:	910b0020 	add	x0, x1, #0x2c0
   87358:	528032a2 	mov	w2, #0x195                 	// #405
   8735c:	94002111 	bl	8f7a0 <assertion_failed>
   87360:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87364:	910b0021 	add	x1, x1, #0x2c0
   87368:	91062020 	add	x0, x1, #0x188
   8736c:	52803302 	mov	w2, #0x198                 	// #408
   87370:	9400210c 	bl	8f7a0 <assertion_failed>
   87374:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87378:	910b0021 	add	x1, x1, #0x2c0
   8737c:	91022020 	add	x0, x1, #0x88
   87380:	52803242 	mov	w2, #0x192                 	// #402
   87384:	94002107 	bl	8f7a0 <assertion_failed>
   87388:	d503201f 	nop
   8738c:	d503201f 	nop

0000000000087390 <CGPIOPin::DisableAllInterrupts(unsigned int)>:
   87390:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87394:	910003fd 	mov	x29, sp
   87398:	7100d41f 	cmp	w0, #0x35
   8739c:	a90153f3 	stp	x19, x20, [sp, #16]
   873a0:	f90013f5 	str	x21, [sp, #32]
   873a4:	54000408 	b.hi	87424 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x94>  // b.pmore
   873a8:	52800273 	mov	w19, #0x13                  	// #19
   873ac:	72a7f113 	movk	w19, #0x3f88, lsl #16
   873b0:	0b401673 	add	w19, w19, w0, lsr #5
   873b4:	f0000155 	adrp	x21, b2000 <appendBuf+0xa0>
   873b8:	2a0003e2 	mov	w2, w0
   873bc:	52800021 	mov	w1, #0x1                   	// #1
   873c0:	b94382a0 	ldr	w0, [x21, #896]
   873c4:	1ac22034 	lsl	w20, w1, w2
   873c8:	531e7673 	lsl	w19, w19, #2
   873cc:	35000200 	cbnz	w0, 8740c <CGPIOPin::DisableAllInterrupts(unsigned int)+0x7c>
   873d0:	d2801162 	mov	x2, #0x8b                  	// #139
   873d4:	f2bfc402 	movk	x2, #0xfe20, lsl #16
   873d8:	2a3403e1 	mvn	w1, w20
   873dc:	d503201f 	nop
   873e0:	b9400260 	ldr	w0, [x19]
   873e4:	0a000020 	and	w0, w1, w0
   873e8:	b800c660 	str	w0, [x19], #12
   873ec:	eb02027f 	cmp	x19, x2
   873f0:	54ffff89 	b.ls	873e0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x50>  // b.plast
   873f4:	b94382a0 	ldr	w0, [x21, #896]
   873f8:	350000e0 	cbnz	w0, 87414 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x84>
   873fc:	a94153f3 	ldp	x19, x20, [sp, #16]
   87400:	f94013f5 	ldr	x21, [sp, #32]
   87404:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87408:	d65f03c0 	ret
   8740c:	94001a85 	bl	8de20 <EnterCritical>
   87410:	17fffff0 	b	873d0 <CGPIOPin::DisableAllInterrupts(unsigned int)+0x40>
   87414:	a94153f3 	ldp	x19, x20, [sp, #16]
   87418:	f94013f5 	ldr	x21, [sp, #32]
   8741c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87420:	14001ab0 	b	8dee0 <LeaveCritical>
   87424:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87428:	910b0021 	add	x1, x1, #0x2c0
   8742c:	910c4020 	add	x0, x1, #0x310
   87430:	528033c2 	mov	w2, #0x19e                 	// #414
   87434:	940020db 	bl	8f7a0 <assertion_failed>
	...

0000000000087440 <_GLOBAL__sub_I__ZN8CGPIOPin10s_SpinLockE>:
   87440:	f0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   87444:	52800021 	mov	w1, #0x1                   	// #1
   87448:	b9038001 	str	w1, [x0, #896]
   8744c:	d65f03c0 	ret

0000000000087450 <CKernelOptions::~CKernelOptions()>:
   87450:	f0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   87454:	f901c41f 	str	xzr, [x0, #904]
   87458:	d65f03c0 	ret
   8745c:	d503201f 	nop

0000000000087460 <CKernelOptions::GetWidth() const>:
   87460:	b9481800 	ldr	w0, [x0, #2072]
   87464:	d65f03c0 	ret
   87468:	d503201f 	nop
   8746c:	d503201f 	nop

0000000000087470 <CKernelOptions::GetHeight() const>:
   87470:	b9481c00 	ldr	w0, [x0, #2076]
   87474:	d65f03c0 	ret
   87478:	d503201f 	nop
   8747c:	d503201f 	nop

0000000000087480 <CKernelOptions::GetLogDevice() const>:
   87480:	91208000 	add	x0, x0, #0x820
   87484:	d65f03c0 	ret
   87488:	d503201f 	nop
   8748c:	d503201f 	nop

0000000000087490 <CKernelOptions::GetLogLevel() const>:
   87490:	b9483400 	ldr	w0, [x0, #2100]
   87494:	d65f03c0 	ret
   87498:	d503201f 	nop
   8749c:	d503201f 	nop

00000000000874a0 <CKernelOptions::GetKeyMap() const>:
   874a0:	9120e000 	add	x0, x0, #0x838
   874a4:	d65f03c0 	ret
   874a8:	d503201f 	nop
   874ac:	d503201f 	nop

00000000000874b0 <CKernelOptions::GetUSBPowerDelay() const>:
   874b0:	b9483c00 	ldr	w0, [x0, #2108]
   874b4:	d65f03c0 	ret
   874b8:	d503201f 	nop
   874bc:	d503201f 	nop

00000000000874c0 <CKernelOptions::GetUSBFullSpeed() const>:
   874c0:	39610000 	ldrb	w0, [x0, #2112]
   874c4:	d65f03c0 	ret
   874c8:	d503201f 	nop
   874cc:	d503201f 	nop

00000000000874d0 <CKernelOptions::GetUSBBoost() const>:
   874d0:	39610400 	ldrb	w0, [x0, #2113]
   874d4:	d65f03c0 	ret
   874d8:	d503201f 	nop
   874dc:	d503201f 	nop

00000000000874e0 <CKernelOptions::GetUSBIgnore() const>:
   874e0:	91210800 	add	x0, x0, #0x842
   874e4:	d65f03c0 	ret
   874e8:	d503201f 	nop
   874ec:	d503201f 	nop

00000000000874f0 <CKernelOptions::GetUSBSoundChannels() const>:
   874f0:	91216000 	add	x0, x0, #0x858
   874f4:	d65f03c0 	ret
   874f8:	d503201f 	nop
   874fc:	d503201f 	nop

0000000000087500 <CKernelOptions::GetSoundDevice() const>:
   87500:	91218000 	add	x0, x0, #0x860
   87504:	d65f03c0 	ret
   87508:	d503201f 	nop
   8750c:	d503201f 	nop

0000000000087510 <CKernelOptions::GetSoundOption() const>:
   87510:	b9487400 	ldr	w0, [x0, #2164]
   87514:	d65f03c0 	ret
   87518:	d503201f 	nop
   8751c:	d503201f 	nop

0000000000087520 <CKernelOptions::GetCPUSpeed() const>:
   87520:	b9487800 	ldr	w0, [x0, #2168]
   87524:	d65f03c0 	ret
   87528:	d503201f 	nop
   8752c:	d503201f 	nop

0000000000087530 <CKernelOptions::GetSoCMaxTemp() const>:
   87530:	b9487c00 	ldr	w0, [x0, #2172]
   87534:	d65f03c0 	ret
   87538:	d503201f 	nop
   8753c:	d503201f 	nop

0000000000087540 <CKernelOptions::GetGPIOFanPin() const>:
   87540:	b9488000 	ldr	w0, [x0, #2176]
   87544:	d65f03c0 	ret
   87548:	d503201f 	nop
   8754c:	d503201f 	nop

0000000000087550 <CKernelOptions::GetTouchScreen() const>:
   87550:	39621001 	ldrb	w1, [x0, #2180]
   87554:	91222000 	add	x0, x0, #0x888
   87558:	f240003f 	tst	x1, #0x1
   8755c:	9a9f1000 	csel	x0, x0, xzr, ne	// ne = any
   87560:	d65f03c0 	ret
   87564:	d503201f 	nop
   87568:	d503201f 	nop
   8756c:	d503201f 	nop

0000000000087570 <CKernelOptions::Get()>:
   87570:	f0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   87574:	f941c400 	ldr	x0, [x0, #904]
   87578:	d65f03c0 	ret
   8757c:	d503201f 	nop

0000000000087580 <CKernelOptions::GetToken()>:
   87580:	aa0003e3 	mov	x3, x0
   87584:	f9440800 	ldr	x0, [x0, #2064]
   87588:	39c00001 	ldrsb	w1, [x0]
   8758c:	350000c1 	cbnz	w1, 875a4 <CKernelOptions::GetToken()+0x24>
   87590:	14000013 	b	875dc <CKernelOptions::GetToken()+0x5c>
   87594:	91000400 	add	x0, x0, #0x1
   87598:	f9040860 	str	x0, [x3, #2064]
   8759c:	39c00001 	ldrsb	w1, [x0]
   875a0:	340001e1 	cbz	w1, 875dc <CKernelOptions::GetToken()+0x5c>
   875a4:	7100803f 	cmp	w1, #0x20
   875a8:	54ffff60 	b.eq	87594 <CKernelOptions::GetToken()+0x14>  // b.none
   875ac:	f9440861 	ldr	x1, [x3, #2064]
   875b0:	14000006 	b	875c8 <CKernelOptions::GetToken()+0x48>
   875b4:	7100805f 	cmp	w2, #0x20
   875b8:	aa0103e2 	mov	x2, x1
   875bc:	91000421 	add	x1, x1, #0x1
   875c0:	f9040861 	str	x1, [x3, #2064]
   875c4:	54000080 	b.eq	875d4 <CKernelOptions::GetToken()+0x54>  // b.none
   875c8:	39c00022 	ldrsb	w2, [x1]
   875cc:	35ffff42 	cbnz	w2, 875b4 <CKernelOptions::GetToken()+0x34>
   875d0:	d65f03c0 	ret
   875d4:	3900005f 	strb	wzr, [x2]
   875d8:	d65f03c0 	ret
   875dc:	d2800000 	mov	x0, #0x0                   	// #0
   875e0:	d65f03c0 	ret
   875e4:	d503201f 	nop
   875e8:	d503201f 	nop
   875ec:	d503201f 	nop

00000000000875f0 <CKernelOptions::GetOptionValue(char*)>:
   875f0:	39c00001 	ldrsb	w1, [x0]
   875f4:	35000081 	cbnz	w1, 87604 <CKernelOptions::GetOptionValue(char*)+0x14>
   875f8:	14000007 	b	87614 <CKernelOptions::GetOptionValue(char*)+0x24>
   875fc:	38c01c01 	ldrsb	w1, [x0, #1]!
   87600:	340000a1 	cbz	w1, 87614 <CKernelOptions::GetOptionValue(char*)+0x24>
   87604:	7100f43f 	cmp	w1, #0x3d
   87608:	54ffffa1 	b.ne	875fc <CKernelOptions::GetOptionValue(char*)+0xc>  // b.any
   8760c:	3800141f 	strb	wzr, [x0], #1
   87610:	d65f03c0 	ret
   87614:	d2800000 	mov	x0, #0x0                   	// #0
   87618:	d65f03c0 	ret
   8761c:	d503201f 	nop

0000000000087620 <CKernelOptions::GetDecimal(char*)>:
   87620:	aa0003e3 	mov	x3, x0
   87624:	b4000260 	cbz	x0, 87670 <CKernelOptions::GetDecimal(char*)+0x50>
   87628:	39c00001 	ldrsb	w1, [x0]
   8762c:	12800000 	mov	w0, #0xffffffff            	// #-1
   87630:	340001e1 	cbz	w1, 8766c <CKernelOptions::GetDecimal(char*)+0x4c>
   87634:	52800000 	mov	w0, #0x0                   	// #0
   87638:	1400000a 	b	87660 <CKernelOptions::GetDecimal(char*)+0x40>
   8763c:	5100c021 	sub	w1, w1, #0x30
   87640:	0b020422 	add	w2, w1, w2, lsl #1
   87644:	12001c21 	and	w1, w1, #0xff
   87648:	7100243f 	cmp	w1, #0x9
   8764c:	54000128 	b.hi	87670 <CKernelOptions::GetDecimal(char*)+0x50>  // b.pmore
   87650:	6b02001f 	cmp	w0, w2
   87654:	2a0203e0 	mov	w0, w2
   87658:	3a419844 	ccmn	w2, #0x1, #0x4, ls	// ls = plast
   8765c:	540000a0 	b.eq	87670 <CKernelOptions::GetDecimal(char*)+0x50>  // b.none
   87660:	38c01461 	ldrsb	w1, [x3], #1
   87664:	0b000802 	add	w2, w0, w0, lsl #2
   87668:	35fffea1 	cbnz	w1, 8763c <CKernelOptions::GetDecimal(char*)+0x1c>
   8766c:	d65f03c0 	ret
   87670:	12800000 	mov	w0, #0xffffffff            	// #-1
   87674:	d65f03c0 	ret
   87678:	d503201f 	nop
   8767c:	d503201f 	nop

0000000000087680 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>:
   87680:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   87684:	910003fd 	mov	x29, sp
   87688:	a90153f3 	stp	x19, x20, [sp, #16]
   8768c:	f0000054 	adrp	x20, 92000 <uart_putHexByte::hexDigits>
   87690:	911ba294 	add	x20, x20, #0x6e8
   87694:	a9025bf5 	stp	x21, x22, [sp, #32]
   87698:	9100e3f5 	add	x21, sp, #0x38
   8769c:	34000422 	cbz	w2, 87720 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xa0>
   876a0:	aa0103f6 	mov	x22, x1
   876a4:	51000441 	sub	w1, w2, #0x1
   876a8:	d37e7c33 	ubfiz	x19, x1, #2, #32
   876ac:	f0000054 	adrp	x20, 92000 <uart_putHexByte::hexDigits>
   876b0:	911ba294 	add	x20, x20, #0x6e8
   876b4:	91001273 	add	x19, x19, #0x4
   876b8:	8b1302d3 	add	x19, x22, x19
   876bc:	9100e3f5 	add	x21, sp, #0x38
   876c0:	aa1503e2 	mov	x2, x21
   876c4:	aa1403e1 	mov	x1, x20
   876c8:	940015d2 	bl	8ce10 <strtok_r>
   876cc:	b40003e0 	cbz	x0, 87748 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
   876d0:	39c00001 	ldrsb	w1, [x0]
   876d4:	340003a1 	cbz	w1, 87748 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>
   876d8:	52800004 	mov	w4, #0x0                   	// #0
   876dc:	1400000a 	b	87704 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x84>
   876e0:	5100c042 	sub	w2, w2, #0x30
   876e4:	0b030443 	add	w3, w2, w3, lsl #1
   876e8:	12001c42 	and	w2, w2, #0xff
   876ec:	7100245f 	cmp	w2, #0x9
   876f0:	540002c8 	b.hi	87748 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>  // b.pmore
   876f4:	6b03009f 	cmp	w4, w3
   876f8:	2a0303e4 	mov	w4, w3
   876fc:	3a419864 	ccmn	w3, #0x1, #0x4, ls	// ls = plast
   87700:	54000240 	b.eq	87748 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0xc8>  // b.none
   87704:	38c01402 	ldrsb	w2, [x0], #1
   87708:	0b040883 	add	w3, w4, w4, lsl #2
   8770c:	35fffea2 	cbnz	w2, 876e0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x60>
   87710:	b80046c4 	str	w4, [x22], #4
   87714:	eb1302df 	cmp	x22, x19
   87718:	d2800000 	mov	x0, #0x0                   	// #0
   8771c:	54fffd21 	b.ne	876c0 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)+0x40>  // b.any
   87720:	aa1503e2 	mov	x2, x21
   87724:	aa1403e1 	mov	x1, x20
   87728:	d2800000 	mov	x0, #0x0                   	// #0
   8772c:	940015b9 	bl	8ce10 <strtok_r>
   87730:	a94153f3 	ldp	x19, x20, [sp, #16]
   87734:	f100001f 	cmp	x0, #0x0
   87738:	1a9f17e0 	cset	w0, eq	// eq = none
   8773c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87740:	a8c47bfd 	ldp	x29, x30, [sp], #64
   87744:	d65f03c0 	ret
   87748:	a94153f3 	ldp	x19, x20, [sp, #16]
   8774c:	52800000 	mov	w0, #0x0                   	// #0
   87750:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87754:	a8c47bfd 	ldp	x29, x30, [sp], #64
   87758:	d65f03c0 	ret
   8775c:	d503201f 	nop

0000000000087760 <CKernelOptions::CKernelOptions()>:
   87760:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   87764:	910003fd 	mov	x29, sp
   87768:	52800084 	mov	w4, #0x4                   	// #4
   8776c:	91200002 	add	x2, x0, #0x800
   87770:	d2800783 	mov	x3, #0x3c                  	// #60
   87774:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87778:	9117a021 	add	x1, x1, #0x5e8
   8777c:	a9025bf5 	stp	x21, x22, [sp, #32]
   87780:	aa0003f5 	mov	x21, x0
   87784:	a90363f7 	stp	x23, x24, [sp, #48]
   87788:	91208018 	add	x24, x0, #0x820
   8778c:	f90023f9 	str	x25, [sp, #64]
   87790:	9120e019 	add	x25, x0, #0x838
   87794:	f9040c1f 	str	xzr, [x0, #2072]
   87798:	aa1803e0 	mov	x0, x24
   8779c:	b90836a4 	str	w4, [x21, #2100]
   877a0:	b9083ebf 	str	wzr, [x21, #2108]
   877a4:	791082bf 	strh	wzr, [x21, #2112]
   877a8:	f9042ebf 	str	xzr, [x21, #2136]
   877ac:	f807405f 	stur	xzr, [x2, #116]
   877b0:	f807c043 	stur	x3, [x2, #124]
   877b4:	392212bf 	strb	wzr, [x21, #2180]
   877b8:	9400154e 	bl	8ccf0 <strcpy>
   877bc:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   877c0:	9117c021 	add	x1, x1, #0x5f0
   877c4:	aa1903e0 	mov	x0, x25
   877c8:	9400154a 	bl	8ccf0 <strcpy>
   877cc:	f0000142 	adrp	x2, b2000 <appendBuf+0xa0>
   877d0:	910163e0 	add	x0, sp, #0x58
   877d4:	39210abf 	strb	wzr, [x21, #2114]
   877d8:	52800001 	mov	w1, #0x0                   	// #0
   877dc:	392182bf 	strb	wzr, [x21, #2144]
   877e0:	f901c455 	str	x21, [x2, #904]
   877e4:	94002013 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   877e8:	52800021 	mov	w1, #0x1                   	// #1
   877ec:	72a000a1 	movk	w1, #0x5, lsl #16
   877f0:	aa1503e2 	mov	x2, x21
   877f4:	910163e0 	add	x0, sp, #0x58
   877f8:	52800004 	mov	w4, #0x0                   	// #0
   877fc:	52810183 	mov	w3, #0x80c                 	// #2060
   87800:	9400205c 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   87804:	36000520 	tbz	w0, #0, 878a8 <CKernelOptions::CKernelOptions()+0x148>
   87808:	b9400aa0 	ldr	w0, [x21, #8]
   8780c:	711ffc1f 	cmp	w0, #0x7ff
   87810:	540004c8 	b.hi	878a8 <CKernelOptions::CKernelOptions()+0x148>  // b.pmore
   87814:	910032a1 	add	x1, x21, #0xc
   87818:	f0000056 	adrp	x22, 92000 <uart_putHexByte::hexDigits>
   8781c:	9117e2d6 	add	x22, x22, #0x5f8
   87820:	f0000057 	adrp	x23, 92000 <uart_putHexByte::hexDigits>
   87824:	911802f7 	add	x23, x23, #0x600
   87828:	a90153f3 	stp	x19, x20, [sp, #16]
   8782c:	8b2042a0 	add	x0, x21, w0, uxtw
   87830:	3900301f 	strb	wzr, [x0, #12]
   87834:	f9040aa1 	str	x1, [x21, #2064]
   87838:	aa1503e0 	mov	x0, x21
   8783c:	97ffff51 	bl	87580 <CKernelOptions::GetToken()>
   87840:	aa0003f4 	mov	x20, x0
   87844:	b4000300 	cbz	x0, 878a4 <CKernelOptions::CKernelOptions()+0x144>
   87848:	39c00001 	ldrsb	w1, [x0]
   8784c:	aa0003e2 	mov	x2, x0
   87850:	35000081 	cbnz	w1, 87860 <CKernelOptions::CKernelOptions()+0x100>
   87854:	1400001c 	b	878c4 <CKernelOptions::CKernelOptions()+0x164>
   87858:	38c01c41 	ldrsb	w1, [x2, #1]!
   8785c:	34000341 	cbz	w1, 878c4 <CKernelOptions::CKernelOptions()+0x164>
   87860:	7100f43f 	cmp	w1, #0x3d
   87864:	54ffffa1 	b.ne	87858 <CKernelOptions::CKernelOptions()+0xf8>  // b.any
   87868:	aa0203f3 	mov	x19, x2
   8786c:	aa1603e1 	mov	x1, x22
   87870:	aa1403e0 	mov	x0, x20
   87874:	3800167f 	strb	wzr, [x19], #1
   87878:	9400149a 	bl	8cae0 <strcmp>
   8787c:	350002e0 	cbnz	w0, 878d8 <CKernelOptions::CKernelOptions()+0x178>
   87880:	aa1303e0 	mov	x0, x19
   87884:	97ffff67 	bl	87620 <CKernelOptions::GetDecimal(char*)>
   87888:	3100041f 	cmn	w0, #0x1
   8788c:	54fffd60 	b.eq	87838 <CKernelOptions::CKernelOptions()+0xd8>  // b.none
   87890:	b9081aa0 	str	w0, [x21, #2072]
   87894:	aa1503e0 	mov	x0, x21
   87898:	97ffff3a 	bl	87580 <CKernelOptions::GetToken()>
   8789c:	aa0003f4 	mov	x20, x0
   878a0:	b5fffd40 	cbnz	x0, 87848 <CKernelOptions::CKernelOptions()+0xe8>
   878a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   878a8:	910163e0 	add	x0, sp, #0x58
   878ac:	94001fe5 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   878b0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   878b4:	a94363f7 	ldp	x23, x24, [sp, #48]
   878b8:	f94023f9 	ldr	x25, [sp, #64]
   878bc:	a8c67bfd 	ldp	x29, x30, [sp], #96
   878c0:	d65f03c0 	ret
   878c4:	aa1603e1 	mov	x1, x22
   878c8:	aa1403e0 	mov	x0, x20
   878cc:	d2800013 	mov	x19, #0x0                   	// #0
   878d0:	94001484 	bl	8cae0 <strcmp>
   878d4:	34fffd60 	cbz	w0, 87880 <CKernelOptions::CKernelOptions()+0x120>
   878d8:	aa1703e1 	mov	x1, x23
   878dc:	aa1403e0 	mov	x0, x20
   878e0:	94001480 	bl	8cae0 <strcmp>
   878e4:	350000e0 	cbnz	w0, 87900 <CKernelOptions::CKernelOptions()+0x1a0>
   878e8:	aa1303e0 	mov	x0, x19
   878ec:	97ffff4d 	bl	87620 <CKernelOptions::GetDecimal(char*)>
   878f0:	3100041f 	cmn	w0, #0x1
   878f4:	54fffa20 	b.eq	87838 <CKernelOptions::CKernelOptions()+0xd8>  // b.none
   878f8:	b9081ea0 	str	w0, [x21, #2076]
   878fc:	17ffffcf 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   87900:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87904:	91182021 	add	x1, x1, #0x608
   87908:	aa1403e0 	mov	x0, x20
   8790c:	94001475 	bl	8cae0 <strcmp>
   87910:	34000180 	cbz	w0, 87940 <CKernelOptions::CKernelOptions()+0x1e0>
   87914:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87918:	91184021 	add	x1, x1, #0x610
   8791c:	aa1403e0 	mov	x0, x20
   87920:	94001470 	bl	8cae0 <strcmp>
   87924:	350001a0 	cbnz	w0, 87958 <CKernelOptions::CKernelOptions()+0x1f8>
   87928:	aa1303e0 	mov	x0, x19
   8792c:	97ffff3d 	bl	87620 <CKernelOptions::GetDecimal(char*)>
   87930:	7100101f 	cmp	w0, #0x4
   87934:	54fff828 	b.hi	87838 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   87938:	b90836a0 	str	w0, [x21, #2100]
   8793c:	17ffffbf 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   87940:	aa1303e1 	mov	x1, x19
   87944:	d2800262 	mov	x2, #0x13                  	// #19
   87948:	aa1803e0 	mov	x0, x24
   8794c:	940014f5 	bl	8cd20 <strncpy>
   87950:	3920cebf 	strb	wzr, [x21, #2099]
   87954:	17ffffb9 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   87958:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8795c:	91188021 	add	x1, x1, #0x620
   87960:	aa1403e0 	mov	x0, x20
   87964:	9400145f 	bl	8cae0 <strcmp>
   87968:	340001c0 	cbz	w0, 879a0 <CKernelOptions::CKernelOptions()+0x240>
   8796c:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87970:	9118a021 	add	x1, x1, #0x628
   87974:	aa1403e0 	mov	x0, x20
   87978:	9400145a 	bl	8cae0 <strcmp>
   8797c:	350001e0 	cbnz	w0, 879b8 <CKernelOptions::CKernelOptions()+0x258>
   87980:	aa1303e0 	mov	x0, x19
   87984:	97ffff27 	bl	87620 <CKernelOptions::GetDecimal(char*)>
   87988:	5283cf01 	mov	w1, #0x1e78                	// #7800
   8798c:	51032002 	sub	w2, w0, #0xc8
   87990:	6b01005f 	cmp	w2, w1
   87994:	54fff528 	b.hi	87838 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   87998:	b9083ea0 	str	w0, [x21, #2108]
   8799c:	17ffffa7 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   879a0:	aa1303e1 	mov	x1, x19
   879a4:	d2800042 	mov	x2, #0x2                   	// #2
   879a8:	aa1903e0 	mov	x0, x25
   879ac:	940014dd 	bl	8cd20 <strncpy>
   879b0:	3920eabf 	strb	wzr, [x21, #2106]
   879b4:	17ffffa1 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   879b8:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   879bc:	9118e021 	add	x1, x1, #0x638
   879c0:	aa1403e0 	mov	x0, x20
   879c4:	94001447 	bl	8cae0 <strcmp>
   879c8:	35000120 	cbnz	w0, 879ec <CKernelOptions::CKernelOptions()+0x28c>
   879cc:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   879d0:	91192021 	add	x1, x1, #0x648
   879d4:	aa1303e0 	mov	x0, x19
   879d8:	94001442 	bl	8cae0 <strcmp>
   879dc:	35fff2e0 	cbnz	w0, 87838 <CKernelOptions::CKernelOptions()+0xd8>
   879e0:	52800020 	mov	w0, #0x1                   	// #1
   879e4:	392102a0 	strb	w0, [x21, #2112]
   879e8:	17ffff94 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   879ec:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   879f0:	91194021 	add	x1, x1, #0x650
   879f4:	aa1403e0 	mov	x0, x20
   879f8:	9400143a 	bl	8cae0 <strcmp>
   879fc:	35000120 	cbnz	w0, 87a20 <CKernelOptions::CKernelOptions()+0x2c0>
   87a00:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87a04:	91198021 	add	x1, x1, #0x660
   87a08:	aa1303e0 	mov	x0, x19
   87a0c:	94001435 	bl	8cae0 <strcmp>
   87a10:	35fff140 	cbnz	w0, 87838 <CKernelOptions::CKernelOptions()+0xd8>
   87a14:	52800020 	mov	w0, #0x1                   	// #1
   87a18:	392106a0 	strb	w0, [x21, #2113]
   87a1c:	17ffff87 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   87a20:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87a24:	9119a021 	add	x1, x1, #0x668
   87a28:	aa1403e0 	mov	x0, x20
   87a2c:	9400142d 	bl	8cae0 <strcmp>
   87a30:	350000e0 	cbnz	w0, 87a4c <CKernelOptions::CKernelOptions()+0x2ec>
   87a34:	aa1303e1 	mov	x1, x19
   87a38:	d2800262 	mov	x2, #0x13                  	// #19
   87a3c:	91210aa0 	add	x0, x21, #0x842
   87a40:	940014b8 	bl	8cd20 <strncpy>
   87a44:	392156bf 	strb	wzr, [x21, #2133]
   87a48:	17ffff7c 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   87a4c:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87a50:	9119e021 	add	x1, x1, #0x678
   87a54:	aa1403e0 	mov	x0, x20
   87a58:	94001422 	bl	8cae0 <strcmp>
   87a5c:	35000100 	cbnz	w0, 87a7c <CKernelOptions::CKernelOptions()+0x31c>
   87a60:	aa1303e0 	mov	x0, x19
   87a64:	52800042 	mov	w2, #0x2                   	// #2
   87a68:	912162a1 	add	x1, x21, #0x858
   87a6c:	97ffff05 	bl	87680 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
   87a70:	3707ee40 	tbnz	w0, #0, 87838 <CKernelOptions::CKernelOptions()+0xd8>
   87a74:	f9042ebf 	str	xzr, [x21, #2136]
   87a78:	17ffff70 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   87a7c:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87a80:	911a4021 	add	x1, x1, #0x690
   87a84:	aa1403e0 	mov	x0, x20
   87a88:	94001416 	bl	8cae0 <strcmp>
   87a8c:	350000e0 	cbnz	w0, 87aa8 <CKernelOptions::CKernelOptions()+0x348>
   87a90:	aa1303e1 	mov	x1, x19
   87a94:	d2800262 	mov	x2, #0x13                  	// #19
   87a98:	912182a0 	add	x0, x21, #0x860
   87a9c:	940014a1 	bl	8cd20 <strncpy>
   87aa0:	3921cebf 	strb	wzr, [x21, #2163]
   87aa4:	17ffff65 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   87aa8:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87aac:	911a8021 	add	x1, x1, #0x6a0
   87ab0:	aa1403e0 	mov	x0, x20
   87ab4:	9400140b 	bl	8cae0 <strcmp>
   87ab8:	35000160 	cbnz	w0, 87ae4 <CKernelOptions::CKernelOptions()+0x384>
   87abc:	aa1303e0 	mov	x0, x19
   87ac0:	97fffed8 	bl	87620 <CKernelOptions::GetDecimal(char*)>
   87ac4:	7100601f 	cmp	w0, #0x18
   87ac8:	54ffeb88 	b.hi	87838 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   87acc:	d28000e1 	mov	x1, #0x7                   	// #7
   87ad0:	f2a02021 	movk	x1, #0x101, lsl #16
   87ad4:	9ac02421 	lsr	x1, x1, x0
   87ad8:	3607eb01 	tbz	w1, #0, 87838 <CKernelOptions::CKernelOptions()+0xd8>
   87adc:	b90876a0 	str	w0, [x21, #2164]
   87ae0:	17ffff56 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   87ae4:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87ae8:	911ac021 	add	x1, x1, #0x6b0
   87aec:	aa1403e0 	mov	x0, x20
   87af0:	940013fc 	bl	8cae0 <strcmp>
   87af4:	35000120 	cbnz	w0, 87b18 <CKernelOptions::CKernelOptions()+0x3b8>
   87af8:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87afc:	91198021 	add	x1, x1, #0x660
   87b00:	aa1303e0 	mov	x0, x19
   87b04:	940013f7 	bl	8cae0 <strcmp>
   87b08:	35ffe980 	cbnz	w0, 87838 <CKernelOptions::CKernelOptions()+0xd8>
   87b0c:	52800020 	mov	w0, #0x1                   	// #1
   87b10:	b9087aa0 	str	w0, [x21, #2168]
   87b14:	17ffff49 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   87b18:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87b1c:	911ae021 	add	x1, x1, #0x6b8
   87b20:	aa1403e0 	mov	x0, x20
   87b24:	940013ef 	bl	8cae0 <strcmp>
   87b28:	35000100 	cbnz	w0, 87b48 <CKernelOptions::CKernelOptions()+0x3e8>
   87b2c:	aa1303e0 	mov	x0, x19
   87b30:	97fffebc 	bl	87620 <CKernelOptions::GetDecimal(char*)>
   87b34:	5100a001 	sub	w1, w0, #0x28
   87b38:	7100983f 	cmp	w1, #0x26
   87b3c:	54ffe7e8 	b.hi	87838 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   87b40:	b9087ea0 	str	w0, [x21, #2172]
   87b44:	17ffff3d 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   87b48:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87b4c:	911b2021 	add	x1, x1, #0x6c8
   87b50:	aa1403e0 	mov	x0, x20
   87b54:	940013e3 	bl	8cae0 <strcmp>
   87b58:	35000100 	cbnz	w0, 87b78 <CKernelOptions::CKernelOptions()+0x418>
   87b5c:	aa1303e0 	mov	x0, x19
   87b60:	97fffeb0 	bl	87620 <CKernelOptions::GetDecimal(char*)>
   87b64:	51000801 	sub	w1, w0, #0x2
   87b68:	7100643f 	cmp	w1, #0x19
   87b6c:	54ffe668 	b.hi	87838 <CKernelOptions::CKernelOptions()+0xd8>  // b.pmore
   87b70:	b90882a0 	str	w0, [x21, #2176]
   87b74:	17ffff31 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
   87b78:	f0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   87b7c:	911b6021 	add	x1, x1, #0x6d8
   87b80:	aa1403e0 	mov	x0, x20
   87b84:	940013d7 	bl	8cae0 <strcmp>
   87b88:	35ffe580 	cbnz	w0, 87838 <CKernelOptions::CKernelOptions()+0xd8>
   87b8c:	aa1303e0 	mov	x0, x19
   87b90:	52800082 	mov	w2, #0x4                   	// #4
   87b94:	912222a1 	add	x1, x21, #0x888
   87b98:	97fffeba 	bl	87680 <CKernelOptions::GetDecimals(char*, unsigned int*, unsigned int)>
   87b9c:	392212a0 	strb	w0, [x21, #2180]
   87ba0:	17ffff26 	b	87838 <CKernelOptions::CKernelOptions()+0xd8>
	...

0000000000087bb0 <CLogger::CLogger(unsigned int, CTimer*, bool)>:
   87bb0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87bb4:	910003fd 	mov	x29, sp
   87bb8:	52800024 	mov	w4, #0x1                   	// #1
   87bbc:	f9000bf3 	str	x19, [sp, #16]
   87bc0:	aa0003f3 	mov	x19, x0
   87bc4:	d2880000 	mov	x0, #0x4000                	// #16384
   87bc8:	b9000261 	str	w1, [x19]
   87bcc:	f9000662 	str	x2, [x19, #8]
   87bd0:	39004263 	strb	w3, [x19, #16]
   87bd4:	a901fe7f 	stp	xzr, xzr, [x19, #24]
   87bd8:	f900167f 	str	xzr, [x19, #40]
   87bdc:	b9003264 	str	w4, [x19, #48]
   87be0:	f900e67f 	str	xzr, [x19, #456]
   87be4:	b901d264 	str	w4, [x19, #464]
   87be8:	a91dfe7f 	stp	xzr, xzr, [x19, #472]
   87bec:	94001605 	bl	8d400 <operator new[](unsigned long)>
   87bf0:	f0000141 	adrp	x1, b2000 <appendBuf+0xa0>
   87bf4:	f9001260 	str	x0, [x19, #32]
   87bf8:	f901c833 	str	x19, [x1, #912]
   87bfc:	f9400bf3 	ldr	x19, [sp, #16]
   87c00:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87c04:	d65f03c0 	ret
   87c08:	d503201f 	nop
   87c0c:	d503201f 	nop

0000000000087c10 <CLogger::~CLogger()>:
   87c10:	f0000141 	adrp	x1, b2000 <appendBuf+0xa0>
   87c14:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87c18:	910003fd 	mov	x29, sp
   87c1c:	f901c83f 	str	xzr, [x1, #912]
   87c20:	b941c803 	ldr	w3, [x0, #456]
   87c24:	b941cc02 	ldr	w2, [x0, #460]
   87c28:	f9000bf3 	str	x19, [sp, #16]
   87c2c:	aa0003f3 	mov	x19, x0
   87c30:	1400000a 	b	87c58 <CLogger::~CLogger()+0x48>
   87c34:	f9401c00 	ldr	x0, [x0, #56]
   87c38:	b4000080 	cbz	x0, 87c48 <CLogger::~CLogger()+0x38>
   87c3c:	9400161d 	bl	8d4b0 <operator delete(void*, unsigned long)>
   87c40:	b941ca63 	ldr	w3, [x19, #456]
   87c44:	b941ce62 	ldr	w2, [x19, #460]
   87c48:	11000442 	add	w2, w2, #0x1
   87c4c:	7100c85f 	cmp	w2, #0x32
   87c50:	b901ce62 	str	w2, [x19, #460]
   87c54:	54000140 	b.eq	87c7c <CLogger::~CLogger()+0x6c>  // b.none
   87c58:	6b03005f 	cmp	w2, w3
   87c5c:	d2802201 	mov	x1, #0x110                 	// #272
   87c60:	8b224e60 	add	x0, x19, w2, uxtw #3
   87c64:	54fffe81 	b.ne	87c34 <CLogger::~CLogger()+0x24>  // b.any
   87c68:	f9401260 	ldr	x0, [x19, #32]
   87c6c:	b40000e0 	cbz	x0, 87c88 <CLogger::~CLogger()+0x78>
   87c70:	f9400bf3 	ldr	x19, [sp, #16]
   87c74:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87c78:	14001602 	b	8d480 <operator delete[](void*)>
   87c7c:	52800002 	mov	w2, #0x0                   	// #0
   87c80:	b901ce7f 	str	wzr, [x19, #460]
   87c84:	17fffff5 	b	87c58 <CLogger::~CLogger()+0x48>
   87c88:	f9400bf3 	ldr	x19, [sp, #16]
   87c8c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87c90:	d65f03c0 	ret
   87c94:	d503201f 	nop
   87c98:	d503201f 	nop
   87c9c:	d503201f 	nop

0000000000087ca0 <CLogger::SetNewTarget(CDevice*)>:
   87ca0:	f9000c01 	str	x1, [x0, #24]
   87ca4:	d65f03c0 	ret
   87ca8:	d503201f 	nop
   87cac:	d503201f 	nop

0000000000087cb0 <CLogger::Get()>:
   87cb0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   87cb4:	910003fd 	mov	x29, sp
   87cb8:	a90153f3 	stp	x19, x20, [sp, #16]
   87cbc:	f0000154 	adrp	x20, b2000 <appendBuf+0xa0>
   87cc0:	f941ca93 	ldr	x19, [x20, #912]
   87cc4:	b40000b3 	cbz	x19, 87cd8 <CLogger::Get()+0x28>
   87cc8:	aa1303e0 	mov	x0, x19
   87ccc:	a94153f3 	ldp	x19, x20, [sp, #16]
   87cd0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87cd4:	d65f03c0 	ret
   87cd8:	d2803d00 	mov	x0, #0x1e8                 	// #488
   87cdc:	940015b5 	bl	8d3b0 <operator new(unsigned long)>
   87ce0:	aa0003f3 	mov	x19, x0
   87ce4:	52800021 	mov	w1, #0x1                   	// #1
   87ce8:	52800022 	mov	w2, #0x1                   	// #1
   87cec:	d2880000 	mov	x0, #0x4000                	// #16384
   87cf0:	b900027f 	str	wzr, [x19]
   87cf4:	f900067f 	str	xzr, [x19, #8]
   87cf8:	39004262 	strb	w2, [x19, #16]
   87cfc:	a901fe7f 	stp	xzr, xzr, [x19, #24]
   87d00:	f900167f 	str	xzr, [x19, #40]
   87d04:	b9003261 	str	w1, [x19, #48]
   87d08:	f900e67f 	str	xzr, [x19, #456]
   87d0c:	b901d261 	str	w1, [x19, #464]
   87d10:	a91dfe7f 	stp	xzr, xzr, [x19, #472]
   87d14:	940015bb 	bl	8d400 <operator new[](unsigned long)>
   87d18:	f901ca93 	str	x19, [x20, #912]
   87d1c:	f9001260 	str	x0, [x19, #32]
   87d20:	aa1303e0 	mov	x0, x19
   87d24:	a94153f3 	ldp	x19, x20, [sp, #16]
   87d28:	a8c27bfd 	ldp	x29, x30, [sp], #32
   87d2c:	d65f03c0 	ret

0000000000087d30 <CLogger::Write(char const*)>:
   87d30:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87d34:	910003fd 	mov	x29, sp
   87d38:	a90153f3 	stp	x19, x20, [sp, #16]
   87d3c:	aa0003f3 	mov	x19, x0
   87d40:	aa0103e0 	mov	x0, x1
   87d44:	aa0103f4 	mov	x20, x1
   87d48:	f90013f5 	str	x21, [sp, #32]
   87d4c:	94001359 	bl	8cab0 <strlen>
   87d50:	aa0003f5 	mov	x21, x0
   87d54:	f9400e60 	ldr	x0, [x19, #24]
   87d58:	b40000c0 	cbz	x0, 87d70 <CLogger::Write(char const*)+0x40>
   87d5c:	f9400003 	ldr	x3, [x0]
   87d60:	aa1503e2 	mov	x2, x21
   87d64:	aa1403e1 	mov	x1, x20
   87d68:	f9400c63 	ldr	x3, [x3, #24]
   87d6c:	d63f0060 	blr	x3
   87d70:	b9403260 	ldr	w0, [x19, #48]
   87d74:	350004a0 	cbnz	w0, 87e08 <CLogger::Write(char const*)+0xd8>
   87d78:	b4000395 	cbz	x21, 87de8 <CLogger::Write(char const*)+0xb8>
   87d7c:	aa1403e4 	mov	x4, x20
   87d80:	14000004 	b	87d90 <CLogger::Write(char const*)+0x60>
   87d84:	cb040283 	sub	x3, x20, x4
   87d88:	ab15007f 	cmn	x3, x21
   87d8c:	540002a0 	b.eq	87de0 <CLogger::Write(char const*)+0xb0>  // b.none
   87d90:	38c01483 	ldrsb	w3, [x4], #1
   87d94:	7100347f 	cmp	w3, #0xd
   87d98:	54ffff60 	b.eq	87d84 <CLogger::Write(char const*)+0x54>  // b.none
   87d9c:	f9401266 	ldr	x6, [x19, #32]
   87da0:	b9402a65 	ldr	w5, [x19, #40]
   87da4:	382568c3 	strb	w3, [x6, x5]
   87da8:	29451663 	ldp	w3, w5, [x19, #40]
   87dac:	11000463 	add	w3, w3, #0x1
   87db0:	12003463 	and	w3, w3, #0x3fff
   87db4:	6b05007f 	cmp	w3, w5
   87db8:	b9002a63 	str	w3, [x19, #40]
   87dbc:	54fffe41 	b.ne	87d84 <CLogger::Write(char const*)+0x54>  // b.any
   87dc0:	11000465 	add	w5, w3, #0x1
   87dc4:	39404260 	ldrb	w0, [x19, #16]
   87dc8:	120034a5 	and	w5, w5, #0x3fff
   87dcc:	36000240 	tbz	w0, #0, 87e14 <CLogger::Write(char const*)+0xe4>
   87dd0:	cb040283 	sub	x3, x20, x4
   87dd4:	b9002e65 	str	w5, [x19, #44]
   87dd8:	ab15007f 	cmn	x3, x21
   87ddc:	54fffda1 	b.ne	87d90 <CLogger::Write(char const*)+0x60>  // b.any
   87de0:	b9403260 	ldr	w0, [x19, #48]
   87de4:	350000a0 	cbnz	w0, 87df8 <CLogger::Write(char const*)+0xc8>
   87de8:	a94153f3 	ldp	x19, x20, [sp, #16]
   87dec:	f94013f5 	ldr	x21, [sp, #32]
   87df0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87df4:	d65f03c0 	ret
   87df8:	a94153f3 	ldp	x19, x20, [sp, #16]
   87dfc:	f94013f5 	ldr	x21, [sp, #32]
   87e00:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87e04:	14001837 	b	8dee0 <LeaveCritical>
   87e08:	94001806 	bl	8de20 <EnterCritical>
   87e0c:	b5fffb95 	cbnz	x21, 87d7c <CLogger::Write(char const*)+0x4c>
   87e10:	17fffff4 	b	87de0 <CLogger::Write(char const*)+0xb0>
   87e14:	51000461 	sub	w1, w3, #0x1
   87e18:	b9403260 	ldr	w0, [x19, #48]
   87e1c:	12003421 	and	w1, w1, #0x3fff
   87e20:	b9002a61 	str	w1, [x19, #40]
   87e24:	34fffe20 	cbz	w0, 87de8 <CLogger::Write(char const*)+0xb8>
   87e28:	17fffff4 	b	87df8 <CLogger::Write(char const*)+0xc8>
   87e2c:	d503201f 	nop

0000000000087e30 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
   87e30:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   87e34:	910003fd 	mov	x29, sp
   87e38:	a90153f3 	stp	x19, x20, [sp, #16]
   87e3c:	aa0003f3 	mov	x19, x0
   87e40:	b9400000 	ldr	w0, [x0]
   87e44:	6b02001f 	cmp	w0, w2
   87e48:	540002c3 	b.cc	87ea0 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x70>  // b.lo, b.ul, b.last
   87e4c:	a9025bf5 	stp	x21, x22, [sp, #32]
   87e50:	aa0303f4 	mov	x20, x3
   87e54:	3900e3ff 	strb	wzr, [sp, #56]
   87e58:	340002a2 	cbz	w2, 87eac <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x7c>
   87e5c:	9100e3e0 	add	x0, sp, #0x38
   87e60:	f0000055 	adrp	x21, 92000 <uart_putHexByte::hexDigits>
   87e64:	911bc2b5 	add	x21, x21, #0x6f0
   87e68:	940013ba 	bl	8cd50 <strcat>
   87e6c:	910022a1 	add	x1, x21, #0x8
   87e70:	9100e3e0 	add	x0, sp, #0x38
   87e74:	940013b7 	bl	8cd50 <strcat>
   87e78:	aa1403e1 	mov	x1, x20
   87e7c:	9100e3e0 	add	x0, sp, #0x38
   87e80:	940013b4 	bl	8cd50 <strcat>
   87e84:	910062a1 	add	x1, x21, #0x18
   87e88:	9100e3e0 	add	x0, sp, #0x38
   87e8c:	940013b1 	bl	8cd50 <strcat>
   87e90:	9100e3e1 	add	x1, sp, #0x38
   87e94:	aa1303e0 	mov	x0, x19
   87e98:	97ffffa6 	bl	87d30 <CLogger::Write(char const*)>
   87e9c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87ea0:	a94153f3 	ldp	x19, x20, [sp, #16]
   87ea4:	a8d07bfd 	ldp	x29, x30, [sp], #256
   87ea8:	d65f03c0 	ret
   87eac:	f0000056 	adrp	x22, 92000 <uart_putHexByte::hexDigits>
   87eb0:	911bc2d6 	add	x22, x22, #0x6f0
   87eb4:	aa0103f5 	mov	x21, x1
   87eb8:	9100e3e0 	add	x0, sp, #0x38
   87ebc:	aa1603e1 	mov	x1, x22
   87ec0:	9400138c 	bl	8ccf0 <strcpy>
   87ec4:	aa1503e1 	mov	x1, x21
   87ec8:	9100e3e0 	add	x0, sp, #0x38
   87ecc:	940013a1 	bl	8cd50 <strcat>
   87ed0:	910022c1 	add	x1, x22, #0x8
   87ed4:	9100e3e0 	add	x0, sp, #0x38
   87ed8:	9400139e 	bl	8cd50 <strcat>
   87edc:	aa1403e1 	mov	x1, x20
   87ee0:	9100e3e0 	add	x0, sp, #0x38
   87ee4:	9400139b 	bl	8cd50 <strcat>
   87ee8:	910042c1 	add	x1, x22, #0x10
   87eec:	9100e3e0 	add	x0, sp, #0x38
   87ef0:	94001398 	bl	8cd50 <strcat>
   87ef4:	910062c1 	add	x1, x22, #0x18
   87ef8:	9100e3e0 	add	x0, sp, #0x38
   87efc:	94001395 	bl	8cd50 <strcat>
   87f00:	9100e3e1 	add	x1, sp, #0x38
   87f04:	aa1303e0 	mov	x0, x19
   87f08:	97ffff8a 	bl	87d30 <CLogger::Write(char const*)>
   87f0c:	52801fe0 	mov	w0, #0xff                  	// #255
   87f10:	94000e88 	bl	8b930 <set_qemu_exit_status>
   87f14:	94000e8b 	bl	8b940 <halt>
   87f18:	d503201f 	nop
   87f1c:	d503201f 	nop

0000000000087f20 <CLogger::Read(void*, unsigned int, bool)>:
   87f20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   87f24:	910003fd 	mov	x29, sp
   87f28:	a90153f3 	stp	x19, x20, [sp, #16]
   87f2c:	aa0003f4 	mov	x20, x0
   87f30:	2a0203f3 	mov	w19, w2
   87f34:	b9403000 	ldr	w0, [x0, #48]
   87f38:	a9025bf5 	stp	x21, x22, [sp, #32]
   87f3c:	aa0103f5 	mov	x21, x1
   87f40:	12001c76 	and	w22, w3, #0xff
   87f44:	35000500 	cbnz	w0, 87fe4 <CLogger::Read(void*, unsigned int, bool)+0xc4>
   87f48:	29451280 	ldp	w0, w4, [x20, #40]
   87f4c:	6b04001f 	cmp	w0, w4
   87f50:	54000580 	b.eq	88000 <CLogger::Read(void*, unsigned int, bool)+0xe0>  // b.none
   87f54:	2a1303e6 	mov	w6, w19
   87f58:	d2800002 	mov	x2, #0x0                   	// #0
   87f5c:	14000009 	b	87f80 <CLogger::Read(void*, unsigned int, bool)+0x60>
   87f60:	f9401285 	ldr	x5, [x20, #32]
   87f64:	38e448a5 	ldrsb	w5, [x5, w4, uxtw]
   87f68:	12003404 	and	w4, w0, #0x3fff
   87f6c:	38226aa5 	strb	w5, [x21, x2]
   87f70:	91000442 	add	x2, x2, #0x1
   87f74:	b9402a80 	ldr	w0, [x20, #40]
   87f78:	6b04001f 	cmp	w0, w4
   87f7c:	540002e0 	b.eq	87fd8 <CLogger::Read(void*, unsigned int, bool)+0xb8>  // b.none
   87f80:	eb06005f 	cmp	x2, x6
   87f84:	11000480 	add	w0, w4, #0x1
   87f88:	2a0203e1 	mov	w1, w2
   87f8c:	54fffea1 	b.ne	87f60 <CLogger::Read(void*, unsigned int, bool)+0x40>  // b.any
   87f90:	2a0203f3 	mov	w19, w2
   87f94:	37000116 	tbnz	w22, #0, 87fb4 <CLogger::Read(void*, unsigned int, bool)+0x94>
   87f98:	b9403280 	ldr	w0, [x20, #48]
   87f9c:	35000120 	cbnz	w0, 87fc0 <CLogger::Read(void*, unsigned int, bool)+0xa0>
   87fa0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87fa4:	2a1303e0 	mov	w0, w19
   87fa8:	a94153f3 	ldp	x19, x20, [sp, #16]
   87fac:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87fb0:	d65f03c0 	ret
   87fb4:	b9403280 	ldr	w0, [x20, #48]
   87fb8:	b9002e84 	str	w4, [x20, #44]
   87fbc:	34ffff20 	cbz	w0, 87fa0 <CLogger::Read(void*, unsigned int, bool)+0x80>
   87fc0:	940017c8 	bl	8dee0 <LeaveCritical>
   87fc4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   87fc8:	2a1303e0 	mov	w0, w19
   87fcc:	a94153f3 	ldp	x19, x20, [sp, #16]
   87fd0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   87fd4:	d65f03c0 	ret
   87fd8:	11000433 	add	w19, w1, #0x1
   87fdc:	3607fdf6 	tbz	w22, #0, 87f98 <CLogger::Read(void*, unsigned int, bool)+0x78>
   87fe0:	17fffff5 	b	87fb4 <CLogger::Read(void*, unsigned int, bool)+0x94>
   87fe4:	9400178f 	bl	8de20 <EnterCritical>
   87fe8:	29451280 	ldp	w0, w4, [x20, #40]
   87fec:	6b04001f 	cmp	w0, w4
   87ff0:	54fffb21 	b.ne	87f54 <CLogger::Read(void*, unsigned int, bool)+0x34>  // b.any
   87ff4:	b9403280 	ldr	w0, [x20, #48]
   87ff8:	34000040 	cbz	w0, 88000 <CLogger::Read(void*, unsigned int, bool)+0xe0>
   87ffc:	940017b9 	bl	8dee0 <LeaveCritical>
   88000:	12800013 	mov	w19, #0xffffffff            	// #-1
   88004:	17ffffe7 	b	87fa0 <CLogger::Read(void*, unsigned int, bool)+0x80>
   88008:	d503201f 	nop
   8800c:	d503201f 	nop

0000000000088010 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
   88010:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   88014:	910003fd 	mov	x29, sp
   88018:	a90153f3 	stp	x19, x20, [sp, #16]
   8801c:	aa0003f3 	mov	x19, x0
   88020:	d2802200 	mov	x0, #0x110                 	// #272
   88024:	aa0103f4 	mov	x20, x1
   88028:	a9025bf5 	stp	x21, x22, [sp, #32]
   8802c:	2a0203f6 	mov	w22, w2
   88030:	aa0303f5 	mov	x21, x3
   88034:	940014df 	bl	8d3b0 <operator new(unsigned long)>
   88038:	aa1403e1 	mov	x1, x20
   8803c:	d2800642 	mov	x2, #0x32                  	// #50
   88040:	aa0003f4 	mov	x20, x0
   88044:	b8004416 	str	w22, [x0], #4
   88048:	94001336 	bl	8cd20 <strncpy>
   8804c:	aa1503e1 	mov	x1, x21
   88050:	9100da80 	add	x0, x20, #0x36
   88054:	3900d69f 	strb	wzr, [x20, #53]
   88058:	d2801902 	mov	x2, #0xc8                  	// #200
   8805c:	94001331 	bl	8cd20 <strncpy>
   88060:	f9400660 	ldr	x0, [x19, #8]
   88064:	3903f69f 	strb	wzr, [x20, #253]
   88068:	b40000a0 	cbz	x0, 8807c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x6c>
   8806c:	910133e2 	add	x2, sp, #0x4c
   88070:	910123e1 	add	x1, sp, #0x48
   88074:	94000f6b 	bl	8be20 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
   88078:	37000680 	tbnz	w0, #0, 88148 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x138>
   8807c:	52800000 	mov	w0, #0x0                   	// #0
   88080:	f900829f 	str	xzr, [x20, #256]
   88084:	b9010a9f 	str	wzr, [x20, #264]
   88088:	b941d262 	ldr	w2, [x19, #464]
   8808c:	b9010e80 	str	w0, [x20, #268]
   88090:	35000542 	cbnz	w2, 88138 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x128>
   88094:	b941ca61 	ldr	w1, [x19, #456]
   88098:	8b214e60 	add	x0, x19, w1, uxtw #3
   8809c:	b941ce63 	ldr	w3, [x19, #460]
   880a0:	f9001c14 	str	x20, [x0, #56]
   880a4:	7100c43f 	cmp	w1, #0x31
   880a8:	11000420 	add	w0, w1, #0x1
   880ac:	54000320 	b.eq	88110 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x100>  // b.none
   880b0:	6b03001f 	cmp	w0, w3
   880b4:	b901ca60 	str	w0, [x19, #456]
   880b8:	54000120 	b.eq	880dc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xcc>  // b.none
   880bc:	35000262 	cbnz	w2, 88108 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf8>
   880c0:	f940ee60 	ldr	x0, [x19, #472]
   880c4:	b4000040 	cbz	x0, 880cc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xbc>
   880c8:	d63f0000 	blr	x0
   880cc:	a94153f3 	ldp	x19, x20, [sp, #16]
   880d0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   880d4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   880d8:	d65f03c0 	ret
   880dc:	7100c03f 	cmp	w1, #0x30
   880e0:	8b204e60 	add	x0, x19, w0, uxtw #3
   880e4:	f9401c00 	ldr	x0, [x0, #56]
   880e8:	11000821 	add	w1, w1, #0x2
   880ec:	1a9f1021 	csel	w1, w1, wzr, ne	// ne = any
   880f0:	b901ce61 	str	w1, [x19, #460]
   880f4:	350001a2 	cbnz	w2, 88128 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x118>
   880f8:	b4fffe40 	cbz	x0, 880c0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb0>
   880fc:	d2802201 	mov	x1, #0x110                 	// #272
   88100:	940014ec 	bl	8d4b0 <operator delete(void*, unsigned long)>
   88104:	17ffffef 	b	880c0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb0>
   88108:	94001776 	bl	8dee0 <LeaveCritical>
   8810c:	17ffffed 	b	880c0 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xb0>
   88110:	b901ca7f 	str	wzr, [x19, #456]
   88114:	35fffd43 	cbnz	w3, 880bc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xac>
   88118:	52800021 	mov	w1, #0x1                   	// #1
   8811c:	f9401e60 	ldr	x0, [x19, #56]
   88120:	b901ce61 	str	w1, [x19, #460]
   88124:	34fffea2 	cbz	w2, 880f8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe8>
   88128:	f9001fe0 	str	x0, [sp, #56]
   8812c:	9400176d 	bl	8dee0 <LeaveCritical>
   88130:	f9401fe0 	ldr	x0, [sp, #56]
   88134:	17fffff1 	b	880f8 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xe8>
   88138:	2a0203e0 	mov	w0, w2
   8813c:	94001739 	bl	8de20 <EnterCritical>
   88140:	b941d262 	ldr	w2, [x19, #464]
   88144:	17ffffd4 	b	88094 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x84>
   88148:	294907e2 	ldp	w2, w1, [sp, #72]
   8814c:	5282eb23 	mov	w3, #0x1759                	// #5977
   88150:	72ba36e3 	movk	w3, #0xd1b7, lsl #16
   88154:	f9400660 	ldr	x0, [x19, #8]
   88158:	9ba37c21 	umull	x1, w1, w3
   8815c:	f9008282 	str	x2, [x20, #256]
   88160:	d36dfc21 	lsr	x1, x1, #45
   88164:	b9010a81 	str	w1, [x20, #264]
   88168:	94000eee 	bl	8bd20 <CTimer::GetTimeZone() const>
   8816c:	17ffffc7 	b	88088 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x78>

0000000000088170 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
   88170:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   88174:	910003fd 	mov	x29, sp
   88178:	a90153f3 	stp	x19, x20, [sp, #16]
   8817c:	aa0003f3 	mov	x19, x0
   88180:	b941d000 	ldr	w0, [x0, #464]
   88184:	a9025bf5 	stp	x21, x22, [sp, #32]
   88188:	aa0103f5 	mov	x21, x1
   8818c:	aa0203f6 	mov	x22, x2
   88190:	a90363f7 	stp	x23, x24, [sp, #48]
   88194:	aa0303f7 	mov	x23, x3
   88198:	aa0403f8 	mov	x24, x4
   8819c:	a9046bf9 	stp	x25, x26, [sp, #64]
   881a0:	aa0503f9 	mov	x25, x5
   881a4:	aa0603fa 	mov	x26, x6
   881a8:	35000440 	cbnz	w0, 88230 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xc0>
   881ac:	b941ca60 	ldr	w0, [x19, #456]
   881b0:	b941ce67 	ldr	w7, [x19, #460]
   881b4:	6b07001f 	cmp	w0, w7
   881b8:	540005e0 	b.eq	88274 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x104>  // b.none
   881bc:	8b274e60 	add	x0, x19, w7, uxtw #3
   881c0:	f9401c14 	ldr	x20, [x0, #56]
   881c4:	7100c4ff 	cmp	w7, #0x31
   881c8:	1a8707e7 	csinc	w7, wzr, w7, eq	// eq = none
   881cc:	b901ce67 	str	w7, [x19, #460]
   881d0:	aa1403e1 	mov	x1, x20
   881d4:	aa1603e0 	mov	x0, x22
   881d8:	b8404422 	ldr	w2, [x1], #4
   881dc:	b90002a2 	str	w2, [x21]
   881e0:	940012c4 	bl	8ccf0 <strcpy>
   881e4:	9100da81 	add	x1, x20, #0x36
   881e8:	aa1703e0 	mov	x0, x23
   881ec:	940012c1 	bl	8ccf0 <strcpy>
   881f0:	f9408283 	ldr	x3, [x20, #256]
   881f4:	aa1403e0 	mov	x0, x20
   881f8:	d2802201 	mov	x1, #0x110                 	// #272
   881fc:	b9410a82 	ldr	w2, [x20, #264]
   88200:	f9000303 	str	x3, [x24]
   88204:	b9000322 	str	w2, [x25]
   88208:	b9410e82 	ldr	w2, [x20, #268]
   8820c:	b9000342 	str	w2, [x26]
   88210:	940014a8 	bl	8d4b0 <operator delete(void*, unsigned long)>
   88214:	52800020 	mov	w0, #0x1                   	// #1
   88218:	a94153f3 	ldp	x19, x20, [sp, #16]
   8821c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   88220:	a94363f7 	ldp	x23, x24, [sp, #48]
   88224:	a9446bf9 	ldp	x25, x26, [sp, #64]
   88228:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8822c:	d65f03c0 	ret
   88230:	940016fc 	bl	8de20 <EnterCritical>
   88234:	b941ca61 	ldr	w1, [x19, #456]
   88238:	b941ce60 	ldr	w0, [x19, #460]
   8823c:	6b00003f 	cmp	w1, w0
   88240:	54000140 	b.eq	88268 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xf8>  // b.none
   88244:	8b204e62 	add	x2, x19, w0, uxtw #3
   88248:	f9401c54 	ldr	x20, [x2, #56]
   8824c:	7100c41f 	cmp	w0, #0x31
   88250:	1a8007e0 	csinc	w0, wzr, w0, eq	// eq = none
   88254:	b901ce60 	str	w0, [x19, #460]
   88258:	b941d261 	ldr	w1, [x19, #464]
   8825c:	34fffba1 	cbz	w1, 881d0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x60>
   88260:	94001720 	bl	8dee0 <LeaveCritical>
   88264:	17ffffdb 	b	881d0 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x60>
   88268:	b941d260 	ldr	w0, [x19, #464]
   8826c:	34000040 	cbz	w0, 88274 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x104>
   88270:	9400171c 	bl	8dee0 <LeaveCritical>
   88274:	52800000 	mov	w0, #0x0                   	// #0
   88278:	17ffffe8 	b	88218 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xa8>
   8827c:	d503201f 	nop

0000000000088280 <CLogger::RegisterEventNotificationHandler(void (*)())>:
   88280:	f900ec01 	str	x1, [x0, #472]
   88284:	d65f03c0 	ret
   88288:	d503201f 	nop
   8828c:	d503201f 	nop

0000000000088290 <CLogger::RegisterPanicHandler(void (*)())>:
   88290:	f900f001 	str	x1, [x0, #480]
   88294:	d65f03c0 	ret
   88298:	d503201f 	nop
   8829c:	d503201f 	nop

00000000000882a0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
   882a0:	a9b67bfd 	stp	x29, x30, [sp, #-160]!
   882a4:	910003fd 	mov	x29, sp
   882a8:	a90153f3 	stp	x19, x20, [sp, #16]
   882ac:	aa0003f3 	mov	x19, x0
   882b0:	910183e0 	add	x0, sp, #0x60
   882b4:	2a0203f4 	mov	w20, w2
   882b8:	a9025bf5 	stp	x21, x22, [sp, #32]
   882bc:	aa0403f5 	mov	x21, x4
   882c0:	aa0103f6 	mov	x22, x1
   882c4:	f9001bf7 	str	x23, [sp, #48]
   882c8:	aa0303f7 	mov	x23, x3
   882cc:	940007fd 	bl	8a2c0 <CString::CString()>
   882d0:	ad4006a0 	ldp	q0, q1, [x21]
   882d4:	aa1703e1 	mov	x1, x23
   882d8:	910103e2 	add	x2, sp, #0x40
   882dc:	910183e0 	add	x0, sp, #0x60
   882e0:	ad0207e0 	stp	q0, q1, [sp, #64]
   882e4:	94000a5f 	bl	8ac60 <CString::FormatV(char const*, std::__va_list)>
   882e8:	910183e0 	add	x0, sp, #0x60
   882ec:	94000839 	bl	8a3d0 <CString::operator char const*() const>
   882f0:	aa0003e3 	mov	x3, x0
   882f4:	2a1403e2 	mov	w2, w20
   882f8:	aa1303e0 	mov	x0, x19
   882fc:	aa1603e1 	mov	x1, x22
   88300:	97ffff44 	bl	88010 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
   88304:	b9400260 	ldr	w0, [x19]
   88308:	6b14001f 	cmp	w0, w20
   8830c:	54000583 	b.cc	883bc <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x11c>  // b.lo, b.ul, b.last
   88310:	910203e0 	add	x0, sp, #0x80
   88314:	d0000055 	adrp	x21, 92000 <uart_putHexByte::hexDigits>
   88318:	911bc2b5 	add	x21, x21, #0x6f0
   8831c:	940007e9 	bl	8a2c0 <CString::CString()>
   88320:	340005d4 	cbz	w20, 883d8 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x138>
   88324:	f9400660 	ldr	x0, [x19, #8]
   88328:	b40001e0 	cbz	x0, 88364 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xc4>
   8832c:	94000f39 	bl	8c010 <CTimer::GetTimeString()>
   88330:	aa0003f7 	mov	x23, x0
   88334:	b4000180 	cbz	x0, 88364 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xc4>
   88338:	94000826 	bl	8a3d0 <CString::operator char const*() const>
   8833c:	aa0003e1 	mov	x1, x0
   88340:	910203e0 	add	x0, sp, #0x80
   88344:	94000877 	bl	8a520 <CString::Append(char const*)>
   88348:	910082a1 	add	x1, x21, #0x20
   8834c:	910203e0 	add	x0, sp, #0x80
   88350:	94000874 	bl	8a520 <CString::Append(char const*)>
   88354:	f94002e1 	ldr	x1, [x23]
   88358:	aa1703e0 	mov	x0, x23
   8835c:	f9400421 	ldr	x1, [x1, #8]
   88360:	d63f0020 	blr	x1
   88364:	aa1603e1 	mov	x1, x22
   88368:	910203e0 	add	x0, sp, #0x80
   8836c:	9400086d 	bl	8a520 <CString::Append(char const*)>
   88370:	910022a1 	add	x1, x21, #0x8
   88374:	910203e0 	add	x0, sp, #0x80
   88378:	9400086a 	bl	8a520 <CString::Append(char const*)>
   8837c:	910183e0 	add	x0, sp, #0x60
   88380:	94000814 	bl	8a3d0 <CString::operator char const*() const>
   88384:	aa0003e1 	mov	x1, x0
   88388:	910203e0 	add	x0, sp, #0x80
   8838c:	94000865 	bl	8a520 <CString::Append(char const*)>
   88390:	34000314 	cbz	w20, 883f0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x150>
   88394:	910062a1 	add	x1, x21, #0x18
   88398:	910203e0 	add	x0, sp, #0x80
   8839c:	94000861 	bl	8a520 <CString::Append(char const*)>
   883a0:	910203e0 	add	x0, sp, #0x80
   883a4:	9400080b 	bl	8a3d0 <CString::operator char const*() const>
   883a8:	aa0003e1 	mov	x1, x0
   883ac:	aa1303e0 	mov	x0, x19
   883b0:	97fffe60 	bl	87d30 <CLogger::Write(char const*)>
   883b4:	910203e0 	add	x0, sp, #0x80
   883b8:	94000786 	bl	8a1d0 <CString::~CString()>
   883bc:	910183e0 	add	x0, sp, #0x60
   883c0:	94000784 	bl	8a1d0 <CString::~CString()>
   883c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   883c8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   883cc:	f9401bf7 	ldr	x23, [sp, #48]
   883d0:	a8ca7bfd 	ldp	x29, x30, [sp], #160
   883d4:	d65f03c0 	ret
   883d8:	aa1503e1 	mov	x1, x21
   883dc:	910203e0 	add	x0, sp, #0x80
   883e0:	94000804 	bl	8a3f0 <CString::operator=(char const*)>
   883e4:	f9400660 	ldr	x0, [x19, #8]
   883e8:	b5fffa20 	cbnz	x0, 8832c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x8c>
   883ec:	17ffffde 	b	88364 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xc4>
   883f0:	910042a1 	add	x1, x21, #0x10
   883f4:	910203e0 	add	x0, sp, #0x80
   883f8:	9400084a 	bl	8a520 <CString::Append(char const*)>
   883fc:	910062a1 	add	x1, x21, #0x18
   88400:	910203e0 	add	x0, sp, #0x80
   88404:	94000847 	bl	8a520 <CString::Append(char const*)>
   88408:	910203e0 	add	x0, sp, #0x80
   8840c:	940007f1 	bl	8a3d0 <CString::operator char const*() const>
   88410:	aa0003e1 	mov	x1, x0
   88414:	aa1303e0 	mov	x0, x19
   88418:	97fffe46 	bl	87d30 <CLogger::Write(char const*)>
   8841c:	f940f260 	ldr	x0, [x19, #480]
   88420:	b4000040 	cbz	x0, 88428 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x188>
   88424:	d63f0000 	blr	x0
   88428:	52801fe0 	mov	w0, #0xff                  	// #255
   8842c:	94000d41 	bl	8b930 <set_qemu_exit_status>
   88430:	94000d44 	bl	8b940 <halt>
   88434:	d503201f 	nop
   88438:	d503201f 	nop
   8843c:	d503201f 	nop

0000000000088440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
   88440:	a9b17bfd 	stp	x29, x30, [sp, #-240]!
   88444:	9103c3eb 	add	x11, sp, #0xf0
   88448:	9103c3e8 	add	x8, sp, #0xf0
   8844c:	910003fd 	mov	x29, sp
   88450:	910343ea 	add	x10, sp, #0xd0
   88454:	128003e9 	mov	w9, #0xffffffe0            	// #-32
   88458:	a9032fe8 	stp	x8, x11, [sp, #48]
   8845c:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   88460:	f90023ea 	str	x10, [sp, #64]
   88464:	b9004be9 	str	w9, [sp, #72]
   88468:	b9004fe8 	str	w8, [sp, #76]
   8846c:	ad41c7f0 	ldp	q16, q17, [sp, #48]
   88470:	a90d17e4 	stp	x4, x5, [sp, #208]
   88474:	910043e4 	add	x4, sp, #0x10
   88478:	3d8017e0 	str	q0, [sp, #80]
   8847c:	3d801be1 	str	q1, [sp, #96]
   88480:	ad00c7f0 	stp	q16, q17, [sp, #16]
   88484:	3d801fe2 	str	q2, [sp, #112]
   88488:	3d8023e3 	str	q3, [sp, #128]
   8848c:	3d8027e4 	str	q4, [sp, #144]
   88490:	3d802be5 	str	q5, [sp, #160]
   88494:	3d802fe6 	str	q6, [sp, #176]
   88498:	3d8033e7 	str	q7, [sp, #192]
   8849c:	a90e1fe6 	stp	x6, x7, [sp, #224]
   884a0:	97ffff80 	bl	882a0 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
   884a4:	a8cf7bfd 	ldp	x29, x30, [sp], #240
   884a8:	d65f03c0 	ret
   884ac:	d503201f 	nop

00000000000884b0 <CLogger::Initialize(CDevice*)>:
   884b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   884b4:	910003fd 	mov	x29, sp
   884b8:	f9000bf3 	str	x19, [sp, #16]
   884bc:	aa0003f3 	mov	x19, x0
   884c0:	f9000c01 	str	x1, [x0, #24]
   884c4:	9400030b 	bl	890f0 <CMachineInfo::Get()>
   884c8:	94000142 	bl	889d0 <CMachineInfo::GetMachineName() const>
   884cc:	d0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   884d0:	911bc021 	add	x1, x1, #0x6f0
   884d4:	d0000144 	adrp	x4, b2000 <appendBuf+0xa0>
   884d8:	aa0003e5 	mov	x5, x0
   884dc:	9100a023 	add	x3, x1, #0x28
   884e0:	aa1303e0 	mov	x0, x19
   884e4:	91014021 	add	x1, x1, #0x50
   884e8:	910fa084 	add	x4, x4, #0x3e8
   884ec:	52800062 	mov	w2, #0x3                   	// #3
   884f0:	97ffffd4 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   884f4:	f9400bf3 	ldr	x19, [sp, #16]
   884f8:	52800020 	mov	w0, #0x1                   	// #1
   884fc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   88500:	d65f03c0 	ret
	...

0000000000088510 <CMachineInfo::CMachineInfo()>:
   88510:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   88514:	910003fd 	mov	x29, sp
   88518:	f9000bf3 	str	x19, [sp, #16]
   8851c:	f90017e0 	str	x0, [sp, #40]
   88520:	f94017e0 	ldr	x0, [sp, #40]
   88524:	b900001f 	str	wzr, [x0]
   88528:	f94017e0 	ldr	x0, [sp, #40]
   8852c:	52800281 	mov	w1, #0x14                  	// #20
   88530:	b9001001 	str	w1, [x0, #16]
   88534:	f94017e0 	ldr	x0, [sp, #40]
   88538:	b900201f 	str	wzr, [x0, #32]
   8853c:	f94017e0 	ldr	x0, [sp, #40]
   88540:	b900301f 	str	wzr, [x0, #48]
   88544:	f94017e0 	ldr	x0, [sp, #40]
   88548:	52800081 	mov	w1, #0x4                   	// #4
   8854c:	b9004001 	str	w1, [x0, #64]
   88550:	f94017e0 	ldr	x0, [sp, #40]
   88554:	b900501f 	str	wzr, [x0, #80]
   88558:	f94017e0 	ldr	x0, [sp, #40]
   8855c:	528e3ea1 	mov	w1, #0x71f5                	// #29173
   88560:	7900c001 	strh	w1, [x0, #96]
   88564:	f94017e0 	ldr	x0, [sp, #40]
   88568:	f900381f 	str	xzr, [x0, #112]
   8856c:	d0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   88570:	910e6000 	add	x0, x0, #0x398
   88574:	f9400000 	ldr	x0, [x0]
   88578:	f100001f 	cmp	x0, #0x0
   8857c:	540004c0 	b.eq	88614 <CMachineInfo::CMachineInfo()+0x104>  // b.none
   88580:	d0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   88584:	910e6000 	add	x0, x0, #0x398
   88588:	f9400000 	ldr	x0, [x0]
   8858c:	b9400001 	ldr	w1, [x0]
   88590:	f94017e0 	ldr	x0, [sp, #40]
   88594:	b9000001 	str	w1, [x0]
   88598:	d0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   8859c:	910e6000 	add	x0, x0, #0x398
   885a0:	f9400000 	ldr	x0, [x0]
   885a4:	b9401001 	ldr	w1, [x0, #16]
   885a8:	f94017e0 	ldr	x0, [sp, #40]
   885ac:	b9001001 	str	w1, [x0, #16]
   885b0:	d0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   885b4:	910e6000 	add	x0, x0, #0x398
   885b8:	f9400000 	ldr	x0, [x0]
   885bc:	b9402001 	ldr	w1, [x0, #32]
   885c0:	f94017e0 	ldr	x0, [sp, #40]
   885c4:	b9002001 	str	w1, [x0, #32]
   885c8:	d0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   885cc:	910e6000 	add	x0, x0, #0x398
   885d0:	f9400000 	ldr	x0, [x0]
   885d4:	b9403001 	ldr	w1, [x0, #48]
   885d8:	f94017e0 	ldr	x0, [sp, #40]
   885dc:	b9003001 	str	w1, [x0, #48]
   885e0:	d0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   885e4:	910e6000 	add	x0, x0, #0x398
   885e8:	f9400000 	ldr	x0, [x0]
   885ec:	b9404001 	ldr	w1, [x0, #64]
   885f0:	f94017e0 	ldr	x0, [sp, #40]
   885f4:	b9004001 	str	w1, [x0, #64]
   885f8:	d0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   885fc:	910e6000 	add	x0, x0, #0x398
   88600:	f9400000 	ldr	x0, [x0]
   88604:	b9405001 	ldr	w1, [x0, #80]
   88608:	f94017e0 	ldr	x0, [sp, #40]
   8860c:	b9005001 	str	w1, [x0, #80]
   88610:	140000ce 	b	88948 <CMachineInfo::CMachineInfo()+0x438>
   88614:	d0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   88618:	910e6000 	add	x0, x0, #0x398
   8861c:	f94017e1 	ldr	x1, [sp, #40]
   88620:	f9000001 	str	x1, [x0]
   88624:	910163e0 	add	x0, sp, #0x58
   88628:	52800021 	mov	w1, #0x1                   	// #1
   8862c:	94001c81 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   88630:	910123e1 	add	x1, sp, #0x48
   88634:	910163e0 	add	x0, sp, #0x58
   88638:	52800004 	mov	w4, #0x0                   	// #0
   8863c:	52800203 	mov	w3, #0x10                  	// #16
   88640:	aa0103e2 	mov	x2, x1
   88644:	52800021 	mov	w1, #0x1                   	// #1
   88648:	72a000c1 	movk	w1, #0x6, lsl #16
   8864c:	94001cc9 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   88650:	12001c00 	and	w0, w0, #0xff
   88654:	12000000 	and	w0, w0, #0x1
   88658:	7100001f 	cmp	w0, #0x0
   8865c:	540000a0 	b.eq	88670 <CMachineInfo::CMachineInfo()+0x160>  // b.none
   88660:	b94057e0 	ldr	w0, [sp, #84]
   88664:	12003c01 	and	w1, w0, #0xffff
   88668:	f94017e0 	ldr	x0, [sp, #40]
   8866c:	7900c001 	strh	w1, [x0, #96]
   88670:	9100e3e1 	add	x1, sp, #0x38
   88674:	910163e0 	add	x0, sp, #0x58
   88678:	52800004 	mov	w4, #0x0                   	// #0
   8867c:	52800203 	mov	w3, #0x10                  	// #16
   88680:	aa0103e2 	mov	x2, x1
   88684:	52800041 	mov	w1, #0x2                   	// #2
   88688:	72a00021 	movk	w1, #0x1, lsl #16
   8868c:	94001cb9 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   88690:	12001c00 	and	w0, w0, #0xff
   88694:	52000000 	eor	w0, w0, #0x1
   88698:	12001c00 	and	w0, w0, #0xff
   8869c:	12000000 	and	w0, w0, #0x1
   886a0:	7100001f 	cmp	w0, #0x0
   886a4:	54000060 	b.eq	886b0 <CMachineInfo::CMachineInfo()+0x1a0>  // b.none
   886a8:	52800013 	mov	w19, #0x0                   	// #0
   886ac:	140000a4 	b	8893c <CMachineInfo::CMachineInfo()+0x42c>
   886b0:	b94047e1 	ldr	w1, [sp, #68]
   886b4:	f94017e0 	ldr	x0, [sp, #40]
   886b8:	b9000001 	str	w1, [x0]
   886bc:	f94017e0 	ldr	x0, [sp, #40]
   886c0:	b9400000 	ldr	w0, [x0]
   886c4:	12090000 	and	w0, w0, #0x800000
   886c8:	7100001f 	cmp	w0, #0x0
   886cc:	54000ca0 	b.eq	88860 <CMachineInfo::CMachineInfo()+0x350>  // b.none
   886d0:	f94017e0 	ldr	x0, [sp, #40]
   886d4:	b9400000 	ldr	w0, [x0]
   886d8:	53047c00 	lsr	w0, w0, #4
   886dc:	12001c00 	and	w0, w0, #0xff
   886e0:	b90067e0 	str	w0, [sp, #100]
   886e4:	b9006fff 	str	wzr, [sp, #108]
   886e8:	14000010 	b	88728 <CMachineInfo::CMachineInfo()+0x218>
   886ec:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   886f0:	911d4002 	add	x2, x0, #0x750
   886f4:	b9406fe1 	ldr	w1, [sp, #108]
   886f8:	aa0103e0 	mov	x0, x1
   886fc:	d37ff800 	lsl	x0, x0, #1
   88700:	8b010000 	add	x0, x0, x1
   88704:	d37ef400 	lsl	x0, x0, #2
   88708:	8b000040 	add	x0, x2, x0
   8870c:	b9400000 	ldr	w0, [x0]
   88710:	b94067e1 	ldr	w1, [sp, #100]
   88714:	6b00003f 	cmp	w1, w0
   88718:	54000100 	b.eq	88738 <CMachineInfo::CMachineInfo()+0x228>  // b.none
   8871c:	b9406fe0 	ldr	w0, [sp, #108]
   88720:	11000400 	add	w0, w0, #0x1
   88724:	b9006fe0 	str	w0, [sp, #108]
   88728:	b9406fe0 	ldr	w0, [sp, #108]
   8872c:	7100441f 	cmp	w0, #0x11
   88730:	54fffde9 	b.ls	886ec <CMachineInfo::CMachineInfo()+0x1dc>  // b.plast
   88734:	14000002 	b	8873c <CMachineInfo::CMachineInfo()+0x22c>
   88738:	d503201f 	nop
   8873c:	b9406fe0 	ldr	w0, [sp, #108]
   88740:	7100441f 	cmp	w0, #0x11
   88744:	54000069 	b.ls	88750 <CMachineInfo::CMachineInfo()+0x240>  // b.plast
   88748:	52800013 	mov	w19, #0x0                   	// #0
   8874c:	1400007c 	b	8893c <CMachineInfo::CMachineInfo()+0x42c>
   88750:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   88754:	911d4002 	add	x2, x0, #0x750
   88758:	b9406fe1 	ldr	w1, [sp, #108]
   8875c:	aa0103e0 	mov	x0, x1
   88760:	d37ff800 	lsl	x0, x0, #1
   88764:	8b010000 	add	x0, x0, x1
   88768:	d37ef400 	lsl	x0, x0, #2
   8876c:	8b000040 	add	x0, x2, x0
   88770:	b9400401 	ldr	w1, [x0, #4]
   88774:	f94017e0 	ldr	x0, [sp, #40]
   88778:	b9001001 	str	w1, [x0, #16]
   8877c:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   88780:	911d4002 	add	x2, x0, #0x750
   88784:	b9406fe1 	ldr	w1, [sp, #108]
   88788:	aa0103e0 	mov	x0, x1
   8878c:	d37ff800 	lsl	x0, x0, #1
   88790:	8b010000 	add	x0, x0, x1
   88794:	d37ef400 	lsl	x0, x0, #2
   88798:	8b000040 	add	x0, x2, x0
   8879c:	b9400801 	ldr	w1, [x0, #8]
   887a0:	f94017e0 	ldr	x0, [sp, #40]
   887a4:	b9002001 	str	w1, [x0, #32]
   887a8:	f94017e0 	ldr	x0, [sp, #40]
   887ac:	b9400000 	ldr	w0, [x0]
   887b0:	12000c00 	and	w0, w0, #0xf
   887b4:	11000401 	add	w1, w0, #0x1
   887b8:	f94017e0 	ldr	x0, [sp, #40]
   887bc:	b9003001 	str	w1, [x0, #48]
   887c0:	f94017e0 	ldr	x0, [sp, #40]
   887c4:	b9400000 	ldr	w0, [x0]
   887c8:	530c7c00 	lsr	w0, w0, #12
   887cc:	12000c01 	and	w1, w0, #0xf
   887d0:	f94017e0 	ldr	x0, [sp, #40]
   887d4:	b9004001 	str	w1, [x0, #64]
   887d8:	f94017e0 	ldr	x0, [sp, #40]
   887dc:	b9400000 	ldr	w0, [x0]
   887e0:	53147c00 	lsr	w0, w0, #20
   887e4:	12000800 	and	w0, w0, #0x7
   887e8:	52802001 	mov	w1, #0x100                 	// #256
   887ec:	1ac02020 	lsl	w0, w1, w0
   887f0:	2a0003e1 	mov	w1, w0
   887f4:	f94017e0 	ldr	x0, [sp, #40]
   887f8:	b9005001 	str	w1, [x0, #80]
   887fc:	f94017e0 	ldr	x0, [sp, #40]
   88800:	b9404000 	ldr	w0, [x0, #64]
   88804:	71000c1f 	cmp	w0, #0x3
   88808:	5400008d 	b.le	88818 <CMachineInfo::CMachineInfo()+0x308>
   8880c:	f94017e0 	ldr	x0, [sp, #40]
   88810:	52800081 	mov	w1, #0x4                   	// #4
   88814:	b9004001 	str	w1, [x0, #64]
   88818:	f94017e0 	ldr	x0, [sp, #40]
   8881c:	b9401000 	ldr	w0, [x0, #16]
   88820:	71000c1f 	cmp	w0, #0x3
   88824:	540008a1 	b.ne	88938 <CMachineInfo::CMachineInfo()+0x428>  // b.any
   88828:	f94017e0 	ldr	x0, [sp, #40]
   8882c:	b9405000 	ldr	w0, [x0, #80]
   88830:	7104001f 	cmp	w0, #0x100
   88834:	54000821 	b.ne	88938 <CMachineInfo::CMachineInfo()+0x428>  // b.any
   88838:	f94017e0 	ldr	x0, [sp, #40]
   8883c:	b9403000 	ldr	w0, [x0, #48]
   88840:	7100041f 	cmp	w0, #0x1
   88844:	54000061 	b.ne	88850 <CMachineInfo::CMachineInfo()+0x340>  // b.any
   88848:	52800020 	mov	w0, #0x1                   	// #1
   8884c:	14000002 	b	88854 <CMachineInfo::CMachineInfo()+0x344>
   88850:	52800040 	mov	w0, #0x2                   	// #2
   88854:	f94017e1 	ldr	x1, [sp, #40]
   88858:	b9001020 	str	w0, [x1, #16]
   8885c:	14000037 	b	88938 <CMachineInfo::CMachineInfo()+0x428>
   88860:	b9006bff 	str	wzr, [sp, #104]
   88864:	1400000e 	b	8889c <CMachineInfo::CMachineInfo()+0x38c>
   88868:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8886c:	9120a001 	add	x1, x0, #0x828
   88870:	b9406be0 	ldr	w0, [sp, #104]
   88874:	d37cec00 	lsl	x0, x0, #4
   88878:	8b000020 	add	x0, x1, x0
   8887c:	b9400001 	ldr	w1, [x0]
   88880:	f94017e0 	ldr	x0, [sp, #40]
   88884:	b9400000 	ldr	w0, [x0]
   88888:	6b00003f 	cmp	w1, w0
   8888c:	54000100 	b.eq	888ac <CMachineInfo::CMachineInfo()+0x39c>  // b.none
   88890:	b9406be0 	ldr	w0, [sp, #104]
   88894:	11000400 	add	w0, w0, #0x1
   88898:	b9006be0 	str	w0, [sp, #104]
   8889c:	b9406be0 	ldr	w0, [sp, #104]
   888a0:	7100401f 	cmp	w0, #0x10
   888a4:	54fffe29 	b.ls	88868 <CMachineInfo::CMachineInfo()+0x358>  // b.plast
   888a8:	14000002 	b	888b0 <CMachineInfo::CMachineInfo()+0x3a0>
   888ac:	d503201f 	nop
   888b0:	b9406be0 	ldr	w0, [sp, #104]
   888b4:	7100401f 	cmp	w0, #0x10
   888b8:	54000069 	b.ls	888c4 <CMachineInfo::CMachineInfo()+0x3b4>  // b.plast
   888bc:	52800013 	mov	w19, #0x0                   	// #0
   888c0:	1400001f 	b	8893c <CMachineInfo::CMachineInfo()+0x42c>
   888c4:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   888c8:	9120a001 	add	x1, x0, #0x828
   888cc:	b9406be0 	ldr	w0, [sp, #104]
   888d0:	d37cec00 	lsl	x0, x0, #4
   888d4:	8b000020 	add	x0, x1, x0
   888d8:	b9400401 	ldr	w1, [x0, #4]
   888dc:	f94017e0 	ldr	x0, [sp, #40]
   888e0:	b9001001 	str	w1, [x0, #16]
   888e4:	f94017e0 	ldr	x0, [sp, #40]
   888e8:	52800021 	mov	w1, #0x1                   	// #1
   888ec:	b9002001 	str	w1, [x0, #32]
   888f0:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   888f4:	9120a001 	add	x1, x0, #0x828
   888f8:	b9406be0 	ldr	w0, [sp, #104]
   888fc:	d37cec00 	lsl	x0, x0, #4
   88900:	8b000020 	add	x0, x1, x0
   88904:	b9400801 	ldr	w1, [x0, #8]
   88908:	f94017e0 	ldr	x0, [sp, #40]
   8890c:	b9003001 	str	w1, [x0, #48]
   88910:	f94017e0 	ldr	x0, [sp, #40]
   88914:	b900401f 	str	wzr, [x0, #64]
   88918:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8891c:	9120a001 	add	x1, x0, #0x828
   88920:	b9406be0 	ldr	w0, [sp, #104]
   88924:	d37cec00 	lsl	x0, x0, #4
   88928:	8b000020 	add	x0, x1, x0
   8892c:	b9400c01 	ldr	w1, [x0, #12]
   88930:	f94017e0 	ldr	x0, [sp, #40]
   88934:	b9005001 	str	w1, [x0, #80]
   88938:	52800033 	mov	w19, #0x1                   	// #1
   8893c:	910163e0 	add	x0, sp, #0x58
   88940:	94001bc0 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   88944:	7100067f 	cmp	w19, #0x1
   88948:	f9400bf3 	ldr	x19, [sp, #16]
   8894c:	a8c77bfd 	ldp	x29, x30, [sp], #112
   88950:	d65f03c0 	ret
   88954:	d503201f 	nop
   88958:	d503201f 	nop
   8895c:	d503201f 	nop

0000000000088960 <CMachineInfo::~CMachineInfo()>:
   88960:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   88964:	52800281 	mov	w1, #0x14                  	// #20
   88968:	910003fd 	mov	x29, sp
   8896c:	a90153f3 	stp	x19, x20, [sp, #16]
   88970:	aa0003f3 	mov	x19, x0
   88974:	f9403814 	ldr	x20, [x0, #112]
   88978:	b9001001 	str	w1, [x0, #16]
   8897c:	b40000d4 	cbz	x20, 88994 <CMachineInfo::~CMachineInfo()+0x34>
   88980:	aa1403e0 	mov	x0, x20
   88984:	940019d3 	bl	8f0d0 <CDeviceTreeBlob::~CDeviceTreeBlob()>
   88988:	aa1403e0 	mov	x0, x20
   8898c:	d2800101 	mov	x1, #0x8                   	// #8
   88990:	940012c8 	bl	8d4b0 <operator delete(void*, unsigned long)>
   88994:	d0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   88998:	f941cc01 	ldr	x1, [x0, #920]
   8899c:	eb13003f 	cmp	x1, x19
   889a0:	54000080 	b.eq	889b0 <CMachineInfo::~CMachineInfo()+0x50>  // b.none
   889a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   889a8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   889ac:	d65f03c0 	ret
   889b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   889b4:	f901cc1f 	str	xzr, [x0, #920]
   889b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   889bc:	d65f03c0 	ret

00000000000889c0 <CMachineInfo::GetMachineModel() const>:
   889c0:	b9401000 	ldr	w0, [x0, #16]
   889c4:	d65f03c0 	ret
   889c8:	d503201f 	nop
   889cc:	d503201f 	nop

00000000000889d0 <CMachineInfo::GetMachineName() const>:
   889d0:	b9801000 	ldrsw	x0, [x0, #16]
   889d4:	d0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   889d8:	91250021 	add	x1, x1, #0x940
   889dc:	f8607820 	ldr	x0, [x1, x0, lsl #3]
   889e0:	d65f03c0 	ret
   889e4:	d503201f 	nop
   889e8:	d503201f 	nop
   889ec:	d503201f 	nop

00000000000889f0 <CMachineInfo::GetModelMajor() const>:
   889f0:	b9402000 	ldr	w0, [x0, #32]
   889f4:	d65f03c0 	ret
   889f8:	d503201f 	nop
   889fc:	d503201f 	nop

0000000000088a00 <CMachineInfo::GetModelRevision() const>:
   88a00:	b9403000 	ldr	w0, [x0, #48]
   88a04:	d65f03c0 	ret
   88a08:	d503201f 	nop
   88a0c:	d503201f 	nop

0000000000088a10 <CMachineInfo::GetSoCType() const>:
   88a10:	b9404000 	ldr	w0, [x0, #64]
   88a14:	d65f03c0 	ret
   88a18:	d503201f 	nop
   88a1c:	d503201f 	nop

0000000000088a20 <CMachineInfo::GetRAMSize() const>:
   88a20:	b9405000 	ldr	w0, [x0, #80]
   88a24:	d65f03c0 	ret
   88a28:	d503201f 	nop
   88a2c:	d503201f 	nop

0000000000088a30 <CMachineInfo::GetSoCName() const>:
   88a30:	b9804000 	ldrsw	x0, [x0, #64]
   88a34:	d0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   88a38:	91250021 	add	x1, x1, #0x940
   88a3c:	9102c021 	add	x1, x1, #0xb0
   88a40:	f8607820 	ldr	x0, [x1, x0, lsl #3]
   88a44:	d65f03c0 	ret
   88a48:	d503201f 	nop
   88a4c:	d503201f 	nop

0000000000088a50 <CMachineInfo::GetRevisionRaw() const>:
   88a50:	b9400000 	ldr	w0, [x0]
   88a54:	d65f03c0 	ret
   88a58:	d503201f 	nop
   88a5c:	d503201f 	nop

0000000000088a60 <CMachineInfo::GetActLEDInfo() const>:
   88a60:	b9801000 	ldrsw	x0, [x0, #16]
   88a64:	d0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   88a68:	91250021 	add	x1, x1, #0x940
   88a6c:	91038021 	add	x1, x1, #0xe0
   88a70:	b8607820 	ldr	w0, [x1, x0, lsl #2]
   88a74:	d65f03c0 	ret
   88a78:	d503201f 	nop
   88a7c:	d503201f 	nop

0000000000088a80 <CMachineInfo::GetClockRate(unsigned int) const>:
   88a80:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   88a84:	910003fd 	mov	x29, sp
   88a88:	a90153f3 	stp	x19, x20, [sp, #16]
   88a8c:	2a0103f3 	mov	w19, w1
   88a90:	52800001 	mov	w1, #0x0                   	// #0
   88a94:	f90013f5 	str	x21, [sp, #32]
   88a98:	aa0003f5 	mov	x21, x0
   88a9c:	9100c3e0 	add	x0, sp, #0x30
   88aa0:	94001b64 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   88aa4:	52800041 	mov	w1, #0x2                   	// #2
   88aa8:	72a00061 	movk	w1, #0x3, lsl #16
   88aac:	b90047f3 	str	w19, [sp, #68]
   88ab0:	9100c3e0 	add	x0, sp, #0x30
   88ab4:	9100e3e2 	add	x2, sp, #0x38
   88ab8:	52800084 	mov	w4, #0x4                   	// #4
   88abc:	52800283 	mov	w3, #0x14                  	// #20
   88ac0:	94001bac 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   88ac4:	36000060 	tbz	w0, #0, 88ad0 <CMachineInfo::GetClockRate(unsigned int) const+0x50>
   88ac8:	b9404bf4 	ldr	w20, [sp, #72]
   88acc:	350002b4 	cbnz	w20, 88b20 <CMachineInfo::GetClockRate(unsigned int) const+0xa0>
   88ad0:	528008e1 	mov	w1, #0x47                  	// #71
   88ad4:	72a00061 	movk	w1, #0x3, lsl #16
   88ad8:	b90047f3 	str	w19, [sp, #68]
   88adc:	9100e3e2 	add	x2, sp, #0x38
   88ae0:	52800084 	mov	w4, #0x4                   	// #4
   88ae4:	52800283 	mov	w3, #0x14                  	// #20
   88ae8:	9100c3e0 	add	x0, sp, #0x30
   88aec:	94001ba1 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   88af0:	36000060 	tbz	w0, #0, 88afc <CMachineInfo::GetClockRate(unsigned int) const+0x7c>
   88af4:	b9404bf4 	ldr	w20, [sp, #72]
   88af8:	35000154 	cbnz	w20, 88b20 <CMachineInfo::GetClockRate(unsigned int) const+0xa0>
   88afc:	7100127f 	cmp	w19, #0x4
   88b00:	54000380 	b.eq	88b70 <CMachineInfo::GetClockRate(unsigned int) const+0xf0>  // b.none
   88b04:	540001c8 	b.hi	88b3c <CMachineInfo::GetClockRate(unsigned int) const+0xbc>  // b.pmore
   88b08:	7100067f 	cmp	w19, #0x1
   88b0c:	540004e0 	b.eq	88ba8 <CMachineInfo::GetClockRate(unsigned int) const+0x128>  // b.none
   88b10:	71000a7f 	cmp	w19, #0x2
   88b14:	540005c1 	b.ne	88bcc <CMachineInfo::GetClockRate(unsigned int) const+0x14c>  // b.any
   88b18:	528d8014 	mov	w20, #0x6c00                	// #27648
   88b1c:	72a05b94 	movk	w20, #0x2dc, lsl #16
   88b20:	9100c3e0 	add	x0, sp, #0x30
   88b24:	94001b47 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   88b28:	f94013f5 	ldr	x21, [sp, #32]
   88b2c:	2a1403e0 	mov	w0, w20
   88b30:	a94153f3 	ldp	x19, x20, [sp, #16]
   88b34:	a8c57bfd 	ldp	x29, x30, [sp], #80
   88b38:	d65f03c0 	ret
   88b3c:	7100327f 	cmp	w19, #0xc
   88b40:	54000340 	b.eq	88ba8 <CMachineInfo::GetClockRate(unsigned int) const+0x128>  // b.none
   88b44:	71003a7f 	cmp	w19, #0xe
   88b48:	54000421 	b.ne	88bcc <CMachineInfo::GetClockRate(unsigned int) const+0x14c>  // b.any
   88b4c:	9100c3e0 	add	x0, sp, #0x30
   88b50:	528d1814 	mov	w20, #0x68c0                	// #26816
   88b54:	72a08f14 	movk	w20, #0x478, lsl #16
   88b58:	94001b3a 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   88b5c:	f94013f5 	ldr	x21, [sp, #32]
   88b60:	2a1403e0 	mov	w0, w20
   88b64:	a94153f3 	ldp	x19, x20, [sp, #16]
   88b68:	a8c57bfd 	ldp	x29, x30, [sp], #80
   88b6c:	d65f03c0 	ret
   88b70:	b94022a1 	ldr	w1, [x21, #32]
   88b74:	52965000 	mov	w0, #0xb280                	// #45696
   88b78:	72a1dcc0 	movk	w0, #0xee6, lsl #16
   88b7c:	52946014 	mov	w20, #0xa300                	// #41728
   88b80:	72a23c34 	movk	w20, #0x11e1, lsl #16
   88b84:	7100083f 	cmp	w1, #0x2
   88b88:	1a808294 	csel	w20, w20, w0, hi	// hi = pmore
   88b8c:	9100c3e0 	add	x0, sp, #0x30
   88b90:	94001b2c 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   88b94:	f94013f5 	ldr	x21, [sp, #32]
   88b98:	2a1403e0 	mov	w0, w20
   88b9c:	a94153f3 	ldp	x19, x20, [sp, #16]
   88ba0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   88ba4:	d65f03c0 	ret
   88ba8:	9100c3e0 	add	x0, sp, #0x30
   88bac:	529c2014 	mov	w20, #0xe100                	// #57600
   88bb0:	72a0beb4 	movk	w20, #0x5f5, lsl #16
   88bb4:	94001b23 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   88bb8:	f94013f5 	ldr	x21, [sp, #32]
   88bbc:	2a1403e0 	mov	w0, w20
   88bc0:	a94153f3 	ldp	x19, x20, [sp, #16]
   88bc4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   88bc8:	d65f03c0 	ret
   88bcc:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   88bd0:	91250000 	add	x0, x0, #0x940
   88bd4:	9104e001 	add	x1, x0, #0x138
   88bd8:	52802c22 	mov	w2, #0x161                 	// #353
   88bdc:	91052000 	add	x0, x0, #0x148
   88be0:	94001af0 	bl	8f7a0 <assertion_failed>
   88be4:	d503201f 	nop
   88be8:	d503201f 	nop
   88bec:	d503201f 	nop

0000000000088bf0 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
   88bf0:	7100d83f 	cmp	w1, #0x36
   88bf4:	aa0003e2 	mov	x2, x0
   88bf8:	54000120 	b.eq	88c1c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x2c>  // b.none
   88bfc:	7100dc3f 	cmp	w1, #0x37
   88c00:	54000241 	b.ne	88c48 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x58>  // b.any
   88c04:	b9401042 	ldr	w2, [x2, #16]
   88c08:	52800501 	mov	w1, #0x28                  	// #40
   88c0c:	528005a0 	mov	w0, #0x2d                  	// #45
   88c10:	7100105f 	cmp	w2, #0x4
   88c14:	1a81b000 	csel	w0, w0, w1, lt	// lt = tstop
   88c18:	d65f03c0 	ret
   88c1c:	b9401041 	ldr	w1, [x2, #16]
   88c20:	52800500 	mov	w0, #0x28                  	// #40
   88c24:	71000c3f 	cmp	w1, #0x3
   88c28:	540000ed 	b.le	88c44 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x54>
   88c2c:	b9402042 	ldr	w2, [x2, #32]
   88c30:	52800521 	mov	w1, #0x29                  	// #41
   88c34:	528005a0 	mov	w0, #0x2d                  	// #45
   88c38:	71000c5f 	cmp	w2, #0x3
   88c3c:	1a813000 	csel	w0, w0, w1, cc	// cc = lo, ul, last
   88c40:	d65f03c0 	ret
   88c44:	d65f03c0 	ret
   88c48:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   88c4c:	91250000 	add	x0, x0, #0x940
   88c50:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   88c54:	9104e001 	add	x1, x0, #0x138
   88c58:	910003fd 	mov	x29, sp
   88c5c:	91052000 	add	x0, x0, #0x148
   88c60:	52803482 	mov	w2, #0x1a4                 	// #420
   88c64:	94001acf 	bl	8f7a0 <assertion_failed>
   88c68:	d503201f 	nop
   88c6c:	d503201f 	nop

0000000000088c70 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
   88c70:	b9402000 	ldr	w0, [x0, #32]
   88c74:	71000c1f 	cmp	w0, #0x3
   88c78:	54000108 	b.hi	88c98 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>  // b.pmore
   88c7c:	7100043f 	cmp	w1, #0x1
   88c80:	540001a0 	b.eq	88cb4 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>  // b.none
   88c84:	7100183f 	cmp	w1, #0x6
   88c88:	528ca000 	mov	w0, #0x6500                	// #25856
   88c8c:	72a3b9a0 	movk	w0, #0x1dcd, lsl #16
   88c90:	1a8013e0 	csel	w0, wzr, w0, ne	// ne = any
   88c94:	d65f03c0 	ret
   88c98:	7100043f 	cmp	w1, #0x1
   88c9c:	54000120 	b.eq	88cc0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>  // b.none
   88ca0:	7100183f 	cmp	w1, #0x6
   88ca4:	5282f000 	mov	w0, #0x1780                	// #6016
   88ca8:	72a59680 	movk	w0, #0x2cb4, lsl #16
   88cac:	1a8013e0 	csel	w0, wzr, w0, ne	// ne = any
   88cb0:	d65f03c0 	ret
   88cb4:	529f0000 	mov	w0, #0xf800                	// #63488
   88cb8:	72a02480 	movk	w0, #0x124, lsl #16
   88cbc:	d65f03c0 	ret
   88cc0:	529f3000 	mov	w0, #0xf980                	// #63872
   88cc4:	72a066e0 	movk	w0, #0x337, lsl #16
   88cc8:	d65f03c0 	ret
   88ccc:	d503201f 	nop

0000000000088cd0 <CMachineInfo::GetDevice(TDeviceId) const>:
   88cd0:	350000a1 	cbnz	w1, 88ce4 <CMachineInfo::GetDevice(TDeviceId) const+0x14>
   88cd4:	b9401000 	ldr	w0, [x0, #16]
   88cd8:	7100041f 	cmp	w0, #0x1
   88cdc:	1a9f07e0 	cset	w0, ne	// ne = any
   88ce0:	d65f03c0 	ret
   88ce4:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   88ce8:	91250000 	add	x0, x0, #0x940
   88cec:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   88cf0:	9104e001 	add	x1, x0, #0x138
   88cf4:	910003fd 	mov	x29, sp
   88cf8:	91052000 	add	x0, x0, #0x148
   88cfc:	52803be2 	mov	w2, #0x1df                 	// #479
   88d00:	94001aa8 	bl	8f7a0 <assertion_failed>
   88d04:	d503201f 	nop
   88d08:	d503201f 	nop
   88d0c:	d503201f 	nop

0000000000088d10 <CMachineInfo::ArePWMChannelsSwapped() const>:
   88d10:	b9401000 	ldr	w0, [x0, #16]
   88d14:	529fff61 	mov	w1, #0xfffb                	// #65531
   88d18:	72afffe1 	movk	w1, #0x7fff, lsl #16
   88d1c:	51001002 	sub	w2, w0, #0x4
   88d20:	51001800 	sub	w0, w0, #0x6
   88d24:	6b01005f 	cmp	w2, w1
   88d28:	7a429800 	ccmp	w0, #0x2, #0x0, ls	// ls = plast
   88d2c:	1a9f97e0 	cset	w0, hi	// hi = pmore
   88d30:	d65f03c0 	ret
   88d34:	d503201f 	nop
   88d38:	d503201f 	nop
   88d3c:	d503201f 	nop

0000000000088d40 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
   88d40:	d0000142 	adrp	x2, b2000 <appendBuf+0xa0>
   88d44:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   88d48:	910003fd 	mov	x29, sp
   88d4c:	f941cc43 	ldr	x3, [x2, #920]
   88d50:	aa0003e2 	mov	x2, x0
   88d54:	b5000063 	cbnz	x3, 88d60 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x20>
   88d58:	14000019 	b	88dbc <CMachineInfo::AllocateDMAChannel(unsigned int)+0x7c>
   88d5c:	aa0303e2 	mov	x2, x3
   88d60:	eb02007f 	cmp	x3, x2
   88d64:	54ffffc1 	b.ne	88d5c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>  // b.any
   88d68:	71003c3f 	cmp	w1, #0xf
   88d6c:	54000349 	b.ls	88dd4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x94>  // b.plast
   88d70:	7102043f 	cmp	w1, #0x81
   88d74:	54000560 	b.eq	88e20 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xe0>  // b.none
   88d78:	71020c3f 	cmp	w1, #0x83
   88d7c:	528000e0 	mov	w0, #0x7                   	// #7
   88d80:	528001c1 	mov	w1, #0xe                   	// #14
   88d84:	52800163 	mov	w3, #0xb                   	// #11
   88d88:	1a800021 	csel	w1, w1, w0, eq	// eq = none
   88d8c:	1a9f0063 	csel	w3, w3, wzr, eq	// eq = none
   88d90:	7940c044 	ldrh	w4, [x2, #96]
   88d94:	1ac12880 	asr	w0, w4, w1
   88d98:	36000080 	tbz	w0, #0, 88da8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x68>
   88d9c:	1400001b 	b	88e08 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc8>
   88da0:	1ac12880 	asr	w0, w4, w1
   88da4:	37000320 	tbnz	w0, #0, 88e08 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc8>
   88da8:	51000421 	sub	w1, w1, #0x1
   88dac:	6b03003f 	cmp	w1, w3
   88db0:	54ffff8a 	b.ge	88da0 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x60>  // b.tcont
   88db4:	52801000 	mov	w0, #0x80                  	// #128
   88db8:	14000012 	b	88e00 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   88dbc:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   88dc0:	91250000 	add	x0, x0, #0x940
   88dc4:	9104e001 	add	x1, x0, #0x138
   88dc8:	52803e02 	mov	w2, #0x1f0                 	// #496
   88dcc:	91054000 	add	x0, x0, #0x150
   88dd0:	94001a74 	bl	8f7a0 <assertion_failed>
   88dd4:	71001c3f 	cmp	w1, #0x7
   88dd8:	540002a8 	b.hi	88e2c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xec>  // b.pmore
   88ddc:	7940c064 	ldrh	w4, [x3, #96]
   88de0:	52801000 	mov	w0, #0x80                  	// #128
   88de4:	1ac12882 	asr	w2, w4, w1
   88de8:	360000c2 	tbz	w2, #0, 88e00 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   88dec:	52800022 	mov	w2, #0x1                   	// #1
   88df0:	2a0103e0 	mov	w0, w1
   88df4:	1ac12041 	lsl	w1, w2, w1
   88df8:	0a210081 	bic	w1, w4, w1
   88dfc:	7900c061 	strh	w1, [x3, #96]
   88e00:	a8c17bfd 	ldp	x29, x30, [sp], #16
   88e04:	d65f03c0 	ret
   88e08:	52800023 	mov	w3, #0x1                   	// #1
   88e0c:	2a0103e0 	mov	w0, w1
   88e10:	1ac12061 	lsl	w1, w3, w1
   88e14:	0a210081 	bic	w1, w4, w1
   88e18:	7900c041 	strh	w1, [x2, #96]
   88e1c:	17fffff9 	b	88e00 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc0>
   88e20:	52800003 	mov	w3, #0x0                   	// #0
   88e24:	528000c1 	mov	w1, #0x6                   	// #6
   88e28:	17ffffda 	b	88d90 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x50>
   88e2c:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   88e30:	91250000 	add	x0, x0, #0x940
   88e34:	9104e001 	add	x1, x0, #0x138
   88e38:	52803f22 	mov	w2, #0x1f9                 	// #505
   88e3c:	91058000 	add	x0, x0, #0x160
   88e40:	94001a58 	bl	8f7a0 <assertion_failed>
   88e44:	d503201f 	nop
   88e48:	d503201f 	nop
   88e4c:	d503201f 	nop

0000000000088e50 <CMachineInfo::FreeDMAChannel(unsigned int)>:
   88e50:	d0000142 	adrp	x2, b2000 <appendBuf+0xa0>
   88e54:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   88e58:	910003fd 	mov	x29, sp
   88e5c:	f941cc42 	ldr	x2, [x2, #920]
   88e60:	b5000062 	cbnz	x2, 88e6c <CMachineInfo::FreeDMAChannel(unsigned int)+0x1c>
   88e64:	1400000f 	b	88ea0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x50>
   88e68:	aa0203e0 	mov	x0, x2
   88e6c:	eb00005f 	cmp	x2, x0
   88e70:	54ffffc1 	b.ne	88e68 <CMachineInfo::FreeDMAChannel(unsigned int)+0x18>  // b.any
   88e74:	71001c3f 	cmp	w1, #0x7
   88e78:	54000208 	b.hi	88eb8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x68>  // b.pmore
   88e7c:	7940c040 	ldrh	w0, [x2, #96]
   88e80:	1ac12803 	asr	w3, w0, w1
   88e84:	37000263 	tbnz	w3, #0, 88ed0 <CMachineInfo::FreeDMAChannel(unsigned int)+0x80>
   88e88:	52800023 	mov	w3, #0x1                   	// #1
   88e8c:	1ac12061 	lsl	w1, w3, w1
   88e90:	2a010000 	orr	w0, w0, w1
   88e94:	7900c040 	strh	w0, [x2, #96]
   88e98:	a8c17bfd 	ldp	x29, x30, [sp], #16
   88e9c:	d65f03c0 	ret
   88ea0:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   88ea4:	91250000 	add	x0, x0, #0x940
   88ea8:	9104e001 	add	x1, x0, #0x138
   88eac:	528043a2 	mov	w2, #0x21d                 	// #541
   88eb0:	91054000 	add	x0, x0, #0x150
   88eb4:	94001a3b 	bl	8f7a0 <assertion_failed>
   88eb8:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   88ebc:	91250000 	add	x0, x0, #0x940
   88ec0:	9104e001 	add	x1, x0, #0x138
   88ec4:	528044a2 	mov	w2, #0x225                 	// #549
   88ec8:	91058000 	add	x0, x0, #0x160
   88ecc:	94001a35 	bl	8f7a0 <assertion_failed>
   88ed0:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   88ed4:	91250000 	add	x0, x0, #0x940
   88ed8:	9104e001 	add	x1, x0, #0x138
   88edc:	528044c2 	mov	w2, #0x226                 	// #550
   88ee0:	91060000 	add	x0, x0, #0x180
   88ee4:	94001a2f 	bl	8f7a0 <assertion_failed>
   88ee8:	d503201f 	nop
   88eec:	d503201f 	nop

0000000000088ef0 <CMachineInfo::FetchDTB()>:
   88ef0:	d2801f01 	mov	x1, #0xf8                  	// #248
   88ef4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   88ef8:	910003fd 	mov	x29, sp
   88efc:	a90153f3 	stp	x19, x20, [sp, #16]
   88f00:	aa0003f3 	mov	x19, x0
   88f04:	f90017e1 	str	x1, [sp, #40]
   88f08:	f94017e0 	ldr	x0, [sp, #40]
   88f0c:	b9400014 	ldr	w20, [x0]
   88f10:	34000174 	cbz	w20, 88f3c <CMachineInfo::FetchDTB()+0x4c>
   88f14:	f9403a60 	ldr	x0, [x19, #112]
   88f18:	b5000180 	cbnz	x0, 88f48 <CMachineInfo::FetchDTB()+0x58>
   88f1c:	d2800100 	mov	x0, #0x8                   	// #8
   88f20:	94001124 	bl	8d3b0 <operator new(unsigned long)>
   88f24:	2a1403e1 	mov	w1, w20
   88f28:	aa0003f4 	mov	x20, x0
   88f2c:	94001841 	bl	8f030 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)>
   88f30:	f94017e0 	ldr	x0, [sp, #40]
   88f34:	f9003a74 	str	x20, [x19, #112]
   88f38:	b900001f 	str	wzr, [x0]
   88f3c:	a94153f3 	ldp	x19, x20, [sp, #16]
   88f40:	a8c37bfd 	ldp	x29, x30, [sp], #48
   88f44:	d65f03c0 	ret
   88f48:	d0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   88f4c:	91250000 	add	x0, x0, #0x940
   88f50:	9104e001 	add	x1, x0, #0x138
   88f54:	52804662 	mov	w2, #0x233                 	// #563
   88f58:	9106a000 	add	x0, x0, #0x1a8
   88f5c:	94001a11 	bl	8f7a0 <assertion_failed>

0000000000088f60 <CMachineInfo::GetPCIeDMAMemory() const>:
   88f60:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   88f64:	d0000141 	adrp	x1, b2000 <appendBuf+0xa0>
   88f68:	910003fd 	mov	x29, sp
   88f6c:	a90153f3 	stp	x19, x20, [sp, #16]
   88f70:	aa0003f3 	mov	x19, x0
   88f74:	f941cc34 	ldr	x20, [x1, #920]
   88f78:	a9025bf5 	stp	x21, x22, [sp, #32]
   88f7c:	aa0803f5 	mov	x21, x8
   88f80:	b5000074 	cbnz	x20, 88f8c <CMachineInfo::GetPCIeDMAMemory() const+0x2c>
   88f84:	14000028 	b	89024 <CMachineInfo::GetPCIeDMAMemory() const+0xc4>
   88f88:	aa1403f3 	mov	x19, x20
   88f8c:	eb13029f 	cmp	x20, x19
   88f90:	54ffffc1 	b.ne	88f88 <CMachineInfo::GetPCIeDMAMemory() const+0x28>  // b.any
   88f94:	f9403a80 	ldr	x0, [x20, #112]
   88f98:	b4000280 	cbz	x0, 88fe8 <CMachineInfo::GetPCIeDMAMemory() const+0x88>
   88f9c:	d0000056 	adrp	x22, 92000 <uart_putHexByte::hexDigits>
   88fa0:	912502d6 	add	x22, x22, #0x940
   88fa4:	9106e2c1 	add	x1, x22, #0x1b8
   88fa8:	d2800002 	mov	x2, #0x0                   	// #0
   88fac:	940018fd 	bl	8f3a0 <CDeviceTreeBlob::FindNode(char const*, TDeviceTreeNode const*) const>
   88fb0:	aa0003e1 	mov	x1, x0
   88fb4:	b40001a0 	cbz	x0, 88fe8 <CMachineInfo::GetPCIeDMAMemory() const+0x88>
   88fb8:	f9403a80 	ldr	x0, [x20, #112]
   88fbc:	910742c2 	add	x2, x22, #0x1d0
   88fc0:	f9001bf7 	str	x23, [sp, #48]
   88fc4:	940018fb 	bl	8f3b0 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const>
   88fc8:	aa0003f7 	mov	x23, x0
   88fcc:	b40000c0 	cbz	x0, 88fe4 <CMachineInfo::GetPCIeDMAMemory() const+0x84>
   88fd0:	aa0003e1 	mov	x1, x0
   88fd4:	f9403a80 	ldr	x0, [x20, #112]
   88fd8:	94001952 	bl	8f520 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const>
   88fdc:	f100701f 	cmp	x0, #0x1c
   88fe0:	540003a0 	b.eq	89054 <CMachineInfo::GetPCIeDMAMemory() const+0xf4>  // b.none
   88fe4:	f9401bf7 	ldr	x23, [sp, #48]
   88fe8:	b9401261 	ldr	w1, [x19, #16]
   88fec:	b9405260 	ldr	w0, [x19, #80]
   88ff0:	7100403f 	cmp	w1, #0x10
   88ff4:	d36c7c01 	ubfiz	x1, x0, #20, #32
   88ff8:	54000240 	b.eq	89040 <CMachineInfo::GetPCIeDMAMemory() const+0xe0>  // b.none
   88ffc:	713ffc1f 	cmp	w0, #0xfff
   89000:	9a9f97f3 	cset	x19, hi	// hi = pmore
   89004:	d35e7673 	lsl	x19, x19, #34
   89008:	d2800016 	mov	x22, #0x0                   	// #0
   8900c:	a9005ab3 	stp	x19, x22, [x21]
   89010:	a94153f3 	ldp	x19, x20, [sp, #16]
   89014:	f9000aa1 	str	x1, [x21, #16]
   89018:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8901c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   89020:	d65f03c0 	ret
   89024:	b0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   89028:	91250000 	add	x0, x0, #0x940
   8902c:	f9001bf7 	str	x23, [sp, #48]
   89030:	9104e001 	add	x1, x0, #0x138
   89034:	528047a2 	mov	w2, #0x23d                 	// #573
   89038:	91054000 	add	x0, x0, #0x150
   8903c:	940019d9 	bl	8f7a0 <assertion_failed>
   89040:	b9403262 	ldr	w2, [x19, #48]
   89044:	d2800013 	mov	x19, #0x0                   	// #0
   89048:	7100105f 	cmp	w2, #0x4
   8904c:	54fffde9 	b.ls	89008 <CMachineInfo::GetPCIeDMAMemory() const+0xa8>  // b.plast
   89050:	17ffffeb 	b	88ffc <CMachineInfo::GetPCIeDMAMemory() const+0x9c>
   89054:	f9403a80 	ldr	x0, [x20, #112]
   89058:	aa1703e1 	mov	x1, x23
   8905c:	52800022 	mov	w2, #0x1                   	// #1
   89060:	94001950 	bl	8f5a0 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   89064:	aa1703e1 	mov	x1, x23
   89068:	2a0003f3 	mov	w19, w0
   8906c:	f9403a80 	ldr	x0, [x20, #112]
   89070:	52800042 	mov	w2, #0x2                   	// #2
   89074:	9400194b 	bl	8f5a0 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   89078:	2a0003e3 	mov	w3, w0
   8907c:	f9403a80 	ldr	x0, [x20, #112]
   89080:	aa1703e1 	mov	x1, x23
   89084:	52800062 	mov	w2, #0x3                   	// #3
   89088:	aa138073 	orr	x19, x3, x19, lsl #32
   8908c:	94001945 	bl	8f5a0 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   89090:	aa1703e1 	mov	x1, x23
   89094:	2a0003f6 	mov	w22, w0
   89098:	f9403a80 	ldr	x0, [x20, #112]
   8909c:	52800082 	mov	w2, #0x4                   	// #4
   890a0:	94001940 	bl	8f5a0 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   890a4:	2a0003e3 	mov	w3, w0
   890a8:	f9403a80 	ldr	x0, [x20, #112]
   890ac:	aa1703e1 	mov	x1, x23
   890b0:	528000a2 	mov	w2, #0x5                   	// #5
   890b4:	aa168076 	orr	x22, x3, x22, lsl #32
   890b8:	9400193a 	bl	8f5a0 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   890bc:	2a0003e3 	mov	w3, w0
   890c0:	f9403a80 	ldr	x0, [x20, #112]
   890c4:	aa1703e1 	mov	x1, x23
   890c8:	528000c2 	mov	w2, #0x6                   	// #6
   890cc:	2a0303f4 	mov	w20, w3
   890d0:	94001934 	bl	8f5a0 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
   890d4:	2a0003e0 	mov	w0, w0
   890d8:	f9401bf7 	ldr	x23, [sp, #48]
   890dc:	aa148001 	orr	x1, x0, x20, lsl #32
   890e0:	17ffffcb 	b	8900c <CMachineInfo::GetPCIeDMAMemory() const+0xac>
   890e4:	d503201f 	nop
   890e8:	d503201f 	nop
   890ec:	d503201f 	nop

00000000000890f0 <CMachineInfo::Get()>:
   890f0:	b0000140 	adrp	x0, b2000 <appendBuf+0xa0>
   890f4:	f941cc00 	ldr	x0, [x0, #920]
   890f8:	b4000040 	cbz	x0, 89100 <CMachineInfo::Get()+0x10>
   890fc:	d65f03c0 	ret
   89100:	b0000040 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   89104:	91250000 	add	x0, x0, #0x940
   89108:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8910c:	9104e001 	add	x1, x0, #0x138
   89110:	910003fd 	mov	x29, sp
   89114:	91054000 	add	x0, x0, #0x150
   89118:	52804de2 	mov	w2, #0x26f                 	// #623
   8911c:	940019a1 	bl	8f7a0 <assertion_failed>

0000000000089120 <CSerialDevice::Read(void*, unsigned long)>:
   89120:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   89124:	910003fd 	mov	x29, sp
   89128:	a90153f3 	stp	x19, x20, [sp, #16]
   8912c:	aa0003f3 	mov	x19, x0
   89130:	3940a000 	ldrb	w0, [x0, #40]
   89134:	f90013f5 	str	x21, [sp, #32]
   89138:	360008a0 	tbz	w0, #0, 8924c <CSerialDevice::Read(void*, unsigned long)+0x12c>
   8913c:	aa0103f4 	mov	x20, x1
   89140:	b4000901 	cbz	x1, 89260 <CSerialDevice::Read(void*, unsigned long)+0x140>
   89144:	f9400a60 	ldr	x0, [x19, #16]
   89148:	aa0203f5 	mov	x21, x2
   8914c:	b4000540 	cbz	x0, 891f4 <CSerialDevice::Read(void*, unsigned long)+0xd4>
   89150:	b9518260 	ldr	w0, [x19, #4480]
   89154:	35000740 	cbnz	w0, 8923c <CSerialDevice::Read(void*, unsigned long)+0x11c>
   89158:	b9495a60 	ldr	w0, [x19, #2392]
   8915c:	37f803c0 	tbnz	w0, #31, 891d4 <CSerialDevice::Read(void*, unsigned long)+0xb4>
   89160:	8b150283 	add	x3, x20, x21
   89164:	52800000 	mov	w0, #0x0                   	// #0
   89168:	b50001d5 	cbnz	x21, 891a0 <CSerialDevice::Read(void*, unsigned long)+0x80>
   8916c:	1400001c 	b	891dc <CSerialDevice::Read(void*, unsigned long)+0xbc>
   89170:	b9495661 	ldr	w1, [x19, #2388]
   89174:	8b214262 	add	x2, x19, w1, uxtw
   89178:	11000400 	add	w0, w0, #0x1
   8917c:	11000421 	add	w1, w1, #0x1
   89180:	b9095661 	str	w1, [x19, #2388]
   89184:	39454041 	ldrb	w1, [x2, #336]
   89188:	38001681 	strb	w1, [x20], #1
   8918c:	eb14007f 	cmp	x3, x20
   89190:	b9495661 	ldr	w1, [x19, #2388]
   89194:	12002821 	and	w1, w1, #0x7ff
   89198:	b9095661 	str	w1, [x19, #2388]
   8919c:	54000200 	b.eq	891dc <CSerialDevice::Read(void*, unsigned long)+0xbc>  // b.none
   891a0:	b9495262 	ldr	w2, [x19, #2384]
   891a4:	b9495661 	ldr	w1, [x19, #2388]
   891a8:	6b01005f 	cmp	w2, w1
   891ac:	54fffe21 	b.ne	89170 <CSerialDevice::Read(void*, unsigned long)+0x50>  // b.any
   891b0:	b9518261 	ldr	w1, [x19, #4480]
   891b4:	34000181 	cbz	w1, 891e4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   891b8:	b9003fe0 	str	w0, [sp, #60]
   891bc:	94001349 	bl	8dee0 <LeaveCritical>
   891c0:	a94153f3 	ldp	x19, x20, [sp, #16]
   891c4:	f94013f5 	ldr	x21, [sp, #32]
   891c8:	b9403fe0 	ldr	w0, [sp, #60]
   891cc:	a8c47bfd 	ldp	x29, x30, [sp], #64
   891d0:	d65f03c0 	ret
   891d4:	b9495a60 	ldr	w0, [x19, #2392]
   891d8:	b9095a7f 	str	wzr, [x19, #2392]
   891dc:	b9518261 	ldr	w1, [x19, #4480]
   891e0:	35fffec1 	cbnz	w1, 891b8 <CSerialDevice::Read(void*, unsigned long)+0x98>
   891e4:	a94153f3 	ldp	x19, x20, [sp, #16]
   891e8:	f94013f5 	ldr	x21, [sp, #32]
   891ec:	a8c47bfd 	ldp	x29, x30, [sp], #64
   891f0:	d65f03c0 	ret
   891f4:	b4ffff82 	cbz	x2, 891e4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   891f8:	8b020035 	add	x21, x1, x2
   891fc:	52800000 	mov	w0, #0x0                   	// #0
   89200:	14000008 	b	89220 <CSerialDevice::Read(void*, unsigned long)+0x100>
   89204:	37580381 	tbnz	w1, #11, 89274 <CSerialDevice::Read(void*, unsigned long)+0x154>
   89208:	374003a1 	tbnz	w1, #8, 8927c <CSerialDevice::Read(void*, unsigned long)+0x15c>
   8920c:	374803c1 	tbnz	w1, #9, 89284 <CSerialDevice::Read(void*, unsigned long)+0x164>
   89210:	38001681 	strb	w1, [x20], #1
   89214:	eb1402bf 	cmp	x21, x20
   89218:	11000400 	add	w0, w0, #0x1
   8921c:	54fffe40 	b.eq	891e4 <CSerialDevice::Read(void*, unsigned long)+0xc4>  // b.none
   89220:	f9401261 	ldr	x1, [x19, #32]
   89224:	b9401822 	ldr	w2, [x1, #24]
   89228:	3727fde2 	tbnz	w2, #4, 891e4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   8922c:	b9400021 	ldr	w1, [x1]
   89230:	3657fea1 	tbz	w1, #10, 89204 <CSerialDevice::Read(void*, unsigned long)+0xe4>
   89234:	12800000 	mov	w0, #0xffffffff            	// #-1
   89238:	17ffffeb 	b	891e4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   8923c:	940012f9 	bl	8de20 <EnterCritical>
   89240:	b9495a60 	ldr	w0, [x19, #2392]
   89244:	36fff8e0 	tbz	w0, #31, 89160 <CSerialDevice::Read(void*, unsigned long)+0x40>
   89248:	17ffffe3 	b	891d4 <CSerialDevice::Read(void*, unsigned long)+0xb4>
   8924c:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   89250:	91354021 	add	x1, x1, #0xd50
   89254:	91004020 	add	x0, x1, #0x10
   89258:	52803802 	mov	w2, #0x1c0                 	// #448
   8925c:	94001951 	bl	8f7a0 <assertion_failed>
   89260:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   89264:	91354021 	add	x1, x1, #0xd50
   89268:	91008020 	add	x0, x1, #0x20
   8926c:	52803862 	mov	w2, #0x1c3                 	// #451
   89270:	9400194c 	bl	8f7a0 <assertion_failed>
   89274:	12800020 	mov	w0, #0xfffffffe            	// #-2
   89278:	17ffffdb 	b	891e4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   8927c:	12800040 	mov	w0, #0xfffffffd            	// #-3
   89280:	17ffffd9 	b	891e4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   89284:	12800060 	mov	w0, #0xfffffffc            	// #-4
   89288:	17ffffd7 	b	891e4 <CSerialDevice::Read(void*, unsigned long)+0xc4>
   8928c:	d503201f 	nop

0000000000089290 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)>:
   89290:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   89294:	910003fd 	mov	x29, sp
   89298:	a90153f3 	stp	x19, x20, [sp, #16]
   8929c:	aa0003f3 	mov	x19, x0
   892a0:	2a0303f4 	mov	w20, w3
   892a4:	a9025bf5 	stp	x21, x22, [sp, #32]
   892a8:	aa0103f6 	mov	x22, x1
   892ac:	12001c55 	and	w21, w2, #0xff
   892b0:	a90363f7 	stp	x23, x24, [sp, #48]
   892b4:	9100c278 	add	x24, x19, #0x30
   892b8:	91030277 	add	x23, x19, #0xc0
   892bc:	a9046bf9 	stp	x25, x26, [sp, #64]
   892c0:	9101e279 	add	x25, x19, #0x78
   892c4:	5280003a 	mov	w26, #0x1                   	// #1
   892c8:	94001a9a 	bl	8fd30 <CDevice::CDevice()>
   892cc:	b0000042 	adrp	x2, 92000 <uart_putHexByte::hexDigits>
   892d0:	91346042 	add	x2, x2, #0xd18
   892d4:	f9000a76 	str	x22, [x19, #16]
   892d8:	aa1803e0 	mov	x0, x24
   892dc:	39006275 	strb	w21, [x19, #24]
   892e0:	91042276 	add	x22, x19, #0x108
   892e4:	f9000262 	str	x2, [x19]
   892e8:	110006b5 	add	w21, w21, #0x1
   892ec:	b9001e74 	str	w20, [x19, #28]
   892f0:	f900127f 	str	xzr, [x19, #32]
   892f4:	3900a27f 	strb	wzr, [x19, #40]
   892f8:	97fff4ae 	bl	865b0 <CGPIOPin::CGPIOPin()>
   892fc:	aa1903e0 	mov	x0, x25
   89300:	97fff4ac 	bl	865b0 <CGPIOPin::CGPIOPin()>
   89304:	aa1703e0 	mov	x0, x23
   89308:	97fff4aa 	bl	865b0 <CGPIOPin::CGPIOPin()>
   8930c:	aa1603e0 	mov	x0, x22
   89310:	97fff4a8 	bl	865b0 <CGPIOPin::CGPIOPin()>
   89314:	b9401e60 	ldr	w0, [x19, #28]
   89318:	b909527f 	str	wzr, [x19, #2384]
   8931c:	b909567f 	str	wzr, [x19, #2388]
   89320:	b9095a7f 	str	wzr, [x19, #2392]
   89324:	b9115e7f 	str	wzr, [x19, #4444]
   89328:	7100141f 	cmp	w0, #0x5
   8932c:	b911627f 	str	wzr, [x19, #4448]
   89330:	b911667a 	str	w26, [x19, #4452]
   89334:	f908b67f 	str	xzr, [x19, #4456]
   89338:	b9118275 	str	w21, [x19, #4480]
   8933c:	b911867a 	str	w26, [x19, #4484]
   89340:	540005a8 	b.hi	893f4 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x164>  // b.pmore
   89344:	b0000055 	adrp	x21, 92000 <uart_putHexByte::hexDigits>
   89348:	913542b5 	add	x21, x21, #0xd50
   8934c:	a90573fb 	stp	x27, x28, [sp, #80]
   89350:	9100c2a2 	add	x2, x21, #0x30
   89354:	d37c7e81 	ubfiz	x1, x20, #4, #32
   89358:	2a1403fb 	mov	w27, w20
   8935c:	b861685c 	ldr	w28, [x2, x1]
   89360:	7100d79f 	cmp	w28, #0x35
   89364:	54000548 	b.hi	8940c <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x17c>  // b.pmore
   89368:	2a0003e0 	mov	w0, w0
   8936c:	b0000141 	adrp	x1, b2000 <appendBuf+0xa0>
   89370:	910e8021 	add	x1, x1, #0x3a0
   89374:	f8607822 	ldr	x2, [x1, x0, lsl #3]
   89378:	b5000762 	cbnz	x2, 89464 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1d4>
   8937c:	9102c2a2 	add	x2, x21, #0xb0
   89380:	f8207833 	str	x19, [x1, x0, lsl #3]
   89384:	f87b7840 	ldr	x0, [x2, x27, lsl #3]
   89388:	f9001260 	str	x0, [x19, #32]
   8938c:	b4000740 	cbz	x0, 89474 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x1e4>
   89390:	340004d4 	cbz	w20, 89428 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x198>
   89394:	9100c2b5 	add	x21, x21, #0x30
   89398:	2a1c03e1 	mov	w1, w28
   8939c:	8b1b12b5 	add	x21, x21, x27, lsl #4
   893a0:	aa1703e0 	mov	x0, x23
   893a4:	97fff48f 	bl	865e0 <CGPIOPin::AssignPin(unsigned int)>
   893a8:	b94006a1 	ldr	w1, [x21, #4]
   893ac:	52800022 	mov	w2, #0x1                   	// #1
   893b0:	aa1703e0 	mov	x0, x23
   893b4:	11001021 	add	w1, w1, #0x4
   893b8:	97fff736 	bl	87090 <CGPIOPin::SetMode(TGPIOMode, bool)>
   893bc:	b9400aa1 	ldr	w1, [x21, #8]
   893c0:	aa1603e0 	mov	x0, x22
   893c4:	97fff487 	bl	865e0 <CGPIOPin::AssignPin(unsigned int)>
   893c8:	b9400ea1 	ldr	w1, [x21, #12]
   893cc:	aa1603e0 	mov	x0, x22
   893d0:	52800022 	mov	w2, #0x1                   	// #1
   893d4:	11001021 	add	w1, w1, #0x4
   893d8:	97fff72e 	bl	87090 <CGPIOPin::SetMode(TGPIOMode, bool)>
   893dc:	aa1603e0 	mov	x0, x22
   893e0:	52800041 	mov	w1, #0x2                   	// #2
   893e4:	97fff6bb 	bl	86ed0 <CGPIOPin::SetPullMode(TGPIOPullMode)>
   893e8:	a94573fb 	ldp	x27, x28, [sp, #80]
   893ec:	52800020 	mov	w0, #0x1                   	// #1
   893f0:	3900a260 	strb	w0, [x19, #40]
   893f4:	a94153f3 	ldp	x19, x20, [sp, #16]
   893f8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   893fc:	a94363f7 	ldp	x23, x24, [sp, #48]
   89400:	a9446bf9 	ldp	x25, x26, [sp, #64]
   89404:	a8c67bfd 	ldp	x29, x30, [sp], #96
   89408:	d65f03c0 	ret
   8940c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89410:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89414:	a94363f7 	ldp	x23, x24, [sp, #48]
   89418:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8941c:	a94573fb 	ldp	x27, x28, [sp, #80]
   89420:	a8c67bfd 	ldp	x29, x30, [sp], #96
   89424:	d65f03c0 	ret
   89428:	aa1803e0 	mov	x0, x24
   8942c:	52800401 	mov	w1, #0x20                  	// #32
   89430:	97fff46c 	bl	865e0 <CGPIOPin::AssignPin(unsigned int)>
   89434:	2a1a03e2 	mov	w2, w26
   89438:	aa1803e0 	mov	x0, x24
   8943c:	52800001 	mov	w1, #0x0                   	// #0
   89440:	97fff714 	bl	87090 <CGPIOPin::SetMode(TGPIOMode, bool)>
   89444:	aa1903e0 	mov	x0, x25
   89448:	52800421 	mov	w1, #0x21                  	// #33
   8944c:	97fff465 	bl	865e0 <CGPIOPin::AssignPin(unsigned int)>
   89450:	2a1a03e2 	mov	w2, w26
   89454:	aa1903e0 	mov	x0, x25
   89458:	52800001 	mov	w1, #0x0                   	// #0
   8945c:	97fff70d 	bl	87090 <CGPIOPin::SetMode(TGPIOMode, bool)>
   89460:	17ffffcd 	b	89394 <CSerialDevice::CSerialDevice(CInterruptSystem*, bool, unsigned int)+0x104>
   89464:	52801602 	mov	w2, #0xb0                  	// #176
   89468:	aa1503e1 	mov	x1, x21
   8946c:	910242a0 	add	x0, x21, #0x90
   89470:	940018cc 	bl	8f7a0 <assertion_failed>
   89474:	52801682 	mov	w2, #0xb4                  	// #180
   89478:	aa1503e1 	mov	x1, x21
   8947c:	910382a0 	add	x0, x21, #0xe0
   89480:	940018c8 	bl	8f7a0 <assertion_failed>
   89484:	d503201f 	nop
   89488:	d503201f 	nop
   8948c:	d503201f 	nop

0000000000089490 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)>:
   89490:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   89494:	910003fd 	mov	x29, sp
   89498:	a90363f7 	stp	x23, x24, [sp, #48]
   8949c:	3940a018 	ldrb	w24, [x0, #40]
   894a0:	370000d8 	tbnz	w24, #0, 894b8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x28>
   894a4:	52800018 	mov	w24, #0x0                   	// #0
   894a8:	2a1803e0 	mov	w0, w24
   894ac:	a94363f7 	ldp	x23, x24, [sp, #48]
   894b0:	a8c57bfd 	ldp	x29, x30, [sp], #80
   894b4:	d65f03c0 	ret
   894b8:	2a0403f7 	mov	w23, w4
   894bc:	a90153f3 	stp	x19, x20, [sp, #16]
   894c0:	2a0103f4 	mov	w20, w1
   894c4:	aa0003f3 	mov	x19, x0
   894c8:	a9025bf5 	stp	x21, x22, [sp, #32]
   894cc:	2a0203f5 	mov	w21, w2
   894d0:	2a0303f6 	mov	w22, w3
   894d4:	a9046bf9 	stp	x25, x26, [sp, #64]
   894d8:	97ffff06 	bl	890f0 <CMachineInfo::Get()>
   894dc:	52800041 	mov	w1, #0x2                   	// #2
   894e0:	97fffd68 	bl	88a80 <CMachineInfo::GetClockRate(unsigned int) const>
   894e4:	34000fe0 	cbz	w0, 896e0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x250>
   894e8:	5104b282 	sub	w2, w20, #0x12c
   894ec:	5280fa81 	mov	w1, #0x7d4                 	// #2004
   894f0:	72a007a1 	movk	w1, #0x3d, lsl #16
   894f4:	6b01005f 	cmp	w2, w1
   894f8:	54000fe8 	b.hi	896f4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x264>  // b.pmore
   894fc:	531c6e85 	lsl	w5, w20, #4
   89500:	529fffc1 	mov	w1, #0xfffe                	// #65534
   89504:	1ac5081a 	udiv	w26, w0, w5
   89508:	51000742 	sub	w2, w26, #0x1
   8950c:	6b01005f 	cmp	w2, w1
   89510:	54000fc8 	b.hi	89708 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x278>  // b.pmore
   89514:	1b058345 	msub	w5, w26, w5, w0
   89518:	531d70a5 	lsl	w5, w5, #3
   8951c:	1ad408a1 	udiv	w1, w5, w20
   89520:	12000020 	and	w0, w1, #0x1
   89524:	0b410414 	add	w20, w0, w1, lsr #1
   89528:	7100fe9f 	cmp	w20, #0x3f
   8952c:	54000f88 	b.hi	8971c <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x28c>  // b.pmore
   89530:	f9400a60 	ldr	x0, [x19, #16]
   89534:	b4000260 	cbz	x0, 89580 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xf0>
   89538:	b0000159 	adrp	x25, b2000 <appendBuf+0xa0>
   8953c:	910e8339 	add	x25, x25, #0x3a0
   89540:	b9403321 	ldr	w1, [x25, #48]
   89544:	35000921 	cbnz	w1, 89668 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1d8>
   89548:	39406261 	ldrb	w1, [x19, #24]
   8954c:	90000002 	adrp	x2, 89000 <CMachineInfo::GetPCIeDMAMemory() const+0xa0>
   89550:	913f0042 	add	x2, x2, #0xfc0
   89554:	f9001f20 	str	x0, [x25, #56]
   89558:	d2800003 	mov	x3, #0x0                   	// #0
   8955c:	39010321 	strb	w1, [x25, #64]
   89560:	37000a41 	tbnz	w1, #0, 896a8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x218>
   89564:	52801321 	mov	w1, #0x99                  	// #153
   89568:	940014ea 	bl	8e910 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   8956c:	b9403321 	ldr	w1, [x25, #48]
   89570:	7100143f 	cmp	w1, #0x5
   89574:	54000de8 	b.hi	89730 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2a0>  // b.pmore
   89578:	11000421 	add	w1, w1, #0x1
   8957c:	b9003321 	str	w1, [x25, #48]
   89580:	f9401260 	ldr	x0, [x19, #32]
   89584:	5280ffe1 	mov	w1, #0x7ff                 	// #2047
   89588:	510016a2 	sub	w2, w21, #0x5
   8958c:	71000c5f 	cmp	w2, #0x3
   89590:	b900381f 	str	wzr, [x0, #56]
   89594:	9100e004 	add	x4, x0, #0x38
   89598:	b9004401 	str	w1, [x0, #68]
   8959c:	b900241a 	str	w26, [x0, #36]
   895a0:	b9002814 	str	w20, [x0, #40]
   895a4:	54000da8 	b.hi	89758 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2c8>  // b.pmore
   895a8:	510006c1 	sub	w1, w22, #0x1
   895ac:	531b6aa2 	lsl	w2, w21, #5
   895b0:	7100043f 	cmp	w1, #0x1
   895b4:	51024042 	sub	w2, w2, #0x90
   895b8:	540008a8 	b.hi	896cc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x23c>  // b.pmore
   895bc:	71000adf 	cmp	w22, #0x2
   895c0:	321d0041 	orr	w1, w2, #0x8
   895c4:	1a820022 	csel	w2, w1, w2, eq	// eq = none
   895c8:	710006ff 	cmp	w23, #0x1
   895cc:	54000660 	b.eq	89698 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x208>  // b.none
   895d0:	71000aff 	cmp	w23, #0x2
   895d4:	540005e0 	b.eq	89690 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x200>  // b.none
   895d8:	35000b77 	cbnz	w23, 89744 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x2b4>
   895dc:	f9400a61 	ldr	x1, [x19, #16]
   895e0:	b4000601 	cbz	x1, 896a0 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x210>
   895e4:	52800121 	mov	w1, #0x9                   	// #9
   895e8:	52808a05 	mov	w5, #0x450                 	// #1104
   895ec:	b0000143 	adrp	x3, b2000 <appendBuf+0xa0>
   895f0:	910e8063 	add	x3, x3, #0x3a0
   895f4:	b9003401 	str	w1, [x0, #52]
   895f8:	52800021 	mov	w1, #0x1                   	// #1
   895fc:	b9002c02 	str	w2, [x0, #44]
   89600:	b9000085 	str	w5, [x4]
   89604:	b9401e60 	ldr	w0, [x19, #28]
   89608:	b9404462 	ldr	w2, [x3, #68]
   8960c:	1ac02020 	lsl	w0, w1, w0
   89610:	2a020000 	orr	w0, w0, w2
   89614:	b9004460 	str	w0, [x3, #68]
   89618:	d5033f9f 	dsb	sy
   8961c:	f9401260 	ldr	x0, [x19, #32]
   89620:	52806021 	mov	w1, #0x301                 	// #769
   89624:	b9003001 	str	w1, [x0, #48]
   89628:	97fff31e 	bl	862a0 <CDeviceNameService::Get()>
   8962c:	b9401e62 	ldr	w2, [x19, #28]
   89630:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   89634:	91354021 	add	x1, x1, #0xd50
   89638:	aa1303e3 	mov	x3, x19
   8963c:	91074021 	add	x1, x1, #0x1d0
   89640:	52800004 	mov	w4, #0x0                   	// #0
   89644:	11000442 	add	w2, w2, #0x1
   89648:	97fff322 	bl	862d0 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
   8964c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89650:	2a1803e0 	mov	w0, w24
   89654:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89658:	a94363f7 	ldp	x23, x24, [sp, #48]
   8965c:	a9446bf9 	ldp	x25, x26, [sp, #64]
   89660:	a8c57bfd 	ldp	x29, x30, [sp], #80
   89664:	d65f03c0 	ret
   89668:	f9401f22 	ldr	x2, [x25, #56]
   8966c:	eb02001f 	cmp	x0, x2
   89670:	54000240 	b.eq	896b8 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x228>  // b.none
   89674:	b9401e60 	ldr	w0, [x19, #28]
   89678:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8967c:	f8207b3f 	str	xzr, [x25, x0, lsl #3]
   89680:	a9446bf9 	ldp	x25, x26, [sp, #64]
   89684:	3900a27f 	strb	wzr, [x19, #40]
   89688:	a94153f3 	ldp	x19, x20, [sp, #16]
   8968c:	17ffff86 	b	894a4 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x14>
   89690:	321f0442 	orr	w2, w2, #0x6
   89694:	17ffffd2 	b	895dc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x14c>
   89698:	321f0042 	orr	w2, w2, #0x2
   8969c:	17ffffd0 	b	895dc <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x14c>
   896a0:	b9002c02 	str	w2, [x0, #44]
   896a4:	17ffffdf 	b	89620 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x190>
   896a8:	52801321 	mov	w1, #0x99                  	// #153
   896ac:	94001551 	bl	8ebf0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>
   896b0:	b9403321 	ldr	w1, [x25, #48]
   896b4:	17ffffaf 	b	89570 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xe0>
   896b8:	39406262 	ldrb	w2, [x19, #24]
   896bc:	39410320 	ldrb	w0, [x25, #64]
   896c0:	6b00005f 	cmp	w2, w0
   896c4:	54fff560 	b.eq	89570 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0xe0>  // b.none
   896c8:	17ffffeb 	b	89674 <CSerialDevice::Initialize(unsigned int, unsigned int, unsigned int, CSerialDevice::TParity)+0x1e4>
   896cc:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   896d0:	91354021 	add	x1, x1, #0xd50
   896d4:	9106a020 	add	x0, x1, #0x1a8
   896d8:	52802862 	mov	w2, #0x143                 	// #323
   896dc:	94001831 	bl	8f7a0 <assertion_failed>
   896e0:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   896e4:	91354021 	add	x1, x1, #0xd50
   896e8:	9103e020 	add	x0, x1, #0xf8
   896ec:	52802002 	mov	w2, #0x100                 	// #256
   896f0:	9400182c 	bl	8f7a0 <assertion_failed>
   896f4:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   896f8:	91354021 	add	x1, x1, #0xd50
   896fc:	91042020 	add	x0, x1, #0x108
   89700:	52802042 	mov	w2, #0x102                 	// #258
   89704:	94001827 	bl	8f7a0 <assertion_failed>
   89708:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8970c:	91354021 	add	x1, x1, #0xd50
   89710:	9104e020 	add	x0, x1, #0x138
   89714:	528020a2 	mov	w2, #0x105                 	// #261
   89718:	94001822 	bl	8f7a0 <assertion_failed>
   8971c:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   89720:	91354021 	add	x1, x1, #0xd50
   89724:	91058020 	add	x0, x1, #0x160
   89728:	52802102 	mov	w2, #0x108                 	// #264
   8972c:	9400181d 	bl	8f7a0 <assertion_failed>
   89730:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   89734:	91354021 	add	x1, x1, #0xd50
   89738:	9105e020 	add	x0, x1, #0x178
   8973c:	52802542 	mov	w2, #0x12a                 	// #298
   89740:	94001818 	bl	8f7a0 <assertion_failed>
   89744:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   89748:	91354021 	add	x1, x1, #0xd50
   8974c:	91068020 	add	x0, x1, #0x1a0
   89750:	52802ae2 	mov	w2, #0x157                 	// #343
   89754:	94001813 	bl	8f7a0 <assertion_failed>
   89758:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8975c:	91354021 	add	x1, x1, #0xd50
   89760:	91068020 	add	x0, x1, #0x1a0
   89764:	528027e2 	mov	w2, #0x13f                 	// #319
   89768:	9400180e 	bl	8f7a0 <assertion_failed>
   8976c:	d503201f 	nop

0000000000089770 <CSerialDevice::GetOptions() const>:
   89770:	b9516400 	ldr	w0, [x0, #4452]
   89774:	d65f03c0 	ret
   89778:	d503201f 	nop
   8977c:	d503201f 	nop

0000000000089780 <CSerialDevice::SetOptions(unsigned int)>:
   89780:	b9116401 	str	w1, [x0, #4452]
   89784:	d65f03c0 	ret
   89788:	d503201f 	nop
   8978c:	d503201f 	nop

0000000000089790 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())>:
   89790:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   89794:	910003fd 	mov	x29, sp
   89798:	f9400803 	ldr	x3, [x0, #16]
   8979c:	b4000183 	cbz	x3, 897cc <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x3c>
   897a0:	f948b403 	ldr	x3, [x0, #4456]
   897a4:	b50001e3 	cbnz	x3, 897e0 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x50>
   897a8:	b4000261 	cbz	x1, 897f4 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x64>
   897ac:	39c00023 	ldrsb	w3, [x1]
   897b0:	340002c3 	cbz	w3, 89808 <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x78>
   897b4:	b4000342 	cbz	x2, 8981c <CSerialDevice::RegisterMagicReceivedHandler(char const*, void (*)())+0x8c>
   897b8:	f908b401 	str	x1, [x0, #4456]
   897bc:	f908b801 	str	x1, [x0, #4464]
   897c0:	f908bc02 	str	x2, [x0, #4472]
   897c4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   897c8:	d65f03c0 	ret
   897cc:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   897d0:	91354021 	add	x1, x1, #0xd50
   897d4:	91076020 	add	x0, x1, #0x1d8
   897d8:	52804402 	mov	w2, #0x220                 	// #544
   897dc:	940017f1 	bl	8f7a0 <assertion_failed>
   897e0:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   897e4:	91354021 	add	x1, x1, #0xd50
   897e8:	9107c020 	add	x0, x1, #0x1f0
   897ec:	52804422 	mov	w2, #0x221                 	// #545
   897f0:	940017ec 	bl	8f7a0 <assertion_failed>
   897f4:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   897f8:	91354021 	add	x1, x1, #0xd50
   897fc:	91080020 	add	x0, x1, #0x200
   89800:	52804462 	mov	w2, #0x223                 	// #547
   89804:	940017e7 	bl	8f7a0 <assertion_failed>
   89808:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8980c:	91354021 	add	x1, x1, #0xd50
   89810:	91084020 	add	x0, x1, #0x210
   89814:	52804482 	mov	w2, #0x224                 	// #548
   89818:	940017e2 	bl	8f7a0 <assertion_failed>
   8981c:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   89820:	91354021 	add	x1, x1, #0xd50
   89824:	91088020 	add	x0, x1, #0x220
   89828:	528044a2 	mov	w2, #0x225                 	// #549
   8982c:	940017dd 	bl	8f7a0 <assertion_failed>

0000000000089830 <CSerialDevice::AvailableForWrite()>:
   89830:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89834:	910003fd 	mov	x29, sp
   89838:	f9000bf3 	str	x19, [sp, #16]
   8983c:	aa0003f3 	mov	x19, x0
   89840:	3940a000 	ldrb	w0, [x0, #40]
   89844:	360003a0 	tbz	w0, #0, 898b8 <CSerialDevice::AvailableForWrite()+0x88>
   89848:	f9400a60 	ldr	x0, [x19, #16]
   8984c:	b4000400 	cbz	x0, 898cc <CSerialDevice::AvailableForWrite()+0x9c>
   89850:	b9518260 	ldr	w0, [x19, #4480]
   89854:	350002c0 	cbnz	w0, 898ac <CSerialDevice::AvailableForWrite()+0x7c>
   89858:	b9516262 	ldr	w2, [x19, #4448]
   8985c:	b9515e61 	ldr	w1, [x19, #4444]
   89860:	6b01005f 	cmp	w2, w1
   89864:	b9516261 	ldr	w1, [x19, #4448]
   89868:	b9515e62 	ldr	w2, [x19, #4444]
   8986c:	54000108 	b.hi	8988c <CSerialDevice::AvailableForWrite()+0x5c>  // b.pmore
   89870:	111ffc33 	add	w19, w1, #0x7ff
   89874:	4b020273 	sub	w19, w19, w2
   89878:	35000100 	cbnz	w0, 89898 <CSerialDevice::AvailableForWrite()+0x68>
   8987c:	2a1303e0 	mov	w0, w19
   89880:	f9400bf3 	ldr	x19, [sp, #16]
   89884:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89888:	d65f03c0 	ret
   8988c:	51000433 	sub	w19, w1, #0x1
   89890:	4b020273 	sub	w19, w19, w2
   89894:	34ffff40 	cbz	w0, 8987c <CSerialDevice::AvailableForWrite()+0x4c>
   89898:	94001192 	bl	8dee0 <LeaveCritical>
   8989c:	2a1303e0 	mov	w0, w19
   898a0:	f9400bf3 	ldr	x19, [sp, #16]
   898a4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   898a8:	d65f03c0 	ret
   898ac:	9400115d 	bl	8de20 <EnterCritical>
   898b0:	b9518260 	ldr	w0, [x19, #4480]
   898b4:	17ffffe9 	b	89858 <CSerialDevice::AvailableForWrite()+0x28>
   898b8:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   898bc:	91354021 	add	x1, x1, #0xd50
   898c0:	91004020 	add	x0, x1, #0x10
   898c4:	528045e2 	mov	w2, #0x22f                 	// #559
   898c8:	940017b6 	bl	8f7a0 <assertion_failed>
   898cc:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   898d0:	91354021 	add	x1, x1, #0xd50
   898d4:	91076020 	add	x0, x1, #0x1d8
   898d8:	52804602 	mov	w2, #0x230                 	// #560
   898dc:	940017b1 	bl	8f7a0 <assertion_failed>

00000000000898e0 <CSerialDevice::AvailableForRead()>:
   898e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   898e4:	910003fd 	mov	x29, sp
   898e8:	f9000bf3 	str	x19, [sp, #16]
   898ec:	aa0003f3 	mov	x19, x0
   898f0:	3940a000 	ldrb	w0, [x0, #40]
   898f4:	36000380 	tbz	w0, #0, 89964 <CSerialDevice::AvailableForRead()+0x84>
   898f8:	f9400a60 	ldr	x0, [x19, #16]
   898fc:	b40003e0 	cbz	x0, 89978 <CSerialDevice::AvailableForRead()+0x98>
   89900:	b9518260 	ldr	w0, [x19, #4480]
   89904:	350002a0 	cbnz	w0, 89958 <CSerialDevice::AvailableForRead()+0x78>
   89908:	b9495262 	ldr	w2, [x19, #2384]
   8990c:	b9495661 	ldr	w1, [x19, #2388]
   89910:	6b01005f 	cmp	w2, w1
   89914:	b9495261 	ldr	w1, [x19, #2384]
   89918:	b9495662 	ldr	w2, [x19, #2388]
   8991c:	4b020033 	sub	w19, w1, w2
   89920:	540000c3 	b.cc	89938 <CSerialDevice::AvailableForRead()+0x58>  // b.lo, b.ul, b.last
   89924:	35000100 	cbnz	w0, 89944 <CSerialDevice::AvailableForRead()+0x64>
   89928:	2a1303e0 	mov	w0, w19
   8992c:	f9400bf3 	ldr	x19, [sp, #16]
   89930:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89934:	d65f03c0 	ret
   89938:	11200033 	add	w19, w1, #0x800
   8993c:	4b020273 	sub	w19, w19, w2
   89940:	34ffff40 	cbz	w0, 89928 <CSerialDevice::AvailableForRead()+0x48>
   89944:	94001167 	bl	8dee0 <LeaveCritical>
   89948:	2a1303e0 	mov	w0, w19
   8994c:	f9400bf3 	ldr	x19, [sp, #16]
   89950:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89954:	d65f03c0 	ret
   89958:	94001132 	bl	8de20 <EnterCritical>
   8995c:	b9518260 	ldr	w0, [x19, #4480]
   89960:	17ffffea 	b	89908 <CSerialDevice::AvailableForRead()+0x28>
   89964:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   89968:	91354021 	add	x1, x1, #0xd50
   8996c:	91004020 	add	x0, x1, #0x10
   89970:	528048a2 	mov	w2, #0x245                 	// #581
   89974:	9400178b 	bl	8f7a0 <assertion_failed>
   89978:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8997c:	91354021 	add	x1, x1, #0xd50
   89980:	91076020 	add	x0, x1, #0x1d8
   89984:	528048c2 	mov	w2, #0x246                 	// #582
   89988:	94001786 	bl	8f7a0 <assertion_failed>
   8998c:	d503201f 	nop

0000000000089990 <CSerialDevice::Peek()>:
   89990:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89994:	910003fd 	mov	x29, sp
   89998:	f9000bf3 	str	x19, [sp, #16]
   8999c:	aa0003f3 	mov	x19, x0
   899a0:	3940a000 	ldrb	w0, [x0, #40]
   899a4:	360003e0 	tbz	w0, #0, 89a20 <CSerialDevice::Peek()+0x90>
   899a8:	f9400a60 	ldr	x0, [x19, #16]
   899ac:	b4000440 	cbz	x0, 89a34 <CSerialDevice::Peek()+0xa4>
   899b0:	b9518260 	ldr	w0, [x19, #4480]
   899b4:	35000180 	cbnz	w0, 899e4 <CSerialDevice::Peek()+0x54>
   899b8:	b9495261 	ldr	w1, [x19, #2384]
   899bc:	b9495660 	ldr	w0, [x19, #2388]
   899c0:	6b00003f 	cmp	w1, w0
   899c4:	54000420 	b.eq	89a48 <CSerialDevice::Peek()+0xb8>  // b.none
   899c8:	b9495660 	ldr	w0, [x19, #2388]
   899cc:	8b204260 	add	x0, x19, w0, uxtw
   899d0:	39454013 	ldrb	w19, [x0, #336]
   899d4:	2a1303e0 	mov	w0, w19
   899d8:	f9400bf3 	ldr	x19, [sp, #16]
   899dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   899e0:	d65f03c0 	ret
   899e4:	9400110f 	bl	8de20 <EnterCritical>
   899e8:	b9495261 	ldr	w1, [x19, #2384]
   899ec:	b9495660 	ldr	w0, [x19, #2388]
   899f0:	6b00003f 	cmp	w1, w0
   899f4:	540002e0 	b.eq	89a50 <CSerialDevice::Peek()+0xc0>  // b.none
   899f8:	b9495660 	ldr	w0, [x19, #2388]
   899fc:	8b204260 	add	x0, x19, w0, uxtw
   89a00:	b9518261 	ldr	w1, [x19, #4480]
   89a04:	39454013 	ldrb	w19, [x0, #336]
   89a08:	34fffe61 	cbz	w1, 899d4 <CSerialDevice::Peek()+0x44>
   89a0c:	94001135 	bl	8dee0 <LeaveCritical>
   89a10:	2a1303e0 	mov	w0, w19
   89a14:	f9400bf3 	ldr	x19, [sp, #16]
   89a18:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89a1c:	d65f03c0 	ret
   89a20:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   89a24:	91354021 	add	x1, x1, #0xd50
   89a28:	91004020 	add	x0, x1, #0x10
   89a2c:	52804b62 	mov	w2, #0x25b                 	// #603
   89a30:	9400175c 	bl	8f7a0 <assertion_failed>
   89a34:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   89a38:	91354021 	add	x1, x1, #0xd50
   89a3c:	91076020 	add	x0, x1, #0x1d8
   89a40:	52804b82 	mov	w2, #0x25c                 	// #604
   89a44:	94001757 	bl	8f7a0 <assertion_failed>
   89a48:	12800013 	mov	w19, #0xffffffff            	// #-1
   89a4c:	17ffffe2 	b	899d4 <CSerialDevice::Peek()+0x44>
   89a50:	b9518261 	ldr	w1, [x19, #4480]
   89a54:	12800013 	mov	w19, #0xffffffff            	// #-1
   89a58:	35fffda1 	cbnz	w1, 89a0c <CSerialDevice::Peek()+0x7c>
   89a5c:	17ffffde 	b	899d4 <CSerialDevice::Peek()+0x44>

0000000000089a60 <CSerialDevice::Flush()>:
   89a60:	f9401001 	ldr	x1, [x0, #32]
   89a64:	91006021 	add	x1, x1, #0x18
   89a68:	b9400020 	ldr	w0, [x1]
   89a6c:	371fffe0 	tbnz	w0, #3, 89a68 <CSerialDevice::Flush()+0x8>
   89a70:	d65f03c0 	ret
   89a74:	d503201f 	nop
   89a78:	d503201f 	nop
   89a7c:	d503201f 	nop

0000000000089a80 <CSerialDevice::Write(unsigned char)>:
   89a80:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   89a84:	910003fd 	mov	x29, sp
   89a88:	a90153f3 	stp	x19, x20, [sp, #16]
   89a8c:	aa0003f3 	mov	x19, x0
   89a90:	f9400800 	ldr	x0, [x0, #16]
   89a94:	f90013f5 	str	x21, [sp, #32]
   89a98:	12001c35 	and	w21, w1, #0xff
   89a9c:	b4000480 	cbz	x0, 89b2c <CSerialDevice::Write(unsigned char)+0xac>
   89aa0:	b9518263 	ldr	w3, [x19, #4480]
   89aa4:	350002e3 	cbnz	w3, 89b00 <CSerialDevice::Write(unsigned char)+0x80>
   89aa8:	b9515e62 	ldr	w2, [x19, #4444]
   89aac:	b9516260 	ldr	w0, [x19, #4448]
   89ab0:	11000442 	add	w2, w2, #0x1
   89ab4:	12002842 	and	w2, w2, #0x7ff
   89ab8:	6b00005f 	cmp	w2, w0
   89abc:	54000500 	b.eq	89b5c <CSerialDevice::Write(unsigned char)+0xdc>  // b.none
   89ac0:	b9515e62 	ldr	w2, [x19, #4444]
   89ac4:	52800034 	mov	w20, #0x1                   	// #1
   89ac8:	8b224260 	add	x0, x19, w2, uxtw
   89acc:	0b140042 	add	w2, w2, w20
   89ad0:	b9115e62 	str	w2, [x19, #4444]
   89ad4:	39257015 	strb	w21, [x0, #2396]
   89ad8:	b9515e60 	ldr	w0, [x19, #4444]
   89adc:	12002800 	and	w0, w0, #0x7ff
   89ae0:	b9115e60 	str	w0, [x19, #4444]
   89ae4:	34000043 	cbz	w3, 89aec <CSerialDevice::Write(unsigned char)+0x6c>
   89ae8:	940010fe 	bl	8dee0 <LeaveCritical>
   89aec:	f94013f5 	ldr	x21, [sp, #32]
   89af0:	2a1403e0 	mov	w0, w20
   89af4:	a94153f3 	ldp	x19, x20, [sp, #16]
   89af8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   89afc:	d65f03c0 	ret
   89b00:	2a0303e0 	mov	w0, w3
   89b04:	52800014 	mov	w20, #0x0                   	// #0
   89b08:	940010c6 	bl	8de20 <EnterCritical>
   89b0c:	b9515e60 	ldr	w0, [x19, #4444]
   89b10:	b9516261 	ldr	w1, [x19, #4448]
   89b14:	b9518263 	ldr	w3, [x19, #4480]
   89b18:	11000400 	add	w0, w0, #0x1
   89b1c:	12002800 	and	w0, w0, #0x7ff
   89b20:	6b01001f 	cmp	w0, w1
   89b24:	54fffce1 	b.ne	89ac0 <CSerialDevice::Write(unsigned char)+0x40>  // b.any
   89b28:	17ffffef 	b	89ae4 <CSerialDevice::Write(unsigned char)+0x64>
   89b2c:	f9401261 	ldr	x1, [x19, #32]
   89b30:	91006022 	add	x2, x1, #0x18
   89b34:	d503201f 	nop
   89b38:	b9400040 	ldr	w0, [x2]
   89b3c:	372fffe0 	tbnz	w0, #5, 89b38 <CSerialDevice::Write(unsigned char)+0xb8>
   89b40:	52800034 	mov	w20, #0x1                   	// #1
   89b44:	b9000035 	str	w21, [x1]
   89b48:	f94013f5 	ldr	x21, [sp, #32]
   89b4c:	2a1403e0 	mov	w0, w20
   89b50:	a94153f3 	ldp	x19, x20, [sp, #16]
   89b54:	a8c37bfd 	ldp	x29, x30, [sp], #48
   89b58:	d65f03c0 	ret
   89b5c:	52800014 	mov	w20, #0x0                   	// #0
   89b60:	f94013f5 	ldr	x21, [sp, #32]
   89b64:	2a1403e0 	mov	w0, w20
   89b68:	a94153f3 	ldp	x19, x20, [sp, #16]
   89b6c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   89b70:	d65f03c0 	ret
   89b74:	d503201f 	nop
   89b78:	d503201f 	nop
   89b7c:	d503201f 	nop

0000000000089b80 <CSerialDevice::Write(void const*, unsigned long)>:
   89b80:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   89b84:	910003fd 	mov	x29, sp
   89b88:	a90153f3 	stp	x19, x20, [sp, #16]
   89b8c:	aa0003f3 	mov	x19, x0
   89b90:	3940a000 	ldrb	w0, [x0, #40]
   89b94:	a9025bf5 	stp	x21, x22, [sp, #32]
   89b98:	f9001bf7 	str	x23, [sp, #48]
   89b9c:	36001060 	tbz	w0, #0, 89da8 <CSerialDevice::Write(void const*, unsigned long)+0x228>
   89ba0:	b9518660 	ldr	w0, [x19, #4484]
   89ba4:	aa0103f4 	mov	x20, x1
   89ba8:	aa0203f6 	mov	x22, x2
   89bac:	35000e00 	cbnz	w0, 89d6c <CSerialDevice::Write(void const*, unsigned long)+0x1ec>
   89bb0:	b4001074 	cbz	x20, 89dbc <CSerialDevice::Write(void const*, unsigned long)+0x23c>
   89bb4:	8b160297 	add	x23, x20, x22
   89bb8:	52800015 	mov	w21, #0x0                   	// #0
   89bbc:	b50000b6 	cbnz	x22, 89bd0 <CSerialDevice::Write(void const*, unsigned long)+0x50>
   89bc0:	14000020 	b	89c40 <CSerialDevice::Write(void const*, unsigned long)+0xc0>
   89bc4:	eb17029f 	cmp	x20, x23
   89bc8:	110006b5 	add	w21, w21, #0x1
   89bcc:	540003a0 	b.eq	89c40 <CSerialDevice::Write(void const*, unsigned long)+0xc0>  // b.none
   89bd0:	f9400a60 	ldr	x0, [x19, #16]
   89bd4:	39400296 	ldrb	w22, [x20]
   89bd8:	b40008a0 	cbz	x0, 89cec <CSerialDevice::Write(void const*, unsigned long)+0x16c>
   89bdc:	b9518260 	ldr	w0, [x19, #4480]
   89be0:	35000940 	cbnz	w0, 89d08 <CSerialDevice::Write(void const*, unsigned long)+0x188>
   89be4:	b9515e60 	ldr	w0, [x19, #4444]
   89be8:	b9516261 	ldr	w1, [x19, #4448]
   89bec:	11000400 	add	w0, w0, #0x1
   89bf0:	12002800 	and	w0, w0, #0x7ff
   89bf4:	6b00003f 	cmp	w1, w0
   89bf8:	54000240 	b.eq	89c40 <CSerialDevice::Write(void const*, unsigned long)+0xc0>  // b.none
   89bfc:	b9515e60 	ldr	w0, [x19, #4444]
   89c00:	8b204261 	add	x1, x19, w0, uxtw
   89c04:	11000400 	add	w0, w0, #0x1
   89c08:	b9115e60 	str	w0, [x19, #4444]
   89c0c:	39257036 	strb	w22, [x1, #2396]
   89c10:	b9515e60 	ldr	w0, [x19, #4444]
   89c14:	12002800 	and	w0, w0, #0x7ff
   89c18:	b9115e60 	str	w0, [x19, #4444]
   89c1c:	38401680 	ldrb	w0, [x20], #1
   89c20:	7100281f 	cmp	w0, #0xa
   89c24:	54fffd01 	b.ne	89bc4 <CSerialDevice::Write(void const*, unsigned long)+0x44>  // b.any
   89c28:	b9516660 	ldr	w0, [x19, #4452]
   89c2c:	3607fcc0 	tbz	w0, #0, 89bc4 <CSerialDevice::Write(void const*, unsigned long)+0x44>
   89c30:	528001a1 	mov	w1, #0xd                   	// #13
   89c34:	aa1303e0 	mov	x0, x19
   89c38:	97ffff92 	bl	89a80 <CSerialDevice::Write(unsigned char)>
   89c3c:	3707fc40 	tbnz	w0, #0, 89bc4 <CSerialDevice::Write(void const*, unsigned long)+0x44>
   89c40:	b9518660 	ldr	w0, [x19, #4484]
   89c44:	35000900 	cbnz	w0, 89d64 <CSerialDevice::Write(void const*, unsigned long)+0x1e4>
   89c48:	f9400a60 	ldr	x0, [x19, #16]
   89c4c:	b4000440 	cbz	x0, 89cd4 <CSerialDevice::Write(void const*, unsigned long)+0x154>
   89c50:	b9518260 	ldr	w0, [x19, #4480]
   89c54:	350009e0 	cbnz	w0, 89d90 <CSerialDevice::Write(void const*, unsigned long)+0x210>
   89c58:	b9515e60 	ldr	w0, [x19, #4444]
   89c5c:	b9516261 	ldr	w1, [x19, #4448]
   89c60:	6b00003f 	cmp	w1, w0
   89c64:	54000380 	b.eq	89cd4 <CSerialDevice::Write(void const*, unsigned long)+0x154>  // b.none
   89c68:	b9515e60 	ldr	w0, [x19, #4444]
   89c6c:	b9516261 	ldr	w1, [x19, #4448]
   89c70:	6b00003f 	cmp	w1, w0
   89c74:	540002c0 	b.eq	89ccc <CSerialDevice::Write(void const*, unsigned long)+0x14c>  // b.none
   89c78:	f9401262 	ldr	x2, [x19, #32]
   89c7c:	91006043 	add	x3, x2, #0x18
   89c80:	1400000e 	b	89cb8 <CSerialDevice::Write(void const*, unsigned long)+0x138>
   89c84:	b9516260 	ldr	w0, [x19, #4448]
   89c88:	8b204261 	add	x1, x19, w0, uxtw
   89c8c:	11000400 	add	w0, w0, #0x1
   89c90:	b9116260 	str	w0, [x19, #4448]
   89c94:	39657020 	ldrb	w0, [x1, #2396]
   89c98:	b9000040 	str	w0, [x2]
   89c9c:	b9516260 	ldr	w0, [x19, #4448]
   89ca0:	12002800 	and	w0, w0, #0x7ff
   89ca4:	b9116260 	str	w0, [x19, #4448]
   89ca8:	b9515e61 	ldr	w1, [x19, #4444]
   89cac:	b9516260 	ldr	w0, [x19, #4448]
   89cb0:	6b00003f 	cmp	w1, w0
   89cb4:	540000c0 	b.eq	89ccc <CSerialDevice::Write(void const*, unsigned long)+0x14c>  // b.none
   89cb8:	b9400060 	ldr	w0, [x3]
   89cbc:	362ffe40 	tbz	w0, #5, 89c84 <CSerialDevice::Write(void const*, unsigned long)+0x104>
   89cc0:	b9403840 	ldr	w0, [x2, #56]
   89cc4:	321b0000 	orr	w0, w0, #0x20
   89cc8:	b9003840 	str	w0, [x2, #56]
   89ccc:	b9518260 	ldr	w0, [x19, #4480]
   89cd0:	35000520 	cbnz	w0, 89d74 <CSerialDevice::Write(void const*, unsigned long)+0x1f4>
   89cd4:	a94153f3 	ldp	x19, x20, [sp, #16]
   89cd8:	2a1503e0 	mov	w0, w21
   89cdc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89ce0:	f9401bf7 	ldr	x23, [sp, #48]
   89ce4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   89ce8:	d65f03c0 	ret
   89cec:	f9401262 	ldr	x2, [x19, #32]
   89cf0:	91006041 	add	x1, x2, #0x18
   89cf4:	d503201f 	nop
   89cf8:	b9400020 	ldr	w0, [x1]
   89cfc:	372fffe0 	tbnz	w0, #5, 89cf8 <CSerialDevice::Write(void const*, unsigned long)+0x178>
   89d00:	b9000056 	str	w22, [x2]
   89d04:	17ffffc6 	b	89c1c <CSerialDevice::Write(void const*, unsigned long)+0x9c>
   89d08:	94001046 	bl	8de20 <EnterCritical>
   89d0c:	b9515e61 	ldr	w1, [x19, #4444]
   89d10:	b9516262 	ldr	w2, [x19, #4448]
   89d14:	b9518260 	ldr	w0, [x19, #4480]
   89d18:	11000421 	add	w1, w1, #0x1
   89d1c:	12002821 	and	w1, w1, #0x7ff
   89d20:	6b02003f 	cmp	w1, w2
   89d24:	54000180 	b.eq	89d54 <CSerialDevice::Write(void const*, unsigned long)+0x1d4>  // b.none
   89d28:	b9515e61 	ldr	w1, [x19, #4444]
   89d2c:	8b214262 	add	x2, x19, w1, uxtw
   89d30:	11000421 	add	w1, w1, #0x1
   89d34:	b9115e61 	str	w1, [x19, #4444]
   89d38:	39257056 	strb	w22, [x2, #2396]
   89d3c:	b9515e61 	ldr	w1, [x19, #4444]
   89d40:	12002821 	and	w1, w1, #0x7ff
   89d44:	b9115e61 	str	w1, [x19, #4444]
   89d48:	34fff6a0 	cbz	w0, 89c1c <CSerialDevice::Write(void const*, unsigned long)+0x9c>
   89d4c:	94001065 	bl	8dee0 <LeaveCritical>
   89d50:	17ffffb3 	b	89c1c <CSerialDevice::Write(void const*, unsigned long)+0x9c>
   89d54:	34fff760 	cbz	w0, 89c40 <CSerialDevice::Write(void const*, unsigned long)+0xc0>
   89d58:	94001062 	bl	8dee0 <LeaveCritical>
   89d5c:	b9518660 	ldr	w0, [x19, #4484]
   89d60:	34fff740 	cbz	w0, 89c48 <CSerialDevice::Write(void const*, unsigned long)+0xc8>
   89d64:	9400105f 	bl	8dee0 <LeaveCritical>
   89d68:	17ffffb8 	b	89c48 <CSerialDevice::Write(void const*, unsigned long)+0xc8>
   89d6c:	9400102d 	bl	8de20 <EnterCritical>
   89d70:	17ffff90 	b	89bb0 <CSerialDevice::Write(void const*, unsigned long)+0x30>
   89d74:	9400105b 	bl	8dee0 <LeaveCritical>
   89d78:	a94153f3 	ldp	x19, x20, [sp, #16]
   89d7c:	2a1503e0 	mov	w0, w21
   89d80:	a9425bf5 	ldp	x21, x22, [sp, #32]
   89d84:	f9401bf7 	ldr	x23, [sp, #48]
   89d88:	a8c47bfd 	ldp	x29, x30, [sp], #64
   89d8c:	d65f03c0 	ret
   89d90:	94001024 	bl	8de20 <EnterCritical>
   89d94:	b9515e61 	ldr	w1, [x19, #4444]
   89d98:	b9516260 	ldr	w0, [x19, #4448]
   89d9c:	6b00003f 	cmp	w1, w0
   89da0:	54fff641 	b.ne	89c68 <CSerialDevice::Write(void const*, unsigned long)+0xe8>  // b.any
   89da4:	17ffffca 	b	89ccc <CSerialDevice::Write(void const*, unsigned long)+0x14c>
   89da8:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   89dac:	91354021 	add	x1, x1, #0xd50
   89db0:	91004020 	add	x0, x1, #0x10
   89db4:	52802ec2 	mov	w2, #0x176                 	// #374
   89db8:	9400167a 	bl	8f7a0 <assertion_failed>
   89dbc:	b0000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   89dc0:	91354021 	add	x1, x1, #0xd50
   89dc4:	91008020 	add	x0, x1, #0x20
   89dc8:	52803062 	mov	w2, #0x183                 	// #387
   89dcc:	94001675 	bl	8f7a0 <assertion_failed>

0000000000089dd0 <CSerialDevice::InterruptHandler()>:
   89dd0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   89dd4:	910003fd 	mov	x29, sp
   89dd8:	a90153f3 	stp	x19, x20, [sp, #16]
   89ddc:	aa0003f3 	mov	x19, x0
   89de0:	b9518000 	ldr	w0, [x0, #4480]
   89de4:	35000ca0 	cbnz	w0, 89f78 <CSerialDevice::InterruptHandler()+0x1a8>
   89de8:	f9401262 	ldr	x2, [x19, #32]
   89dec:	b9404040 	ldr	w0, [x2, #64]
   89df0:	91006043 	add	x3, x2, #0x18
   89df4:	b9004440 	str	w0, [x2, #68]
   89df8:	b9401840 	ldr	w0, [x2, #24]
   89dfc:	37200cc0 	tbnz	w0, #4, 89f94 <CSerialDevice::InterruptHandler()+0x1c4>
   89e00:	f948b665 	ldr	x5, [x19, #4456]
   89e04:	52800014 	mov	w20, #0x0                   	// #0
   89e08:	12800026 	mov	w6, #0xfffffffe            	// #-2
   89e0c:	12800007 	mov	w7, #0xffffffff            	// #-1
   89e10:	52800028 	mov	w8, #0x1                   	// #1
   89e14:	d503201f 	nop
   89e18:	b9400041 	ldr	w1, [x2]
   89e1c:	365006e1 	tbz	w1, #10, 89ef8 <CSerialDevice::InterruptHandler()+0x128>
   89e20:	b9495a60 	ldr	w0, [x19, #2392]
   89e24:	35000040 	cbnz	w0, 89e2c <CSerialDevice::InterruptHandler()+0x5c>
   89e28:	b9095a67 	str	w7, [x19, #2392]
   89e2c:	b40000c5 	cbz	x5, 89e44 <CSerialDevice::InterruptHandler()+0x74>
   89e30:	f948ba60 	ldr	x0, [x19, #4464]
   89e34:	39c00004 	ldrsb	w4, [x0]
   89e38:	6b21809f 	cmp	w4, w1, sxtb
   89e3c:	540007c0 	b.eq	89f34 <CSerialDevice::InterruptHandler()+0x164>  // b.none
   89e40:	f908ba65 	str	x5, [x19, #4464]
   89e44:	b9495260 	ldr	w0, [x19, #2384]
   89e48:	b9495664 	ldr	w4, [x19, #2388]
   89e4c:	11000400 	add	w0, w0, #0x1
   89e50:	12002800 	and	w0, w0, #0x7ff
   89e54:	6b04001f 	cmp	w0, w4
   89e58:	540005a0 	b.eq	89f0c <CSerialDevice::InterruptHandler()+0x13c>  // b.none
   89e5c:	b9495260 	ldr	w0, [x19, #2384]
   89e60:	8b204264 	add	x4, x19, w0, uxtw
   89e64:	11000400 	add	w0, w0, #0x1
   89e68:	b9095260 	str	w0, [x19, #2384]
   89e6c:	39054081 	strb	w1, [x4, #336]
   89e70:	b9495260 	ldr	w0, [x19, #2384]
   89e74:	12002800 	and	w0, w0, #0x7ff
   89e78:	b9095260 	str	w0, [x19, #2384]
   89e7c:	b9400060 	ldr	w0, [x3]
   89e80:	3627fcc0 	tbz	w0, #4, 89e18 <CSerialDevice::InterruptHandler()+0x48>
   89e84:	b9401840 	ldr	w0, [x2, #24]
   89e88:	362801a0 	tbz	w0, #5, 89ebc <CSerialDevice::InterruptHandler()+0xec>
   89e8c:	14000013 	b	89ed8 <CSerialDevice::InterruptHandler()+0x108>
   89e90:	b9516260 	ldr	w0, [x19, #4448]
   89e94:	8b204261 	add	x1, x19, w0, uxtw
   89e98:	11000400 	add	w0, w0, #0x1
   89e9c:	b9116260 	str	w0, [x19, #4448]
   89ea0:	39657020 	ldrb	w0, [x1, #2396]
   89ea4:	b9000040 	str	w0, [x2]
   89ea8:	b9516260 	ldr	w0, [x19, #4448]
   89eac:	12002800 	and	w0, w0, #0x7ff
   89eb0:	b9116260 	str	w0, [x19, #4448]
   89eb4:	b9400060 	ldr	w0, [x3]
   89eb8:	37280100 	tbnz	w0, #5, 89ed8 <CSerialDevice::InterruptHandler()+0x108>
   89ebc:	b9515e61 	ldr	w1, [x19, #4444]
   89ec0:	b9516260 	ldr	w0, [x19, #4448]
   89ec4:	6b00003f 	cmp	w1, w0
   89ec8:	54fffe41 	b.ne	89e90 <CSerialDevice::InterruptHandler()+0xc0>  // b.any
   89ecc:	b9403840 	ldr	w0, [x2, #56]
   89ed0:	121a7800 	and	w0, w0, #0xffffffdf
   89ed4:	b9003840 	str	w0, [x2, #56]
   89ed8:	b9518260 	ldr	w0, [x19, #4480]
   89edc:	35000440 	cbnz	w0, 89f64 <CSerialDevice::InterruptHandler()+0x194>
   89ee0:	36000474 	tbz	w20, #0, 89f6c <CSerialDevice::InterruptHandler()+0x19c>
   89ee4:	f948be60 	ldr	x0, [x19, #4472]
   89ee8:	a94153f3 	ldp	x19, x20, [sp, #16]
   89eec:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89ef0:	aa0003f0 	mov	x16, x0
   89ef4:	d61f0200 	br	x16
   89ef8:	36580121 	tbz	w1, #11, 89f1c <CSerialDevice::InterruptHandler()+0x14c>
   89efc:	b9495a60 	ldr	w0, [x19, #2392]
   89f00:	35fff960 	cbnz	w0, 89e2c <CSerialDevice::InterruptHandler()+0x5c>
   89f04:	b9095a66 	str	w6, [x19, #2392]
   89f08:	17ffffc9 	b	89e2c <CSerialDevice::InterruptHandler()+0x5c>
   89f0c:	b9495a60 	ldr	w0, [x19, #2392]
   89f10:	35fffb60 	cbnz	w0, 89e7c <CSerialDevice::InterruptHandler()+0xac>
   89f14:	b9095a66 	str	w6, [x19, #2392]
   89f18:	17ffffd9 	b	89e7c <CSerialDevice::InterruptHandler()+0xac>
   89f1c:	36400181 	tbz	w1, #8, 89f4c <CSerialDevice::InterruptHandler()+0x17c>
   89f20:	b9495a60 	ldr	w0, [x19, #2392]
   89f24:	35fff840 	cbnz	w0, 89e2c <CSerialDevice::InterruptHandler()+0x5c>
   89f28:	12800040 	mov	w0, #0xfffffffd            	// #-3
   89f2c:	b9095a60 	str	w0, [x19, #2392]
   89f30:	17ffffbf 	b	89e2c <CSerialDevice::InterruptHandler()+0x5c>
   89f34:	91000404 	add	x4, x0, #0x1
   89f38:	f908ba64 	str	x4, [x19, #4464]
   89f3c:	39c00400 	ldrsb	w0, [x0, #1]
   89f40:	7100001f 	cmp	w0, #0x0
   89f44:	1a881294 	csel	w20, w20, w8, ne	// ne = any
   89f48:	17ffffbf 	b	89e44 <CSerialDevice::InterruptHandler()+0x74>
   89f4c:	364ff701 	tbz	w1, #9, 89e2c <CSerialDevice::InterruptHandler()+0x5c>
   89f50:	b9495a60 	ldr	w0, [x19, #2392]
   89f54:	35fff6c0 	cbnz	w0, 89e2c <CSerialDevice::InterruptHandler()+0x5c>
   89f58:	12800060 	mov	w0, #0xfffffffc            	// #-4
   89f5c:	b9095a60 	str	w0, [x19, #2392]
   89f60:	17ffffb3 	b	89e2c <CSerialDevice::InterruptHandler()+0x5c>
   89f64:	94000fdf 	bl	8dee0 <LeaveCritical>
   89f68:	3707fbf4 	tbnz	w20, #0, 89ee4 <CSerialDevice::InterruptHandler()+0x114>
   89f6c:	a94153f3 	ldp	x19, x20, [sp, #16]
   89f70:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89f74:	d65f03c0 	ret
   89f78:	94000faa 	bl	8de20 <EnterCritical>
   89f7c:	f9401262 	ldr	x2, [x19, #32]
   89f80:	b9404040 	ldr	w0, [x2, #64]
   89f84:	91006043 	add	x3, x2, #0x18
   89f88:	b9004440 	str	w0, [x2, #68]
   89f8c:	b9401840 	ldr	w0, [x2, #24]
   89f90:	3627f380 	tbz	w0, #4, 89e00 <CSerialDevice::InterruptHandler()+0x30>
   89f94:	b9401840 	ldr	w0, [x2, #24]
   89f98:	52800014 	mov	w20, #0x0                   	// #0
   89f9c:	362ff900 	tbz	w0, #5, 89ebc <CSerialDevice::InterruptHandler()+0xec>
   89fa0:	b9518260 	ldr	w0, [x19, #4480]
   89fa4:	34fffe40 	cbz	w0, 89f6c <CSerialDevice::InterruptHandler()+0x19c>
   89fa8:	a94153f3 	ldp	x19, x20, [sp, #16]
   89fac:	a8c27bfd 	ldp	x29, x30, [sp], #32
   89fb0:	14000fcc 	b	8dee0 <LeaveCritical>
   89fb4:	d503201f 	nop
   89fb8:	d503201f 	nop
   89fbc:	d503201f 	nop

0000000000089fc0 <CSerialDevice::InterruptStub(void*)>:
   89fc0:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   89fc4:	910003fd 	mov	x29, sp
   89fc8:	a90153f3 	stp	x19, x20, [sp, #16]
   89fcc:	f9001bf7 	str	x23, [sp, #48]
   89fd0:	d5033fbf 	dmb	sy
   89fd4:	b0000157 	adrp	x23, b2000 <appendBuf+0xa0>
   89fd8:	910e82f7 	add	x23, x23, #0x3a0
   89fdc:	b94046f4 	ldr	w20, [x23, #68]
   89fe0:	340001f4 	cbz	w20, 8a01c <CSerialDevice::InterruptStub(void*)+0x5c>
   89fe4:	52800013 	mov	w19, #0x0                   	// #0
   89fe8:	a9025bf5 	stp	x21, x22, [sp, #32]
   89fec:	52800036 	mov	w22, #0x1                   	// #1
   89ff0:	1ad322d5 	lsl	w21, w22, w19
   89ff4:	6a1402bf 	tst	w21, w20
   89ff8:	54000080 	b.eq	8a008 <CSerialDevice::InterruptStub(void*)+0x48>  // b.none
   89ffc:	f8735ae0 	ldr	x0, [x23, w19, uxtw #3]
   8a000:	b4000160 	cbz	x0, 8a02c <CSerialDevice::InterruptStub(void*)+0x6c>
   8a004:	97ffff73 	bl	89dd0 <CSerialDevice::InterruptHandler()>
   8a008:	11000673 	add	w19, w19, #0x1
   8a00c:	6a350294 	bics	w20, w20, w21
   8a010:	7a451a62 	ccmp	w19, #0x5, #0x2, ne	// ne = any
   8a014:	54fffee9 	b.ls	89ff0 <CSerialDevice::InterruptStub(void*)+0x30>  // b.plast
   8a018:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a01c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a020:	f9401bf7 	ldr	x23, [sp, #48]
   8a024:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8a028:	d65f03c0 	ret
   8a02c:	90000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8a030:	91354021 	add	x1, x1, #0xd50
   8a034:	9108c020 	add	x0, x1, #0x230
   8a038:	528060e2 	mov	w2, #0x307                 	// #775
   8a03c:	940015d9 	bl	8f7a0 <assertion_failed>

000000000008a040 <CSerialDevice::~CSerialDevice()>:
   8a040:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a044:	910003fd 	mov	x29, sp
   8a048:	90000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8a04c:	91346021 	add	x1, x1, #0xd18
   8a050:	a90153f3 	stp	x19, x20, [sp, #16]
   8a054:	aa0003f3 	mov	x19, x0
   8a058:	3940a000 	ldrb	w0, [x0, #40]
   8a05c:	f9000261 	str	x1, [x19]
   8a060:	360007a0 	tbz	w0, #0, 8a154 <CSerialDevice::~CSerialDevice()+0x114>
   8a064:	a9025bf5 	stp	x21, x22, [sp, #32]
   8a068:	90000055 	adrp	x21, 92000 <uart_putHexByte::hexDigits>
   8a06c:	913542b5 	add	x21, x21, #0xd50
   8a070:	90000154 	adrp	x20, b2000 <appendBuf+0xa0>
   8a074:	910e8294 	add	x20, x20, #0x3a0
   8a078:	97fff08a 	bl	862a0 <CDeviceNameService::Get()>
   8a07c:	b9401e62 	ldr	w2, [x19, #28]
   8a080:	910742a1 	add	x1, x21, #0x1d0
   8a084:	52800003 	mov	w3, #0x0                   	// #0
   8a088:	11000442 	add	w2, w2, #0x1
   8a08c:	97fff0b1 	bl	86350 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>
   8a090:	b9401e62 	ldr	w2, [x19, #28]
   8a094:	52800020 	mov	w0, #0x1                   	// #1
   8a098:	b9404681 	ldr	w1, [x20, #68]
   8a09c:	1ac22000 	lsl	w0, w0, w2
   8a0a0:	0a200020 	bic	w0, w1, w0
   8a0a4:	b9004680 	str	w0, [x20, #68]
   8a0a8:	d5033f9f 	dsb	sy
   8a0ac:	f9401260 	ldr	x0, [x19, #32]
   8a0b0:	f9400a61 	ldr	x1, [x19, #16]
   8a0b4:	b900381f 	str	wzr, [x0, #56]
   8a0b8:	b900301f 	str	wzr, [x0, #48]
   8a0bc:	b4000181 	cbz	x1, 8a0ec <CSerialDevice::~CSerialDevice()+0xac>
   8a0c0:	b9403280 	ldr	w0, [x20, #48]
   8a0c4:	51000400 	sub	w0, w0, #0x1
   8a0c8:	b9003280 	str	w0, [x20, #48]
   8a0cc:	35000100 	cbnz	w0, 8a0ec <CSerialDevice::~CSerialDevice()+0xac>
   8a0d0:	f9401e80 	ldr	x0, [x20, #56]
   8a0d4:	b40005e0 	cbz	x0, 8a190 <CSerialDevice::~CSerialDevice()+0x150>
   8a0d8:	39410281 	ldrb	w1, [x20, #64]
   8a0dc:	36000541 	tbz	w1, #0, 8a184 <CSerialDevice::~CSerialDevice()+0x144>
   8a0e0:	9400124c 	bl	8ea10 <CInterruptSystem::DisconnectFIQ()>
   8a0e4:	f9001e9f 	str	xzr, [x20, #56]
   8a0e8:	3901029f 	strb	wzr, [x20, #64]
   8a0ec:	91030275 	add	x21, x19, #0xc0
   8a0f0:	52800022 	mov	w2, #0x1                   	// #1
   8a0f4:	aa1503e0 	mov	x0, x21
   8a0f8:	52800001 	mov	w1, #0x0                   	// #0
   8a0fc:	97fff3e5 	bl	87090 <CGPIOPin::SetMode(TGPIOMode, bool)>
   8a100:	91042276 	add	x22, x19, #0x108
   8a104:	52800022 	mov	w2, #0x1                   	// #1
   8a108:	aa1603e0 	mov	x0, x22
   8a10c:	52800001 	mov	w1, #0x0                   	// #0
   8a110:	97fff3e0 	bl	87090 <CGPIOPin::SetMode(TGPIOMode, bool)>
   8a114:	b9401e61 	ldr	w1, [x19, #28]
   8a118:	aa1603e0 	mov	x0, x22
   8a11c:	f8217a9f 	str	xzr, [x20, x1, lsl #3]
   8a120:	3900a27f 	strb	wzr, [x19, #40]
   8a124:	97fff11b 	bl	86590 <CGPIOPin::~CGPIOPin()>
   8a128:	aa1503e0 	mov	x0, x21
   8a12c:	97fff119 	bl	86590 <CGPIOPin::~CGPIOPin()>
   8a130:	9101e260 	add	x0, x19, #0x78
   8a134:	97fff117 	bl	86590 <CGPIOPin::~CGPIOPin()>
   8a138:	9100c260 	add	x0, x19, #0x30
   8a13c:	97fff115 	bl	86590 <CGPIOPin::~CGPIOPin()>
   8a140:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a144:	aa1303e0 	mov	x0, x19
   8a148:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a14c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a150:	140016c4 	b	8fc60 <CDevice::~CDevice()>
   8a154:	91042260 	add	x0, x19, #0x108
   8a158:	97fff10e 	bl	86590 <CGPIOPin::~CGPIOPin()>
   8a15c:	91030260 	add	x0, x19, #0xc0
   8a160:	97fff10c 	bl	86590 <CGPIOPin::~CGPIOPin()>
   8a164:	9101e260 	add	x0, x19, #0x78
   8a168:	97fff10a 	bl	86590 <CGPIOPin::~CGPIOPin()>
   8a16c:	9100c260 	add	x0, x19, #0x30
   8a170:	97fff108 	bl	86590 <CGPIOPin::~CGPIOPin()>
   8a174:	aa1303e0 	mov	x0, x19
   8a178:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a17c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a180:	140016b8 	b	8fc60 <CDevice::~CDevice()>
   8a184:	52801321 	mov	w1, #0x99                  	// #153
   8a188:	94001202 	bl	8e990 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   8a18c:	17ffffd6 	b	8a0e4 <CSerialDevice::~CSerialDevice()+0xa4>
   8a190:	52801c42 	mov	w2, #0xe2                  	// #226
   8a194:	aa1503e1 	mov	x1, x21
   8a198:	910902a0 	add	x0, x21, #0x240
   8a19c:	94001581 	bl	8f7a0 <assertion_failed>

000000000008a1a0 <CSerialDevice::~CSerialDevice()>:
   8a1a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a1a4:	910003fd 	mov	x29, sp
   8a1a8:	f9000bf3 	str	x19, [sp, #16]
   8a1ac:	aa0003f3 	mov	x19, x0
   8a1b0:	97ffffa4 	bl	8a040 <CSerialDevice::~CSerialDevice()>
   8a1b4:	aa1303e0 	mov	x0, x19
   8a1b8:	f9400bf3 	ldr	x19, [sp, #16]
   8a1bc:	d2823101 	mov	x1, #0x1188                	// #4488
   8a1c0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a1c4:	14000cbb 	b	8d4b0 <operator delete(void*, unsigned long)>
	...

000000000008a1d0 <CString::~CString()>:
   8a1d0:	aa0003e1 	mov	x1, x0
   8a1d4:	90000042 	adrp	x2, 92000 <uart_putHexByte::hexDigits>
   8a1d8:	913f6042 	add	x2, x2, #0xfd8
   8a1dc:	f9400400 	ldr	x0, [x0, #8]
   8a1e0:	f9000022 	str	x2, [x1]
   8a1e4:	b4000040 	cbz	x0, 8a1ec <CString::~CString()+0x1c>
   8a1e8:	14000ca6 	b	8d480 <operator delete[](void*)>
   8a1ec:	d65f03c0 	ret

000000000008a1f0 <CString::~CString()>:
   8a1f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a1f4:	910003fd 	mov	x29, sp
   8a1f8:	90000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8a1fc:	913f6021 	add	x1, x1, #0xfd8
   8a200:	f9000bf3 	str	x19, [sp, #16]
   8a204:	aa0003f3 	mov	x19, x0
   8a208:	f9400400 	ldr	x0, [x0, #8]
   8a20c:	f9000261 	str	x1, [x19]
   8a210:	b4000040 	cbz	x0, 8a218 <CString::~CString()+0x28>
   8a214:	94000c9b 	bl	8d480 <operator delete[](void*)>
   8a218:	aa1303e0 	mov	x0, x19
   8a21c:	f9400bf3 	ldr	x19, [sp, #16]
   8a220:	d2800401 	mov	x1, #0x20                  	// #32
   8a224:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a228:	14000ca2 	b	8d4b0 <operator delete(void*, unsigned long)>
   8a22c:	d503201f 	nop

000000000008a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>:
   8a230:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a234:	910003fd 	mov	x29, sp
   8a238:	f9400402 	ldr	x2, [x0, #8]
   8a23c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8a240:	f9400c15 	ldr	x21, [x0, #24]
   8a244:	a90153f3 	stp	x19, x20, [sp, #16]
   8a248:	aa0003f3 	mov	x19, x0
   8a24c:	b9401000 	ldr	w0, [x0, #16]
   8a250:	cb0202b5 	sub	x21, x21, x2
   8a254:	8b0102a1 	add	x1, x21, x1
   8a258:	91000422 	add	x2, x1, #0x1
   8a25c:	eb00005f 	cmp	x2, x0
   8a260:	540000a8 	b.hi	8a274 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x44>  // b.pmore
   8a264:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a268:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a26c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a270:	d65f03c0 	ret
   8a274:	91010434 	add	x20, x1, #0x41
   8a278:	aa1403e0 	mov	x0, x20
   8a27c:	94000c61 	bl	8d400 <operator new[](unsigned long)>
   8a280:	f9400e61 	ldr	x1, [x19, #24]
   8a284:	aa0003f6 	mov	x22, x0
   8a288:	3900003f 	strb	wzr, [x1]
   8a28c:	f9400661 	ldr	x1, [x19, #8]
   8a290:	94000a98 	bl	8ccf0 <strcpy>
   8a294:	f9400660 	ldr	x0, [x19, #8]
   8a298:	b4000040 	cbz	x0, 8a2a0 <CString::ReserveSpace(unsigned long) [clone .part.0]+0x70>
   8a29c:	94000c79 	bl	8d480 <operator delete[](void*)>
   8a2a0:	8b1502d5 	add	x21, x22, x21
   8a2a4:	f9000676 	str	x22, [x19, #8]
   8a2a8:	b9001274 	str	w20, [x19, #16]
   8a2ac:	f9000e75 	str	x21, [x19, #24]
   8a2b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a2b4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a2b8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a2bc:	d65f03c0 	ret

000000000008a2c0 <CString::CString()>:
   8a2c0:	90000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8a2c4:	913f6021 	add	x1, x1, #0xfd8
   8a2c8:	b900101f 	str	wzr, [x0, #16]
   8a2cc:	a9007c01 	stp	x1, xzr, [x0]
   8a2d0:	d65f03c0 	ret
   8a2d4:	d503201f 	nop
   8a2d8:	d503201f 	nop
   8a2dc:	d503201f 	nop

000000000008a2e0 <CString::CString(char const*)>:
   8a2e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a2e4:	910003fd 	mov	x29, sp
   8a2e8:	90000042 	adrp	x2, 92000 <uart_putHexByte::hexDigits>
   8a2ec:	913f6042 	add	x2, x2, #0xfd8
   8a2f0:	a90153f3 	stp	x19, x20, [sp, #16]
   8a2f4:	aa0003f3 	mov	x19, x0
   8a2f8:	aa0103e0 	mov	x0, x1
   8a2fc:	aa0103f4 	mov	x20, x1
   8a300:	f9000262 	str	x2, [x19]
   8a304:	940009eb 	bl	8cab0 <strlen>
   8a308:	11000400 	add	w0, w0, #0x1
   8a30c:	b9001260 	str	w0, [x19, #16]
   8a310:	94000c3c 	bl	8d400 <operator new[](unsigned long)>
   8a314:	aa1403e1 	mov	x1, x20
   8a318:	f9000660 	str	x0, [x19, #8]
   8a31c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a320:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a324:	14000a73 	b	8ccf0 <strcpy>
   8a328:	d503201f 	nop
   8a32c:	d503201f 	nop

000000000008a330 <CString::CString(CString const&)>:
   8a330:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a334:	910003fd 	mov	x29, sp
   8a338:	f90013f5 	str	x21, [sp, #32]
   8a33c:	aa0103f5 	mov	x21, x1
   8a340:	90000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8a344:	913f6021 	add	x1, x1, #0xfd8
   8a348:	a90153f3 	stp	x19, x20, [sp, #16]
   8a34c:	aa0003f3 	mov	x19, x0
   8a350:	b0000054 	adrp	x20, 93000 <vtable for CString+0x38>
   8a354:	911ca294 	add	x20, x20, #0x728
   8a358:	f94006a0 	ldr	x0, [x21, #8]
   8a35c:	f9000261 	str	x1, [x19]
   8a360:	f100001f 	cmp	x0, #0x0
   8a364:	9a800280 	csel	x0, x20, x0, eq	// eq = none
   8a368:	940009d2 	bl	8cab0 <strlen>
   8a36c:	11000400 	add	w0, w0, #0x1
   8a370:	b9001260 	str	w0, [x19, #16]
   8a374:	94000c23 	bl	8d400 <operator new[](unsigned long)>
   8a378:	f94006a1 	ldr	x1, [x21, #8]
   8a37c:	f94013f5 	ldr	x21, [sp, #32]
   8a380:	f9000660 	str	x0, [x19, #8]
   8a384:	f100003f 	cmp	x1, #0x0
   8a388:	9a810281 	csel	x1, x20, x1, eq	// eq = none
   8a38c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a390:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a394:	14000a57 	b	8ccf0 <strcpy>
   8a398:	d503201f 	nop
   8a39c:	d503201f 	nop

000000000008a3a0 <CString::CString(CString&&)>:
   8a3a0:	f9400424 	ldr	x4, [x1, #8]
   8a3a4:	90000042 	adrp	x2, 92000 <uart_putHexByte::hexDigits>
   8a3a8:	913f6042 	add	x2, x2, #0xfd8
   8a3ac:	f900043f 	str	xzr, [x1, #8]
   8a3b0:	b9401023 	ldr	w3, [x1, #16]
   8a3b4:	b900103f 	str	wzr, [x1, #16]
   8a3b8:	a9001002 	stp	x2, x4, [x0]
   8a3bc:	b9001003 	str	w3, [x0, #16]
   8a3c0:	d65f03c0 	ret
   8a3c4:	d503201f 	nop
   8a3c8:	d503201f 	nop
   8a3cc:	d503201f 	nop

000000000008a3d0 <CString::operator char const*() const>:
   8a3d0:	f9400400 	ldr	x0, [x0, #8]
   8a3d4:	b0000041 	adrp	x1, 93000 <vtable for CString+0x38>
   8a3d8:	911ca021 	add	x1, x1, #0x728
   8a3dc:	f100001f 	cmp	x0, #0x0
   8a3e0:	9a800020 	csel	x0, x1, x0, eq	// eq = none
   8a3e4:	d65f03c0 	ret
   8a3e8:	d503201f 	nop
   8a3ec:	d503201f 	nop

000000000008a3f0 <CString::operator=(char const*)>:
   8a3f0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a3f4:	910003fd 	mov	x29, sp
   8a3f8:	a90153f3 	stp	x19, x20, [sp, #16]
   8a3fc:	aa0003f3 	mov	x19, x0
   8a400:	aa0103f4 	mov	x20, x1
   8a404:	f9400400 	ldr	x0, [x0, #8]
   8a408:	b4000040 	cbz	x0, 8a410 <CString::operator=(char const*)+0x20>
   8a40c:	94000c1d 	bl	8d480 <operator delete[](void*)>
   8a410:	aa1403e0 	mov	x0, x20
   8a414:	940009a7 	bl	8cab0 <strlen>
   8a418:	11000400 	add	w0, w0, #0x1
   8a41c:	b9001260 	str	w0, [x19, #16]
   8a420:	94000bf8 	bl	8d400 <operator new[](unsigned long)>
   8a424:	aa1403e1 	mov	x1, x20
   8a428:	f9000660 	str	x0, [x19, #8]
   8a42c:	94000a31 	bl	8ccf0 <strcpy>
   8a430:	f9400660 	ldr	x0, [x19, #8]
   8a434:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a438:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a43c:	d65f03c0 	ret

000000000008a440 <CString::operator=(CString const&)>:
   8a440:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a444:	910003fd 	mov	x29, sp
   8a448:	a90153f3 	stp	x19, x20, [sp, #16]
   8a44c:	aa0003f3 	mov	x19, x0
   8a450:	f9400400 	ldr	x0, [x0, #8]
   8a454:	f90013f5 	str	x21, [sp, #32]
   8a458:	aa0103f5 	mov	x21, x1
   8a45c:	b4000040 	cbz	x0, 8a464 <CString::operator=(CString const&)+0x24>
   8a460:	94000c08 	bl	8d480 <operator delete[](void*)>
   8a464:	f94006a0 	ldr	x0, [x21, #8]
   8a468:	b0000054 	adrp	x20, 93000 <vtable for CString+0x38>
   8a46c:	911ca294 	add	x20, x20, #0x728
   8a470:	f100001f 	cmp	x0, #0x0
   8a474:	9a800280 	csel	x0, x20, x0, eq	// eq = none
   8a478:	9400098e 	bl	8cab0 <strlen>
   8a47c:	11000400 	add	w0, w0, #0x1
   8a480:	b9001260 	str	w0, [x19, #16]
   8a484:	94000bdf 	bl	8d400 <operator new[](unsigned long)>
   8a488:	f9000660 	str	x0, [x19, #8]
   8a48c:	f94006a1 	ldr	x1, [x21, #8]
   8a490:	f100003f 	cmp	x1, #0x0
   8a494:	9a810281 	csel	x1, x20, x1, eq	// eq = none
   8a498:	94000a16 	bl	8ccf0 <strcpy>
   8a49c:	f94013f5 	ldr	x21, [sp, #32]
   8a4a0:	aa1303e0 	mov	x0, x19
   8a4a4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a4a8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a4ac:	d65f03c0 	ret

000000000008a4b0 <CString::operator=(CString&&)>:
   8a4b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8a4b4:	910003fd 	mov	x29, sp
   8a4b8:	a90153f3 	stp	x19, x20, [sp, #16]
   8a4bc:	aa0003f4 	mov	x20, x0
   8a4c0:	aa0103f3 	mov	x19, x1
   8a4c4:	f9400400 	ldr	x0, [x0, #8]
   8a4c8:	b4000040 	cbz	x0, 8a4d0 <CString::operator=(CString&&)+0x20>
   8a4cc:	94000bed 	bl	8d480 <operator delete[](void*)>
   8a4d0:	f9400662 	ldr	x2, [x19, #8]
   8a4d4:	aa1403e0 	mov	x0, x20
   8a4d8:	b9401261 	ldr	w1, [x19, #16]
   8a4dc:	f9000682 	str	x2, [x20, #8]
   8a4e0:	b9001281 	str	w1, [x20, #16]
   8a4e4:	f900067f 	str	xzr, [x19, #8]
   8a4e8:	b900127f 	str	wzr, [x19, #16]
   8a4ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a4f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8a4f4:	d65f03c0 	ret
   8a4f8:	d503201f 	nop
   8a4fc:	d503201f 	nop

000000000008a500 <CString::GetLength() const>:
   8a500:	f9400400 	ldr	x0, [x0, #8]
   8a504:	b4000040 	cbz	x0, 8a50c <CString::GetLength() const+0xc>
   8a508:	1400096a 	b	8cab0 <strlen>
   8a50c:	d2800000 	mov	x0, #0x0                   	// #0
   8a510:	d65f03c0 	ret
   8a514:	d503201f 	nop
   8a518:	d503201f 	nop
   8a51c:	d503201f 	nop

000000000008a520 <CString::Append(char const*)>:
   8a520:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a524:	910003fd 	mov	x29, sp
   8a528:	52800022 	mov	w2, #0x1                   	// #1
   8a52c:	a90153f3 	stp	x19, x20, [sp, #16]
   8a530:	aa0003f3 	mov	x19, x0
   8a534:	f9400400 	ldr	x0, [x0, #8]
   8a538:	f90013f5 	str	x21, [sp, #32]
   8a53c:	aa0103f5 	mov	x21, x1
   8a540:	b9001262 	str	w2, [x19, #16]
   8a544:	b40000a0 	cbz	x0, 8a558 <CString::Append(char const*)+0x38>
   8a548:	9400095a 	bl	8cab0 <strlen>
   8a54c:	b9401261 	ldr	w1, [x19, #16]
   8a550:	0b000021 	add	w1, w1, w0
   8a554:	b9001261 	str	w1, [x19, #16]
   8a558:	aa1503e0 	mov	x0, x21
   8a55c:	94000955 	bl	8cab0 <strlen>
   8a560:	b9401261 	ldr	w1, [x19, #16]
   8a564:	0b000020 	add	w0, w1, w0
   8a568:	b9001260 	str	w0, [x19, #16]
   8a56c:	94000ba5 	bl	8d400 <operator new[](unsigned long)>
   8a570:	f9400661 	ldr	x1, [x19, #8]
   8a574:	aa0003f4 	mov	x20, x0
   8a578:	b40001a1 	cbz	x1, 8a5ac <CString::Append(char const*)+0x8c>
   8a57c:	940009dd 	bl	8ccf0 <strcpy>
   8a580:	f9400660 	ldr	x0, [x19, #8]
   8a584:	b4000040 	cbz	x0, 8a58c <CString::Append(char const*)+0x6c>
   8a588:	94000bbe 	bl	8d480 <operator delete[](void*)>
   8a58c:	aa1503e1 	mov	x1, x21
   8a590:	aa1403e0 	mov	x0, x20
   8a594:	940009ef 	bl	8cd50 <strcat>
   8a598:	f94013f5 	ldr	x21, [sp, #32]
   8a59c:	f9000674 	str	x20, [x19, #8]
   8a5a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a5a4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a5a8:	d65f03c0 	ret
   8a5ac:	aa1503e1 	mov	x1, x21
   8a5b0:	3900001f 	strb	wzr, [x0]
   8a5b4:	aa1403e0 	mov	x0, x20
   8a5b8:	940009e6 	bl	8cd50 <strcat>
   8a5bc:	f94013f5 	ldr	x21, [sp, #32]
   8a5c0:	f9000674 	str	x20, [x19, #8]
   8a5c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a5c8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a5cc:	d65f03c0 	ret

000000000008a5d0 <CString::Compare(char const*) const>:
   8a5d0:	f9400400 	ldr	x0, [x0, #8]
   8a5d4:	14000943 	b	8cae0 <strcmp>
   8a5d8:	d503201f 	nop
   8a5dc:	d503201f 	nop

000000000008a5e0 <CString::Find(char) const>:
   8a5e0:	f9400403 	ldr	x3, [x0, #8]
   8a5e4:	13001c21 	sxtb	w1, w1
   8a5e8:	39c00062 	ldrsb	w2, [x3]
   8a5ec:	34000122 	cbz	w2, 8a610 <CString::Find(char) const+0x30>
   8a5f0:	d2800000 	mov	x0, #0x0                   	// #0
   8a5f4:	14000004 	b	8a604 <CString::Find(char) const+0x24>
   8a5f8:	91000400 	add	x0, x0, #0x1
   8a5fc:	38e06862 	ldrsb	w2, [x3, x0]
   8a600:	34000082 	cbz	w2, 8a610 <CString::Find(char) const+0x30>
   8a604:	6b02003f 	cmp	w1, w2
   8a608:	54ffff81 	b.ne	8a5f8 <CString::Find(char) const+0x18>  // b.any
   8a60c:	d65f03c0 	ret
   8a610:	12800000 	mov	w0, #0xffffffff            	// #-1
   8a614:	d65f03c0 	ret
   8a618:	d503201f 	nop
   8a61c:	d503201f 	nop

000000000008a620 <CString::Replace(char const*, char const*)>:
   8a620:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8a624:	910003fd 	mov	x29, sp
   8a628:	a9025bf5 	stp	x21, x22, [sp, #32]
   8a62c:	aa0103f5 	mov	x21, x1
   8a630:	a90363f7 	stp	x23, x24, [sp, #48]
   8a634:	52800017 	mov	w23, #0x0                   	// #0
   8a638:	39c00021 	ldrsb	w1, [x1]
   8a63c:	350000c1 	cbnz	w1, 8a654 <CString::Replace(char const*, char const*)+0x34>
   8a640:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a644:	2a1703e0 	mov	w0, w23
   8a648:	a94363f7 	ldp	x23, x24, [sp, #48]
   8a64c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8a650:	d65f03c0 	ret
   8a654:	a90153f3 	stp	x19, x20, [sp, #16]
   8a658:	aa0003f4 	mov	x20, x0
   8a65c:	aa0203f6 	mov	x22, x2
   8a660:	f9400413 	ldr	x19, [x0, #8]
   8a664:	a9046bf9 	stp	x25, x26, [sp, #64]
   8a668:	aa1303e0 	mov	x0, x19
   8a66c:	94000911 	bl	8cab0 <strlen>
   8a670:	11000400 	add	w0, w0, #0x1
   8a674:	94000b63 	bl	8d400 <operator new[](unsigned long)>
   8a678:	aa1303e1 	mov	x1, x19
   8a67c:	aa0003f8 	mov	x24, x0
   8a680:	9400099c 	bl	8ccf0 <strcpy>
   8a684:	f9400680 	ldr	x0, [x20, #8]
   8a688:	b4000040 	cbz	x0, 8a690 <CString::Replace(char const*, char const*)+0x70>
   8a68c:	94000b7d 	bl	8d480 <operator delete[](void*)>
   8a690:	52800801 	mov	w1, #0x40                  	// #64
   8a694:	d2800800 	mov	x0, #0x40                  	// #64
   8a698:	aa1803f3 	mov	x19, x24
   8a69c:	52800017 	mov	w23, #0x0                   	// #0
   8a6a0:	b9001281 	str	w1, [x20, #16]
   8a6a4:	94000b57 	bl	8d400 <operator new[](unsigned long)>
   8a6a8:	f9000680 	str	x0, [x20, #8]
   8a6ac:	f9000e80 	str	x0, [x20, #24]
   8a6b0:	39c002a1 	ldrsb	w1, [x21]
   8a6b4:	aa1303e0 	mov	x0, x19
   8a6b8:	940009b6 	bl	8cd90 <strchr>
   8a6bc:	aa0003fa 	mov	x26, x0
   8a6c0:	b4000500 	cbz	x0, 8a760 <CString::Replace(char const*, char const*)+0x140>
   8a6c4:	eb00027f 	cmp	x19, x0
   8a6c8:	aa1303e3 	mov	x3, x19
   8a6cc:	54000182 	b.cs	8a6fc <CString::Replace(char const*, char const*)+0xdc>  // b.hs, b.nlast
   8a6d0:	d2800021 	mov	x1, #0x1                   	// #1
   8a6d4:	aa1403e0 	mov	x0, x20
   8a6d8:	38c01679 	ldrsb	w25, [x19], #1
   8a6dc:	97fffed5 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8a6e0:	f9400e81 	ldr	x1, [x20, #24]
   8a6e4:	eb13035f 	cmp	x26, x19
   8a6e8:	91000420 	add	x0, x1, #0x1
   8a6ec:	f9000e80 	str	x0, [x20, #24]
   8a6f0:	39000039 	strb	w25, [x1]
   8a6f4:	54fffee1 	b.ne	8a6d0 <CString::Replace(char const*, char const*)+0xb0>  // b.any
   8a6f8:	aa1a03e3 	mov	x3, x26
   8a6fc:	39c006a1 	ldrsb	w1, [x21, #1]
   8a700:	91000753 	add	x19, x26, #0x1
   8a704:	910006a2 	add	x2, x21, #0x1
   8a708:	35000081 	cbnz	w1, 8a718 <CString::Replace(char const*, char const*)+0xf8>
   8a70c:	1400002c 	b	8a7bc <CString::Replace(char const*, char const*)+0x19c>
   8a710:	38c01c41 	ldrsb	w1, [x2, #1]!
   8a714:	34000541 	cbz	w1, 8a7bc <CString::Replace(char const*, char const*)+0x19c>
   8a718:	39c00260 	ldrsb	w0, [x19]
   8a71c:	91000673 	add	x19, x19, #0x1
   8a720:	6b01001f 	cmp	w0, w1
   8a724:	54ffff60 	b.eq	8a710 <CString::Replace(char const*, char const*)+0xf0>  // b.none
   8a728:	aa0303f3 	mov	x19, x3
   8a72c:	d2800021 	mov	x1, #0x1                   	// #1
   8a730:	aa1403e0 	mov	x0, x20
   8a734:	38c01679 	ldrsb	w25, [x19], #1
   8a738:	97fffebe 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8a73c:	f9400e80 	ldr	x0, [x20, #24]
   8a740:	91000401 	add	x1, x0, #0x1
   8a744:	f9000e81 	str	x1, [x20, #24]
   8a748:	39000019 	strb	w25, [x0]
   8a74c:	aa1303e0 	mov	x0, x19
   8a750:	39c002a1 	ldrsb	w1, [x21]
   8a754:	9400098f 	bl	8cd90 <strchr>
   8a758:	aa0003fa 	mov	x26, x0
   8a75c:	b5fffb40 	cbnz	x0, 8a6c4 <CString::Replace(char const*, char const*)+0xa4>
   8a760:	aa1303e0 	mov	x0, x19
   8a764:	940008d3 	bl	8cab0 <strlen>
   8a768:	aa0003f5 	mov	x21, x0
   8a76c:	b4000080 	cbz	x0, 8a77c <CString::Replace(char const*, char const*)+0x15c>
   8a770:	aa0003e1 	mov	x1, x0
   8a774:	aa1403e0 	mov	x0, x20
   8a778:	97fffeae 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8a77c:	f9400e80 	ldr	x0, [x20, #24]
   8a780:	aa1303e1 	mov	x1, x19
   8a784:	9400095b 	bl	8ccf0 <strcpy>
   8a788:	f9400e81 	ldr	x1, [x20, #24]
   8a78c:	aa1803e0 	mov	x0, x24
   8a790:	8b150022 	add	x2, x1, x21
   8a794:	f9000e82 	str	x2, [x20, #24]
   8a798:	3835683f 	strb	wzr, [x1, x21]
   8a79c:	94000b39 	bl	8d480 <operator delete[](void*)>
   8a7a0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a7a4:	2a1703e0 	mov	w0, w23
   8a7a8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a7ac:	a94363f7 	ldp	x23, x24, [sp, #48]
   8a7b0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8a7b4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8a7b8:	d65f03c0 	ret
   8a7bc:	aa1603e0 	mov	x0, x22
   8a7c0:	940008bc 	bl	8cab0 <strlen>
   8a7c4:	aa0003f9 	mov	x25, x0
   8a7c8:	b4000080 	cbz	x0, 8a7d8 <CString::Replace(char const*, char const*)+0x1b8>
   8a7cc:	aa0003e1 	mov	x1, x0
   8a7d0:	aa1403e0 	mov	x0, x20
   8a7d4:	97fffe97 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8a7d8:	f9400e80 	ldr	x0, [x20, #24]
   8a7dc:	aa1603e1 	mov	x1, x22
   8a7e0:	110006f7 	add	w23, w23, #0x1
   8a7e4:	94000943 	bl	8ccf0 <strcpy>
   8a7e8:	f9400e80 	ldr	x0, [x20, #24]
   8a7ec:	8b190000 	add	x0, x0, x25
   8a7f0:	f9000e80 	str	x0, [x20, #24]
   8a7f4:	17ffffaf 	b	8a6b0 <CString::Replace(char const*, char const*)+0x90>
   8a7f8:	d503201f 	nop
   8a7fc:	d503201f 	nop

000000000008a800 <CString::PutChar(char, unsigned long)>:
   8a800:	b40002e2 	cbz	x2, 8a85c <CString::PutChar(char, unsigned long)+0x5c>
   8a804:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a808:	910003fd 	mov	x29, sp
   8a80c:	f90013f5 	str	x21, [sp, #32]
   8a810:	13001c35 	sxtb	w21, w1
   8a814:	aa0203e1 	mov	x1, x2
   8a818:	a90153f3 	stp	x19, x20, [sp, #16]
   8a81c:	aa0203f3 	mov	x19, x2
   8a820:	aa0003f4 	mov	x20, x0
   8a824:	97fffe83 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8a828:	d1000661 	sub	x1, x19, #0x1
   8a82c:	d503201f 	nop
   8a830:	f9400e82 	ldr	x2, [x20, #24]
   8a834:	d1000421 	sub	x1, x1, #0x1
   8a838:	b100043f 	cmn	x1, #0x1
   8a83c:	91000440 	add	x0, x2, #0x1
   8a840:	f9000e80 	str	x0, [x20, #24]
   8a844:	39000055 	strb	w21, [x2]
   8a848:	54ffff41 	b.ne	8a830 <CString::PutChar(char, unsigned long)+0x30>  // b.any
   8a84c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a850:	f94013f5 	ldr	x21, [sp, #32]
   8a854:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a858:	d65f03c0 	ret
   8a85c:	d65f03c0 	ret

000000000008a860 <CString::PutString(char const*)>:
   8a860:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a864:	910003fd 	mov	x29, sp
   8a868:	a90153f3 	stp	x19, x20, [sp, #16]
   8a86c:	aa0003f3 	mov	x19, x0
   8a870:	aa0103e0 	mov	x0, x1
   8a874:	f90013f5 	str	x21, [sp, #32]
   8a878:	aa0103f5 	mov	x21, x1
   8a87c:	9400088d 	bl	8cab0 <strlen>
   8a880:	aa0003f4 	mov	x20, x0
   8a884:	b4000080 	cbz	x0, 8a894 <CString::PutString(char const*)+0x34>
   8a888:	aa0003e1 	mov	x1, x0
   8a88c:	aa1303e0 	mov	x0, x19
   8a890:	97fffe68 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8a894:	f9400e60 	ldr	x0, [x19, #24]
   8a898:	aa1503e1 	mov	x1, x21
   8a89c:	94000915 	bl	8ccf0 <strcpy>
   8a8a0:	f9400e60 	ldr	x0, [x19, #24]
   8a8a4:	f94013f5 	ldr	x21, [sp, #32]
   8a8a8:	8b140000 	add	x0, x0, x20
   8a8ac:	f9000e60 	str	x0, [x19, #24]
   8a8b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a8b4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a8b8:	d65f03c0 	ret
   8a8bc:	d503201f 	nop

000000000008a8c0 <CString::ReserveSpace(unsigned long)>:
   8a8c0:	b40004a1 	cbz	x1, 8a954 <CString::ReserveSpace(unsigned long)+0x94>
   8a8c4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8a8c8:	910003fd 	mov	x29, sp
   8a8cc:	a90153f3 	stp	x19, x20, [sp, #16]
   8a8d0:	aa0003f4 	mov	x20, x0
   8a8d4:	f9400682 	ldr	x2, [x20, #8]
   8a8d8:	a9025bf5 	stp	x21, x22, [sp, #32]
   8a8dc:	f9400e95 	ldr	x21, [x20, #24]
   8a8e0:	b9401000 	ldr	w0, [x0, #16]
   8a8e4:	cb0202b5 	sub	x21, x21, x2
   8a8e8:	8b150021 	add	x1, x1, x21
   8a8ec:	91000422 	add	x2, x1, #0x1
   8a8f0:	eb00005f 	cmp	x2, x0
   8a8f4:	540000a8 	b.hi	8a908 <CString::ReserveSpace(unsigned long)+0x48>  // b.pmore
   8a8f8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a8fc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a900:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a904:	d65f03c0 	ret
   8a908:	91010433 	add	x19, x1, #0x41
   8a90c:	aa1303e0 	mov	x0, x19
   8a910:	94000abc 	bl	8d400 <operator new[](unsigned long)>
   8a914:	f9400e81 	ldr	x1, [x20, #24]
   8a918:	aa0003f6 	mov	x22, x0
   8a91c:	3900003f 	strb	wzr, [x1]
   8a920:	f9400681 	ldr	x1, [x20, #8]
   8a924:	940008f3 	bl	8ccf0 <strcpy>
   8a928:	f9400680 	ldr	x0, [x20, #8]
   8a92c:	b4000040 	cbz	x0, 8a934 <CString::ReserveSpace(unsigned long)+0x74>
   8a930:	94000ad4 	bl	8d480 <operator delete[](void*)>
   8a934:	8b1502d5 	add	x21, x22, x21
   8a938:	f9000696 	str	x22, [x20, #8]
   8a93c:	b9001293 	str	w19, [x20, #16]
   8a940:	f9000e95 	str	x21, [x20, #24]
   8a944:	a94153f3 	ldp	x19, x20, [sp, #16]
   8a948:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8a94c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8a950:	d65f03c0 	ret
   8a954:	d65f03c0 	ret
   8a958:	d503201f 	nop
   8a95c:	d503201f 	nop

000000000008a960 <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
   8a960:	2a0203e2 	mov	w2, w2
   8a964:	12001c63 	and	w3, w3, #0xff
   8a968:	eb02003f 	cmp	x1, x2
   8a96c:	d2800024 	mov	x4, #0x1                   	// #1
   8a970:	540003c3 	b.cc	8a9e8 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x88>  // b.lo, b.ul, b.last
   8a974:	d503201f 	nop
   8a978:	9b027c84 	mul	x4, x4, x2
   8a97c:	9ac40826 	udiv	x6, x1, x4
   8a980:	eb0200df 	cmp	x6, x2
   8a984:	aa0603e5 	mov	x5, x6
   8a988:	54ffff82 	b.cs	8a978 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x18>  // b.hs, b.nlast
   8a98c:	52000068 	eor	w8, w3, #0x1
   8a990:	aa0003e7 	mov	x7, x0
   8a994:	531b0908 	ubfiz	w8, w8, #5, #3
   8a998:	1100dd08 	add	w8, w8, #0x37
   8a99c:	12001d08 	and	w8, w8, #0xff
   8a9a0:	14000004 	b	8a9b0 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x50>
   8a9a4:	9ac60825 	udiv	x5, x1, x6
   8a9a8:	aa0603e4 	mov	x4, x6
   8a9ac:	aa0503e6 	mov	x6, x5
   8a9b0:	12001ca3 	and	w3, w5, #0xff
   8a9b4:	f10024bf 	cmp	x5, #0x9
   8a9b8:	9b0484c1 	msub	x1, x6, x4, x1
   8a9bc:	1100c065 	add	w5, w3, #0x30
   8a9c0:	0b030103 	add	w3, w8, w3
   8a9c4:	9ac20886 	udiv	x6, x4, x2
   8a9c8:	13001ca5 	sxtb	w5, w5
   8a9cc:	13001c63 	sxtb	w3, w3
   8a9d0:	1a858063 	csel	w3, w3, w5, hi	// hi = pmore
   8a9d4:	eb02009f 	cmp	x4, x2
   8a9d8:	380014e3 	strb	w3, [x7], #1
   8a9dc:	54fffe42 	b.cs	8a9a4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x44>  // b.hs, b.nlast
   8a9e0:	390000ff 	strb	wzr, [x7]
   8a9e4:	d65f03c0 	ret
   8a9e8:	aa0103e5 	mov	x5, x1
   8a9ec:	aa0103e6 	mov	x6, x1
   8a9f0:	17ffffe7 	b	8a98c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x2c>
   8a9f4:	d503201f 	nop
   8a9f8:	d503201f 	nop
   8a9fc:	d503201f 	nop

000000000008aa00 <CString::ftoa(char*, double, unsigned int)>:
   8aa00:	a9b97bfd 	stp	x29, x30, [sp, #-112]!
   8aa04:	910003fd 	mov	x29, sp
   8aa08:	1e602018 	fcmpe	d0, #0.0
   8aa0c:	a90153f3 	stp	x19, x20, [sp, #16]
   8aa10:	aa0003f3 	mov	x19, x0
   8aa14:	a9025bf5 	stp	x21, x22, [sp, #32]
   8aa18:	2a0103f5 	mov	w21, w1
   8aa1c:	a90363f7 	stp	x23, x24, [sp, #48]
   8aa20:	fd0023e8 	str	d8, [sp, #64]
   8aa24:	1e604008 	fmov	d8, d0
   8aa28:	54000ec4 	b.mi	8ac00 <CString::ftoa(char*, double, unsigned int)+0x200>  // b.first
   8aa2c:	aa0003f8 	mov	x24, x0
   8aa30:	d2e87e00 	mov	x0, #0x43f0000000000000    	// #4895412794951729152
   8aa34:	9e670000 	fmov	d0, x0
   8aa38:	1e602110 	fcmpe	d8, d0
   8aa3c:	54000ecc 	b.gt	8ac14 <CString::ftoa(char*, double, unsigned int)+0x214>
   8aa40:	9e790114 	fcvtzu	x20, d8
   8aa44:	d2800022 	mov	x2, #0x1                   	// #1
   8aa48:	f100269f 	cmp	x20, #0x9
   8aa4c:	54000fa9 	b.ls	8ac40 <CString::ftoa(char*, double, unsigned int)+0x240>  // b.plast
   8aa50:	8b020842 	add	x2, x2, x2, lsl #2
   8aa54:	d37ff842 	lsl	x2, x2, #1
   8aa58:	9ac20a83 	udiv	x3, x20, x2
   8aa5c:	f100247f 	cmp	x3, #0x9
   8aa60:	54ffff88 	b.hi	8aa50 <CString::ftoa(char*, double, unsigned int)+0x50>  // b.pmore
   8aa64:	b202e7e7 	mov	x7, #0xcccccccccccccccc    	// #-3689348814741910324
   8aa68:	aa1803e0 	mov	x0, x24
   8aa6c:	aa1403e5 	mov	x5, x20
   8aa70:	f29999a7 	movk	x7, #0xcccd
   8aa74:	14000003 	b	8aa80 <CString::ftoa(char*, double, unsigned int)+0x80>
   8aa78:	aa0303e2 	mov	x2, x3
   8aa7c:	9ac308a3 	udiv	x3, x5, x3
   8aa80:	12001c64 	and	w4, w3, #0xff
   8aa84:	f100247f 	cmp	x3, #0x9
   8aa88:	1100c083 	add	w3, w4, #0x30
   8aa8c:	11015c84 	add	w4, w4, #0x57
   8aa90:	13001c63 	sxtb	w3, w3
   8aa94:	13001c84 	sxtb	w4, w4
   8aa98:	1a838084 	csel	w4, w4, w3, hi	// hi = pmore
   8aa9c:	9ac208a6 	udiv	x6, x5, x2
   8aaa0:	f100245f 	cmp	x2, #0x9
   8aaa4:	38001404 	strb	w4, [x0], #1
   8aaa8:	9bc77c43 	umulh	x3, x2, x7
   8aaac:	d343fc63 	lsr	x3, x3, #3
   8aab0:	9b0294c5 	msub	x5, x6, x2, x5
   8aab4:	54fffe28 	b.hi	8aa78 <CString::ftoa(char*, double, unsigned int)+0x78>  // b.pmore
   8aab8:	3900001f 	strb	wzr, [x0]
   8aabc:	35000115 	cbnz	w21, 8aadc <CString::ftoa(char*, double, unsigned int)+0xdc>
   8aac0:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8aac4:	aa1303e0 	mov	x0, x19
   8aac8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8aacc:	a94363f7 	ldp	x23, x24, [sp, #48]
   8aad0:	fd4023e8 	ldr	d8, [sp, #64]
   8aad4:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8aad8:	d65f03c0 	ret
   8aadc:	aa1803e0 	mov	x0, x24
   8aae0:	52800276 	mov	w22, #0x13                  	// #19
   8aae4:	940007f3 	bl	8cab0 <strlen>
   8aae8:	528005c1 	mov	w1, #0x2e                  	// #46
   8aaec:	71004ebf 	cmp	w21, #0x13
   8aaf0:	1a9692b6 	csel	w22, w21, w22, ls	// ls = plast
   8aaf4:	8b000317 	add	x23, x24, x0
   8aaf8:	710006bf 	cmp	w21, #0x1
   8aafc:	38206b01 	strb	w1, [x24, x0]
   8ab00:	910006f5 	add	x21, x23, #0x1
   8ab04:	54000a60 	b.eq	8ac50 <CString::ftoa(char*, double, unsigned int)+0x250>  // b.none
   8ab08:	52800040 	mov	w0, #0x2                   	// #2
   8ab0c:	d2800141 	mov	x1, #0xa                   	// #10
   8ab10:	8b010821 	add	x1, x1, x1, lsl #2
   8ab14:	11000400 	add	w0, w0, #0x1
   8ab18:	6b0002df 	cmp	w22, w0
   8ab1c:	d37ff821 	lsl	x1, x1, #1
   8ab20:	54ffff82 	b.cs	8ab10 <CString::ftoa(char*, double, unsigned int)+0x110>  // b.hs, b.nlast
   8ab24:	9e630020 	ucvtf	d0, x1
   8ab28:	9e630281 	ucvtf	d1, x20
   8ab2c:	d2800021 	mov	x1, #0x1                   	// #1
   8ab30:	1e613908 	fsub	d8, d8, d1
   8ab34:	1e600908 	fmul	d8, d8, d0
   8ab38:	9e790104 	fcvtzu	x4, d8
   8ab3c:	f100249f 	cmp	x4, #0x9
   8ab40:	540008c9 	b.ls	8ac58 <CString::ftoa(char*, double, unsigned int)+0x258>  // b.plast
   8ab44:	d503201f 	nop
   8ab48:	8b010821 	add	x1, x1, x1, lsl #2
   8ab4c:	d37ff821 	lsl	x1, x1, #1
   8ab50:	9ac10882 	udiv	x2, x4, x1
   8ab54:	f100245f 	cmp	x2, #0x9
   8ab58:	54ffff88 	b.hi	8ab48 <CString::ftoa(char*, double, unsigned int)+0x148>  // b.pmore
   8ab5c:	b202e7e7 	mov	x7, #0xcccccccccccccccc    	// #-3689348814741910324
   8ab60:	910163e5 	add	x5, sp, #0x58
   8ab64:	f29999a7 	movk	x7, #0xcccd
   8ab68:	14000003 	b	8ab74 <CString::ftoa(char*, double, unsigned int)+0x174>
   8ab6c:	aa0203e1 	mov	x1, x2
   8ab70:	9ac20882 	udiv	x2, x4, x2
   8ab74:	12001c43 	and	w3, w2, #0xff
   8ab78:	f100245f 	cmp	x2, #0x9
   8ab7c:	1100c060 	add	w0, w3, #0x30
   8ab80:	11015c63 	add	w3, w3, #0x57
   8ab84:	13001c00 	sxtb	w0, w0
   8ab88:	13001c63 	sxtb	w3, w3
   8ab8c:	1a808063 	csel	w3, w3, w0, hi	// hi = pmore
   8ab90:	9ac10886 	udiv	x6, x4, x1
   8ab94:	f100243f 	cmp	x1, #0x9
   8ab98:	380014a3 	strb	w3, [x5], #1
   8ab9c:	9bc77c22 	umulh	x2, x1, x7
   8aba0:	d343fc42 	lsr	x2, x2, #3
   8aba4:	9b0190c4 	msub	x4, x6, x1, x4
   8aba8:	54fffe28 	b.hi	8ab6c <CString::ftoa(char*, double, unsigned int)+0x16c>  // b.pmore
   8abac:	910163e0 	add	x0, sp, #0x58
   8abb0:	390000bf 	strb	wzr, [x5]
   8abb4:	940007bf 	bl	8cab0 <strlen>
   8abb8:	4b0002d6 	sub	w22, w22, w0
   8abbc:	510006c0 	sub	w0, w22, #0x1
   8abc0:	34000456 	cbz	w22, 8ac48 <CString::ftoa(char*, double, unsigned int)+0x248>
   8abc4:	91000800 	add	x0, x0, #0x2
   8abc8:	52800601 	mov	w1, #0x30                  	// #48
   8abcc:	8b0002e0 	add	x0, x23, x0
   8abd0:	380016a1 	strb	w1, [x21], #1
   8abd4:	eb0002bf 	cmp	x21, x0
   8abd8:	54ffffc1 	b.ne	8abd0 <CString::ftoa(char*, double, unsigned int)+0x1d0>  // b.any
   8abdc:	910163e1 	add	x1, sp, #0x58
   8abe0:	94000844 	bl	8ccf0 <strcpy>
   8abe4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8abe8:	aa1303e0 	mov	x0, x19
   8abec:	a94153f3 	ldp	x19, x20, [sp, #16]
   8abf0:	a94363f7 	ldp	x23, x24, [sp, #48]
   8abf4:	fd4023e8 	ldr	d8, [sp, #64]
   8abf8:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8abfc:	d65f03c0 	ret
   8ac00:	aa0003f8 	mov	x24, x0
   8ac04:	528005a0 	mov	w0, #0x2d                  	// #45
   8ac08:	1e614008 	fneg	d8, d0
   8ac0c:	38001700 	strb	w0, [x24], #1
   8ac10:	17ffff88 	b	8aa30 <CString::ftoa(char*, double, unsigned int)+0x30>
   8ac14:	aa1803e0 	mov	x0, x24
   8ac18:	90000041 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8ac1c:	913ea021 	add	x1, x1, #0xfa8
   8ac20:	94000834 	bl	8ccf0 <strcpy>
   8ac24:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ac28:	aa1303e0 	mov	x0, x19
   8ac2c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ac30:	a94363f7 	ldp	x23, x24, [sp, #48]
   8ac34:	fd4023e8 	ldr	d8, [sp, #64]
   8ac38:	a8c77bfd 	ldp	x29, x30, [sp], #112
   8ac3c:	d65f03c0 	ret
   8ac40:	aa1403e3 	mov	x3, x20
   8ac44:	17ffff88 	b	8aa64 <CString::ftoa(char*, double, unsigned int)+0x64>
   8ac48:	aa1503e0 	mov	x0, x21
   8ac4c:	17ffffe4 	b	8abdc <CString::ftoa(char*, double, unsigned int)+0x1dc>
   8ac50:	1e649000 	fmov	d0, #1.000000000000000000e+01
   8ac54:	17ffffb5 	b	8ab28 <CString::ftoa(char*, double, unsigned int)+0x128>
   8ac58:	aa0403e2 	mov	x2, x4
   8ac5c:	17ffffc0 	b	8ab5c <CString::ftoa(char*, double, unsigned int)+0x15c>

000000000008ac60 <CString::FormatV(char const*, std::__va_list)>:
   8ac60:	a9b57bfd 	stp	x29, x30, [sp, #-176]!
   8ac64:	910003fd 	mov	x29, sp
   8ac68:	a90153f3 	stp	x19, x20, [sp, #16]
   8ac6c:	a9046bf9 	stp	x25, x26, [sp, #64]
   8ac70:	aa0103f9 	mov	x25, x1
   8ac74:	aa0003fa 	mov	x26, x0
   8ac78:	a9400454 	ldp	x20, x1, [x2]
   8ac7c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8ac80:	aa0203f5 	mov	x21, x2
   8ac84:	f9400400 	ldr	x0, [x0, #8]
   8ac88:	a90363f7 	stp	x23, x24, [sp, #48]
   8ac8c:	f90037e1 	str	x1, [sp, #104]
   8ac90:	29435c56 	ldp	w22, w23, [x2, #24]
   8ac94:	b4000040 	cbz	x0, 8ac9c <CString::FormatV(char const*, std::__va_list)+0x3c>
   8ac98:	940009fa 	bl	8d480 <operator delete[](void*)>
   8ac9c:	52800801 	mov	w1, #0x40                  	// #64
   8aca0:	d2800800 	mov	x0, #0x40                  	// #64
   8aca4:	b9001341 	str	w1, [x26, #16]
   8aca8:	940009d6 	bl	8d400 <operator new[](unsigned long)>
   8acac:	f9000740 	str	x0, [x26, #8]
   8acb0:	f9000f40 	str	x0, [x26, #24]
   8acb4:	39c00333 	ldrsb	w19, [x25]
   8acb8:	34000af3 	cbz	w19, 8ae14 <CString::FormatV(char const*, std::__va_list)+0x1b4>
   8acbc:	a90573fb 	stp	x27, x28, [sp, #80]
   8acc0:	7100967f 	cmp	w19, #0x25
   8acc4:	54000b61 	b.ne	8ae30 <CString::FormatV(char const*, std::__va_list)+0x1d0>  // b.any
   8acc8:	39c00722 	ldrsb	w2, [x25, #1]
   8accc:	7100945f 	cmp	w2, #0x25
   8acd0:	54001080 	b.eq	8aee0 <CString::FormatV(char const*, std::__va_list)+0x280>  // b.none
   8acd4:	71008c5f 	cmp	w2, #0x23
   8acd8:	54000fc0 	b.eq	8aed0 <CString::FormatV(char const*, std::__va_list)+0x270>  // b.none
   8acdc:	91000739 	add	x25, x25, #0x1
   8ace0:	52800006 	mov	w6, #0x0                   	// #0
   8ace4:	7100b45f 	cmp	w2, #0x2d
   8ace8:	52800018 	mov	w24, #0x0                   	// #0
   8acec:	54000081 	b.ne	8acfc <CString::FormatV(char const*, std::__va_list)+0x9c>  // b.any
   8acf0:	39c00722 	ldrsb	w2, [x25, #1]
   8acf4:	52800038 	mov	w24, #0x1                   	// #1
   8acf8:	91000739 	add	x25, x25, #0x1
   8acfc:	7100c05f 	cmp	w2, #0x30
   8ad00:	5280001c 	mov	w28, #0x0                   	// #0
   8ad04:	54000081 	b.ne	8ad14 <CString::FormatV(char const*, std::__va_list)+0xb4>  // b.any
   8ad08:	39c00722 	ldrsb	w2, [x25, #1]
   8ad0c:	5280003c 	mov	w28, #0x1                   	// #1
   8ad10:	91000739 	add	x25, x25, #0x1
   8ad14:	5100c043 	sub	w3, w2, #0x30
   8ad18:	d2800013 	mov	x19, #0x0                   	// #0
   8ad1c:	12001c60 	and	w0, w3, #0xff
   8ad20:	7100241f 	cmp	w0, #0x9
   8ad24:	54000128 	b.hi	8ad48 <CString::FormatV(char const*, std::__va_list)+0xe8>  // b.pmore
   8ad28:	38c01f22 	ldrsb	w2, [x25, #1]!
   8ad2c:	8b130a73 	add	x19, x19, x19, lsl #2
   8ad30:	93401c63 	sxtb	x3, w3
   8ad34:	8b130473 	add	x19, x3, x19, lsl #1
   8ad38:	5100c043 	sub	w3, w2, #0x30
   8ad3c:	12001c64 	and	w4, w3, #0xff
   8ad40:	7100249f 	cmp	w4, #0x9
   8ad44:	54ffff29 	b.ls	8ad28 <CString::FormatV(char const*, std::__va_list)+0xc8>  // b.plast
   8ad48:	7100b85f 	cmp	w2, #0x2e
   8ad4c:	54002560 	b.eq	8b1f8 <CString::FormatV(char const*, std::__va_list)+0x598>  // b.none
   8ad50:	39c00323 	ldrsb	w3, [x25]
   8ad54:	528000c1 	mov	w1, #0x6                   	// #6
   8ad58:	7101b07f 	cmp	w3, #0x6c
   8ad5c:	52800002 	mov	w2, #0x0                   	// #0
   8ad60:	54000081 	b.ne	8ad70 <CString::FormatV(char const*, std::__va_list)+0x110>  // b.any
   8ad64:	39c00723 	ldrsb	w3, [x25, #1]
   8ad68:	52800022 	mov	w2, #0x1                   	// #1
   8ad6c:	91000739 	add	x25, x25, #0x1
   8ad70:	7101bc7f 	cmp	w3, #0x6f
   8ad74:	54002640 	b.eq	8b23c <CString::FormatV(char const*, std::__va_list)+0x5dc>  // b.none
   8ad78:	540006cc 	b.gt	8ae50 <CString::FormatV(char const*, std::__va_list)+0x1f0>
   8ad7c:	7101907f 	cmp	w3, #0x64
   8ad80:	54000ee0 	b.eq	8af5c <CString::FormatV(char const*, std::__va_list)+0x2fc>  // b.none
   8ad84:	54000c0d 	b.le	8af04 <CString::FormatV(char const*, std::__va_list)+0x2a4>
   8ad88:	7101987f 	cmp	w3, #0x66
   8ad8c:	54000e41 	b.ne	8af54 <CString::FormatV(char const*, std::__va_list)+0x2f4>  // b.any
   8ad90:	37f83e57 	tbnz	w23, #31, 8b558 <CString::FormatV(char const*, std::__va_list)+0x8f8>
   8ad94:	91003e9c 	add	x28, x20, #0xf
   8ad98:	927df39c 	and	x28, x28, #0xfffffffffffffff8
   8ad9c:	fd400280 	ldr	d0, [x20]
   8ada0:	910203fb 	add	x27, sp, #0x80
   8ada4:	aa1b03e0 	mov	x0, x27
   8ada8:	97ffff16 	bl	8aa00 <CString::ftoa(char*, double, unsigned int)>
   8adac:	aa1b03e0 	mov	x0, x27
   8adb0:	94000740 	bl	8cab0 <strlen>
   8adb4:	aa0003f4 	mov	x20, x0
   8adb8:	350042b8 	cbnz	w24, 8b60c <CString::FormatV(char const*, std::__va_list)+0x9ac>
   8adbc:	eb13001f 	cmp	x0, x19
   8adc0:	54003363 	b.cc	8b42c <CString::FormatV(char const*, std::__va_list)+0x7cc>  // b.lo, b.ul, b.last
   8adc4:	aa1b03e0 	mov	x0, x27
   8adc8:	9400073a 	bl	8cab0 <strlen>
   8adcc:	aa0003f3 	mov	x19, x0
   8add0:	b4000080 	cbz	x0, 8ade0 <CString::FormatV(char const*, std::__va_list)+0x180>
   8add4:	aa0003e1 	mov	x1, x0
   8add8:	aa1a03e0 	mov	x0, x26
   8addc:	97fffd15 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8ade0:	f9400f40 	ldr	x0, [x26, #24]
   8ade4:	aa1b03e1 	mov	x1, x27
   8ade8:	940007c2 	bl	8ccf0 <strcpy>
   8adec:	f9400f40 	ldr	x0, [x26, #24]
   8adf0:	8b130000 	add	x0, x0, x19
   8adf4:	f9000f40 	str	x0, [x26, #24]
   8adf8:	aa1c03f4 	mov	x20, x28
   8adfc:	d503201f 	nop
   8ae00:	91000739 	add	x25, x25, #0x1
   8ae04:	39c00333 	ldrsb	w19, [x25]
   8ae08:	35fff5d3 	cbnz	w19, 8acc0 <CString::FormatV(char const*, std::__va_list)+0x60>
   8ae0c:	f9400f40 	ldr	x0, [x26, #24]
   8ae10:	a94573fb 	ldp	x27, x28, [sp, #80]
   8ae14:	3900001f 	strb	wzr, [x0]
   8ae18:	a94153f3 	ldp	x19, x20, [sp, #16]
   8ae1c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8ae20:	a94363f7 	ldp	x23, x24, [sp, #48]
   8ae24:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8ae28:	a8cb7bfd 	ldp	x29, x30, [sp], #176
   8ae2c:	d65f03c0 	ret
   8ae30:	d2800021 	mov	x1, #0x1                   	// #1
   8ae34:	aa1a03e0 	mov	x0, x26
   8ae38:	97fffcfe 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8ae3c:	f9400f40 	ldr	x0, [x26, #24]
   8ae40:	91000401 	add	x1, x0, #0x1
   8ae44:	f9000f41 	str	x1, [x26, #24]
   8ae48:	39000013 	strb	w19, [x0]
   8ae4c:	17ffffed 	b	8ae00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   8ae50:	7101d47f 	cmp	w3, #0x75
   8ae54:	54002100 	b.eq	8b274 <CString::FormatV(char const*, std::__va_list)+0x614>  // b.none
   8ae58:	5400108c 	b.gt	8b068 <CString::FormatV(char const*, std::__va_list)+0x408>
   8ae5c:	7101c07f 	cmp	w3, #0x70
   8ae60:	54001080 	b.eq	8b070 <CString::FormatV(char const*, std::__va_list)+0x410>  // b.none
   8ae64:	7101cc7f 	cmp	w3, #0x73
   8ae68:	540019a1 	b.ne	8b19c <CString::FormatV(char const*, std::__va_list)+0x53c>  // b.any
   8ae6c:	37f83856 	tbnz	w22, #31, 8b574 <CString::FormatV(char const*, std::__va_list)+0x914>
   8ae70:	91003e9b 	add	x27, x20, #0xf
   8ae74:	927df37b 	and	x27, x27, #0xfffffffffffffff8
   8ae78:	f9400294 	ldr	x20, [x20]
   8ae7c:	aa1403e0 	mov	x0, x20
   8ae80:	9400070c 	bl	8cab0 <strlen>
   8ae84:	aa0003fc 	mov	x28, x0
   8ae88:	35003ff8 	cbnz	w24, 8b684 <CString::FormatV(char const*, std::__va_list)+0xa24>
   8ae8c:	eb13001f 	cmp	x0, x19
   8ae90:	54002ec3 	b.cc	8b468 <CString::FormatV(char const*, std::__va_list)+0x808>  // b.lo, b.ul, b.last
   8ae94:	aa1403e0 	mov	x0, x20
   8ae98:	94000706 	bl	8cab0 <strlen>
   8ae9c:	aa0003f3 	mov	x19, x0
   8aea0:	b4000080 	cbz	x0, 8aeb0 <CString::FormatV(char const*, std::__va_list)+0x250>
   8aea4:	aa0003e1 	mov	x1, x0
   8aea8:	aa1a03e0 	mov	x0, x26
   8aeac:	97fffce1 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8aeb0:	f9400f40 	ldr	x0, [x26, #24]
   8aeb4:	aa1403e1 	mov	x1, x20
   8aeb8:	9400078e 	bl	8ccf0 <strcpy>
   8aebc:	f9400f40 	ldr	x0, [x26, #24]
   8aec0:	8b130000 	add	x0, x0, x19
   8aec4:	f9000f40 	str	x0, [x26, #24]
   8aec8:	aa1b03f4 	mov	x20, x27
   8aecc:	17ffffcd 	b	8ae00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   8aed0:	39c00b22 	ldrsb	w2, [x25, #2]
   8aed4:	52800026 	mov	w6, #0x1                   	// #1
   8aed8:	91000b39 	add	x25, x25, #0x2
   8aedc:	17ffff82 	b	8ace4 <CString::FormatV(char const*, std::__va_list)+0x84>
   8aee0:	d2800021 	mov	x1, #0x1                   	// #1
   8aee4:	aa1a03e0 	mov	x0, x26
   8aee8:	97fffcd2 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8aeec:	f9400f40 	ldr	x0, [x26, #24]
   8aef0:	91000b39 	add	x25, x25, #0x2
   8aef4:	91000401 	add	x1, x0, #0x1
   8aef8:	f9000f41 	str	x1, [x26, #24]
   8aefc:	39000013 	strb	w19, [x0]
   8af00:	17ffffc1 	b	8ae04 <CString::FormatV(char const*, std::__va_list)+0x1a4>
   8af04:	7101607f 	cmp	w3, #0x58
   8af08:	54002220 	b.eq	8b34c <CString::FormatV(char const*, std::__va_list)+0x6ec>  // b.none
   8af0c:	71018c7f 	cmp	w3, #0x63
   8af10:	54001461 	b.ne	8b19c <CString::FormatV(char const*, std::__va_list)+0x53c>  // b.any
   8af14:	37f833f6 	tbnz	w22, #31, 8b590 <CString::FormatV(char const*, std::__va_list)+0x930>
   8af18:	91002e9b 	add	x27, x20, #0xb
   8af1c:	927df37b 	and	x27, x27, #0xfffffffffffffff8
   8af20:	39c00294 	ldrsb	w20, [x20]
   8af24:	35003458 	cbnz	w24, 8b5ac <CString::FormatV(char const*, std::__va_list)+0x94c>
   8af28:	f100067f 	cmp	x19, #0x1
   8af2c:	54002528 	b.hi	8b3d0 <CString::FormatV(char const*, std::__va_list)+0x770>  // b.pmore
   8af30:	d2800021 	mov	x1, #0x1                   	// #1
   8af34:	aa1a03e0 	mov	x0, x26
   8af38:	97fffcbe 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8af3c:	f9400f40 	ldr	x0, [x26, #24]
   8af40:	91000401 	add	x1, x0, #0x1
   8af44:	f9000f41 	str	x1, [x26, #24]
   8af48:	39000014 	strb	w20, [x0]
   8af4c:	aa1b03f4 	mov	x20, x27
   8af50:	17ffffac 	b	8ae00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   8af54:	7101a47f 	cmp	w3, #0x69
   8af58:	54001221 	b.ne	8b19c <CString::FormatV(char const*, std::__va_list)+0x53c>  // b.any
   8af5c:	34001ec2 	cbz	w2, 8b334 <CString::FormatV(char const*, std::__va_list)+0x6d4>
   8af60:	37f83f96 	tbnz	w22, #31, 8b750 <CString::FormatV(char const*, std::__va_list)+0xaf0>
   8af64:	91003e81 	add	x1, x20, #0xf
   8af68:	aa1403e0 	mov	x0, x20
   8af6c:	927df034 	and	x20, x1, #0xfffffffffffffff8
   8af70:	f9400002 	ldr	x2, [x0]
   8af74:	52800008 	mov	w8, #0x0                   	// #0
   8af78:	b6f80062 	tbz	x2, #63, 8af84 <CString::FormatV(char const*, std::__va_list)+0x324>
   8af7c:	cb0203e2 	neg	x2, x2
   8af80:	52800028 	mov	w8, #0x1                   	// #1
   8af84:	f100245f 	cmp	x2, #0x9
   8af88:	aa0203e3 	mov	x3, x2
   8af8c:	d2800020 	mov	x0, #0x1                   	// #1
   8af90:	5400462d 	b.le	8b854 <CString::FormatV(char const*, std::__va_list)+0xbf4>
   8af94:	d503201f 	nop
   8af98:	8b000800 	add	x0, x0, x0, lsl #2
   8af9c:	d37ff800 	lsl	x0, x0, #1
   8afa0:	9ac00841 	udiv	x1, x2, x0
   8afa4:	f100243f 	cmp	x1, #0x9
   8afa8:	54ffff88 	b.hi	8af98 <CString::FormatV(char const*, std::__va_list)+0x338>  // b.pmore
   8afac:	910203fb 	add	x27, sp, #0x80
   8afb0:	b202e7e9 	mov	x9, #0xcccccccccccccccc    	// #-3689348814741910324
   8afb4:	f29999a9 	movk	x9, #0xcccd
   8afb8:	aa1b03e6 	mov	x6, x27
   8afbc:	14000003 	b	8afc8 <CString::FormatV(char const*, std::__va_list)+0x368>
   8afc0:	aa0103e0 	mov	x0, x1
   8afc4:	9ac10861 	udiv	x1, x3, x1
   8afc8:	12001c22 	and	w2, w1, #0xff
   8afcc:	f100243f 	cmp	x1, #0x9
   8afd0:	1100c044 	add	w4, w2, #0x30
   8afd4:	11015c41 	add	w1, w2, #0x57
   8afd8:	13001c21 	sxtb	w1, w1
   8afdc:	13001c82 	sxtb	w2, w4
   8afe0:	1a828021 	csel	w1, w1, w2, hi	// hi = pmore
   8afe4:	9ac00867 	udiv	x7, x3, x0
   8afe8:	380014c1 	strb	w1, [x6], #1
   8afec:	f100241f 	cmp	x0, #0x9
   8aff0:	9bc97c01 	umulh	x1, x0, x9
   8aff4:	d343fc21 	lsr	x1, x1, #3
   8aff8:	9b008ce3 	msub	x3, x7, x0, x3
   8affc:	54fffe28 	b.hi	8afc0 <CString::FormatV(char const*, std::__va_list)+0x360>  // b.pmore
   8b000:	aa1b03e0 	mov	x0, x27
   8b004:	390000df 	strb	wzr, [x6]
   8b008:	b90073e8 	str	w8, [sp, #112]
   8b00c:	940006a9 	bl	8cab0 <strlen>
   8b010:	b94073e8 	ldr	w8, [sp, #112]
   8b014:	aa0003e2 	mov	x2, x0
   8b018:	12000103 	and	w3, w8, #0x1
   8b01c:	35002428 	cbnz	w8, 8b4a0 <CString::FormatV(char const*, std::__va_list)+0x840>
   8b020:	35002598 	cbnz	w24, 8b4d0 <CString::FormatV(char const*, std::__va_list)+0x870>
   8b024:	34003cbc 	cbz	w28, 8b7b8 <CString::FormatV(char const*, std::__va_list)+0xb58>
   8b028:	eb13005f 	cmp	x2, x19
   8b02c:	54004183 	b.cc	8b85c <CString::FormatV(char const*, std::__va_list)+0xbfc>  // b.lo, b.ul, b.last
   8b030:	aa1b03e0 	mov	x0, x27
   8b034:	9400069f 	bl	8cab0 <strlen>
   8b038:	aa0003f3 	mov	x19, x0
   8b03c:	b4000080 	cbz	x0, 8b04c <CString::FormatV(char const*, std::__va_list)+0x3ec>
   8b040:	aa0003e1 	mov	x1, x0
   8b044:	aa1a03e0 	mov	x0, x26
   8b048:	97fffc7a 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b04c:	f9400f40 	ldr	x0, [x26, #24]
   8b050:	aa1b03e1 	mov	x1, x27
   8b054:	94000727 	bl	8ccf0 <strcpy>
   8b058:	f9400f40 	ldr	x0, [x26, #24]
   8b05c:	8b130000 	add	x0, x0, x19
   8b060:	f9000f40 	str	x0, [x26, #24]
   8b064:	17ffff67 	b	8ae00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   8b068:	7101e07f 	cmp	w3, #0x78
   8b06c:	54000981 	b.ne	8b19c <CString::FormatV(char const*, std::__va_list)+0x53c>  // b.any
   8b070:	d280021b 	mov	x27, #0x10                  	// #16
   8b074:	35001a86 	cbnz	w6, 8b3c4 <CString::FormatV(char const*, std::__va_list)+0x764>
   8b078:	34000aa2 	cbz	w2, 8b1cc <CString::FormatV(char const*, std::__va_list)+0x56c>
   8b07c:	37f814d6 	tbnz	w22, #31, 8b314 <CString::FormatV(char const*, std::__va_list)+0x6b4>
   8b080:	91003e81 	add	x1, x20, #0xf
   8b084:	aa1403e0 	mov	x0, x20
   8b088:	927df034 	and	x20, x1, #0xfffffffffffffff8
   8b08c:	f9400004 	ldr	x4, [x0]
   8b090:	d2800022 	mov	x2, #0x1                   	// #1
   8b094:	eb1b009f 	cmp	x4, x27
   8b098:	54000aa3 	b.cc	8b1ec <CString::FormatV(char const*, std::__va_list)+0x58c>  // b.lo, b.ul, b.last
   8b09c:	d503201f 	nop
   8b0a0:	9b1b7c42 	mul	x2, x2, x27
   8b0a4:	9ac20881 	udiv	x1, x4, x2
   8b0a8:	eb1b003f 	cmp	x1, x27
   8b0ac:	aa0103e0 	mov	x0, x1
   8b0b0:	54ffff82 	b.cs	8b0a0 <CString::FormatV(char const*, std::__va_list)+0x440>  // b.hs, b.nlast
   8b0b4:	7101607f 	cmp	w3, #0x58
   8b0b8:	1a9f07e7 	cset	w7, ne	// ne = any
   8b0bc:	531b68e7 	lsl	w7, w7, #5
   8b0c0:	1100dce7 	add	w7, w7, #0x37
   8b0c4:	910203e6 	add	x6, sp, #0x80
   8b0c8:	14000004 	b	8b0d8 <CString::FormatV(char const*, std::__va_list)+0x478>
   8b0cc:	9ac10880 	udiv	x0, x4, x1
   8b0d0:	aa0103e2 	mov	x2, x1
   8b0d4:	aa0003e1 	mov	x1, x0
   8b0d8:	12001c03 	and	w3, w0, #0xff
   8b0dc:	f100241f 	cmp	x0, #0x9
   8b0e0:	9b029024 	msub	x4, x1, x2, x4
   8b0e4:	1100c060 	add	w0, w3, #0x30
   8b0e8:	0b0300e3 	add	w3, w7, w3
   8b0ec:	9adb0841 	udiv	x1, x2, x27
   8b0f0:	13001c00 	sxtb	w0, w0
   8b0f4:	13001c63 	sxtb	w3, w3
   8b0f8:	1a808063 	csel	w3, w3, w0, hi	// hi = pmore
   8b0fc:	eb1b005f 	cmp	x2, x27
   8b100:	380014c3 	strb	w3, [x6], #1
   8b104:	54fffe42 	b.cs	8b0cc <CString::FormatV(char const*, std::__va_list)+0x46c>  // b.hs, b.nlast
   8b108:	910203e0 	add	x0, sp, #0x80
   8b10c:	390000df 	strb	wzr, [x6]
   8b110:	94000668 	bl	8cab0 <strlen>
   8b114:	aa0003fb 	mov	x27, x0
   8b118:	35000b38 	cbnz	w24, 8b27c <CString::FormatV(char const*, std::__va_list)+0x61c>
   8b11c:	eb13001f 	cmp	x0, x19
   8b120:	54000222 	b.cs	8b164 <CString::FormatV(char const*, std::__va_list)+0x504>  // b.hs, b.nlast
   8b124:	cb000273 	sub	x19, x19, x0
   8b128:	52800402 	mov	w2, #0x20                  	// #32
   8b12c:	7100039f 	cmp	w28, #0x0
   8b130:	aa1a03e0 	mov	x0, x26
   8b134:	aa1303e1 	mov	x1, x19
   8b138:	5280061b 	mov	w27, #0x30                  	// #48
   8b13c:	1a82137b 	csel	w27, w27, w2, ne	// ne = any
   8b140:	97fffc3c 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b144:	d1000662 	sub	x2, x19, #0x1
   8b148:	f9400f40 	ldr	x0, [x26, #24]
   8b14c:	d1000442 	sub	x2, x2, #0x1
   8b150:	b100045f 	cmn	x2, #0x1
   8b154:	91000401 	add	x1, x0, #0x1
   8b158:	f9000f41 	str	x1, [x26, #24]
   8b15c:	3900001b 	strb	w27, [x0]
   8b160:	54ffff41 	b.ne	8b148 <CString::FormatV(char const*, std::__va_list)+0x4e8>  // b.any
   8b164:	910203e0 	add	x0, sp, #0x80
   8b168:	94000652 	bl	8cab0 <strlen>
   8b16c:	aa0003f3 	mov	x19, x0
   8b170:	b4000080 	cbz	x0, 8b180 <CString::FormatV(char const*, std::__va_list)+0x520>
   8b174:	aa0003e1 	mov	x1, x0
   8b178:	aa1a03e0 	mov	x0, x26
   8b17c:	97fffc2d 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b180:	f9400f40 	ldr	x0, [x26, #24]
   8b184:	910203e1 	add	x1, sp, #0x80
   8b188:	940006da 	bl	8ccf0 <strcpy>
   8b18c:	f9400f40 	ldr	x0, [x26, #24]
   8b190:	8b130000 	add	x0, x0, x19
   8b194:	f9000f40 	str	x0, [x26, #24]
   8b198:	17ffff1a 	b	8ae00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   8b19c:	d2800021 	mov	x1, #0x1                   	// #1
   8b1a0:	aa1a03e0 	mov	x0, x26
   8b1a4:	97fffc23 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b1a8:	f9400f42 	ldr	x2, [x26, #24]
   8b1ac:	d2800021 	mov	x1, #0x1                   	// #1
   8b1b0:	528004a3 	mov	w3, #0x25                  	// #37
   8b1b4:	aa1a03e0 	mov	x0, x26
   8b1b8:	8b010044 	add	x4, x2, x1
   8b1bc:	f9000f44 	str	x4, [x26, #24]
   8b1c0:	39000043 	strb	w3, [x2]
   8b1c4:	39c00333 	ldrsb	w19, [x25]
   8b1c8:	17ffff1c 	b	8ae38 <CString::FormatV(char const*, std::__va_list)+0x1d8>
   8b1cc:	37f80936 	tbnz	w22, #31, 8b2f0 <CString::FormatV(char const*, std::__va_list)+0x690>
   8b1d0:	aa1403e0 	mov	x0, x20
   8b1d4:	91002e81 	add	x1, x20, #0xb
   8b1d8:	b9400004 	ldr	w4, [x0]
   8b1dc:	927df034 	and	x20, x1, #0xfffffffffffffff8
   8b1e0:	eb1b009f 	cmp	x4, x27
   8b1e4:	d2800022 	mov	x2, #0x1                   	// #1
   8b1e8:	54fff5c2 	b.cs	8b0a0 <CString::FormatV(char const*, std::__va_list)+0x440>  // b.hs, b.nlast
   8b1ec:	aa0403e0 	mov	x0, x4
   8b1f0:	aa0403e1 	mov	x1, x4
   8b1f4:	17ffffb0 	b	8b0b4 <CString::FormatV(char const*, std::__va_list)+0x454>
   8b1f8:	39c00723 	ldrsb	w3, [x25, #1]
   8b1fc:	52800001 	mov	w1, #0x0                   	// #0
   8b200:	91000739 	add	x25, x25, #0x1
   8b204:	5100c060 	sub	w0, w3, #0x30
   8b208:	12001c00 	and	w0, w0, #0xff
   8b20c:	7100241f 	cmp	w0, #0x9
   8b210:	54ffda48 	b.hi	8ad58 <CString::FormatV(char const*, std::__va_list)+0xf8>  // b.pmore
   8b214:	d503201f 	nop
   8b218:	0b010821 	add	w1, w1, w1, lsl #2
   8b21c:	0b010461 	add	w1, w3, w1, lsl #1
   8b220:	38c01f23 	ldrsb	w3, [x25, #1]!
   8b224:	5100c021 	sub	w1, w1, #0x30
   8b228:	5100c060 	sub	w0, w3, #0x30
   8b22c:	12001c00 	and	w0, w0, #0xff
   8b230:	7100241f 	cmp	w0, #0x9
   8b234:	54ffff29 	b.ls	8b218 <CString::FormatV(char const*, std::__va_list)+0x5b8>  // b.plast
   8b238:	17fffec8 	b	8ad58 <CString::FormatV(char const*, std::__va_list)+0xf8>
   8b23c:	d280011b 	mov	x27, #0x8                   	// #8
   8b240:	34fff1c6 	cbz	w6, 8b078 <CString::FormatV(char const*, std::__va_list)+0x418>
   8b244:	d2800021 	mov	x1, #0x1                   	// #1
   8b248:	aa1a03e0 	mov	x0, x26
   8b24c:	b90073e2 	str	w2, [sp, #112]
   8b250:	97fffbf8 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b254:	f9400f40 	ldr	x0, [x26, #24]
   8b258:	52800601 	mov	w1, #0x30                  	// #48
   8b25c:	b94073e2 	ldr	w2, [sp, #112]
   8b260:	91000403 	add	x3, x0, #0x1
   8b264:	f9000f43 	str	x3, [x26, #24]
   8b268:	39000001 	strb	w1, [x0]
   8b26c:	39c00323 	ldrsb	w3, [x25]
   8b270:	17ffff82 	b	8b078 <CString::FormatV(char const*, std::__va_list)+0x418>
   8b274:	d280015b 	mov	x27, #0xa                   	// #10
   8b278:	17ffff80 	b	8b078 <CString::FormatV(char const*, std::__va_list)+0x418>
   8b27c:	910203e0 	add	x0, sp, #0x80
   8b280:	9400060c 	bl	8cab0 <strlen>
   8b284:	aa0003fc 	mov	x28, x0
   8b288:	b4000080 	cbz	x0, 8b298 <CString::FormatV(char const*, std::__va_list)+0x638>
   8b28c:	aa0003e1 	mov	x1, x0
   8b290:	aa1a03e0 	mov	x0, x26
   8b294:	97fffbe7 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b298:	f9400f40 	ldr	x0, [x26, #24]
   8b29c:	910203e1 	add	x1, sp, #0x80
   8b2a0:	94000694 	bl	8ccf0 <strcpy>
   8b2a4:	f9400f40 	ldr	x0, [x26, #24]
   8b2a8:	eb13037f 	cmp	x27, x19
   8b2ac:	8b1c0000 	add	x0, x0, x28
   8b2b0:	f9000f40 	str	x0, [x26, #24]
   8b2b4:	54ffda62 	b.cs	8ae00 <CString::FormatV(char const*, std::__va_list)+0x1a0>  // b.hs, b.nlast
   8b2b8:	cb1b027b 	sub	x27, x19, x27
   8b2bc:	aa1a03e0 	mov	x0, x26
   8b2c0:	aa1b03e1 	mov	x1, x27
   8b2c4:	97fffbdb 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b2c8:	d1000760 	sub	x0, x27, #0x1
   8b2cc:	52800403 	mov	w3, #0x20                  	// #32
   8b2d0:	f9400f41 	ldr	x1, [x26, #24]
   8b2d4:	d1000400 	sub	x0, x0, #0x1
   8b2d8:	b100041f 	cmn	x0, #0x1
   8b2dc:	91000422 	add	x2, x1, #0x1
   8b2e0:	f9000f42 	str	x2, [x26, #24]
   8b2e4:	39000023 	strb	w3, [x1]
   8b2e8:	54ffff41 	b.ne	8b2d0 <CString::FormatV(char const*, std::__va_list)+0x670>  // b.any
   8b2ec:	17fffec5 	b	8ae00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   8b2f0:	110022c1 	add	w1, w22, #0x8
   8b2f4:	7100003f 	cmp	w1, #0x0
   8b2f8:	5400088d 	b.le	8b408 <CString::FormatV(char const*, std::__va_list)+0x7a8>
   8b2fc:	aa1403e0 	mov	x0, x20
   8b300:	91002e82 	add	x2, x20, #0xb
   8b304:	b9400004 	ldr	w4, [x0]
   8b308:	2a0103f6 	mov	w22, w1
   8b30c:	927df054 	and	x20, x2, #0xfffffffffffffff8
   8b310:	17ffffb4 	b	8b1e0 <CString::FormatV(char const*, std::__va_list)+0x580>
   8b314:	110022c1 	add	w1, w22, #0x8
   8b318:	7100003f 	cmp	w1, #0x0
   8b31c:	5400080d 	b.le	8b41c <CString::FormatV(char const*, std::__va_list)+0x7bc>
   8b320:	91003e82 	add	x2, x20, #0xf
   8b324:	aa1403e0 	mov	x0, x20
   8b328:	2a0103f6 	mov	w22, w1
   8b32c:	927df054 	and	x20, x2, #0xfffffffffffffff8
   8b330:	17ffff57 	b	8b08c <CString::FormatV(char const*, std::__va_list)+0x42c>
   8b334:	37f81fd6 	tbnz	w22, #31, 8b72c <CString::FormatV(char const*, std::__va_list)+0xacc>
   8b338:	aa1403e0 	mov	x0, x20
   8b33c:	91002e81 	add	x1, x20, #0xb
   8b340:	b9800002 	ldrsw	x2, [x0]
   8b344:	927df034 	and	x20, x1, #0xfffffffffffffff8
   8b348:	17ffff0b 	b	8af74 <CString::FormatV(char const*, std::__va_list)+0x314>
   8b34c:	d280021b 	mov	x27, #0x10                  	// #16
   8b350:	34ffe946 	cbz	w6, 8b078 <CString::FormatV(char const*, std::__va_list)+0x418>
   8b354:	f000003b 	adrp	x27, 92000 <uart_putHexByte::hexDigits>
   8b358:	913ee37b 	add	x27, x27, #0xfb8
   8b35c:	aa1b03e0 	mov	x0, x27
   8b360:	b90073e2 	str	w2, [sp, #112]
   8b364:	940005d3 	bl	8cab0 <strlen>
   8b368:	b94073e2 	ldr	w2, [sp, #112]
   8b36c:	aa0003e3 	mov	x3, x0
   8b370:	b4000100 	cbz	x0, 8b390 <CString::FormatV(char const*, std::__va_list)+0x730>
   8b374:	aa0003e1 	mov	x1, x0
   8b378:	aa1a03e0 	mov	x0, x26
   8b37c:	f9003be3 	str	x3, [sp, #112]
   8b380:	b9007be2 	str	w2, [sp, #120]
   8b384:	97fffbab 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b388:	f9403be3 	ldr	x3, [sp, #112]
   8b38c:	b9407be2 	ldr	w2, [sp, #120]
   8b390:	aa1b03e1 	mov	x1, x27
   8b394:	b90073e2 	str	w2, [sp, #112]
   8b398:	d280021b 	mov	x27, #0x10                  	// #16
   8b39c:	f9400f40 	ldr	x0, [x26, #24]
   8b3a0:	f9003fe3 	str	x3, [sp, #120]
   8b3a4:	94000653 	bl	8ccf0 <strcpy>
   8b3a8:	f9400f40 	ldr	x0, [x26, #24]
   8b3ac:	f9403fe3 	ldr	x3, [sp, #120]
   8b3b0:	b94073e2 	ldr	w2, [sp, #112]
   8b3b4:	8b030000 	add	x0, x0, x3
   8b3b8:	f9000f40 	str	x0, [x26, #24]
   8b3bc:	39c00323 	ldrsb	w3, [x25]
   8b3c0:	17ffff2e 	b	8b078 <CString::FormatV(char const*, std::__va_list)+0x418>
   8b3c4:	f000003b 	adrp	x27, 92000 <uart_putHexByte::hexDigits>
   8b3c8:	913f037b 	add	x27, x27, #0xfc0
   8b3cc:	17ffffe4 	b	8b35c <CString::FormatV(char const*, std::__va_list)+0x6fc>
   8b3d0:	d1000661 	sub	x1, x19, #0x1
   8b3d4:	aa1a03e0 	mov	x0, x26
   8b3d8:	97fffb96 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b3dc:	d1000a73 	sub	x19, x19, #0x2
   8b3e0:	52800402 	mov	w2, #0x20                  	// #32
   8b3e4:	d503201f 	nop
   8b3e8:	f9400f40 	ldr	x0, [x26, #24]
   8b3ec:	d1000673 	sub	x19, x19, #0x1
   8b3f0:	b100067f 	cmn	x19, #0x1
   8b3f4:	91000401 	add	x1, x0, #0x1
   8b3f8:	f9000f41 	str	x1, [x26, #24]
   8b3fc:	39000002 	strb	w2, [x0]
   8b400:	54ffff41 	b.ne	8b3e8 <CString::FormatV(char const*, std::__va_list)+0x788>  // b.any
   8b404:	17fffecb 	b	8af30 <CString::FormatV(char const*, std::__va_list)+0x2d0>
   8b408:	f94037e0 	ldr	x0, [sp, #104]
   8b40c:	8b36c000 	add	x0, x0, w22, sxtw
   8b410:	2a0103f6 	mov	w22, w1
   8b414:	b9400004 	ldr	w4, [x0]
   8b418:	17ffff72 	b	8b1e0 <CString::FormatV(char const*, std::__va_list)+0x580>
   8b41c:	f94037e0 	ldr	x0, [sp, #104]
   8b420:	8b36c000 	add	x0, x0, w22, sxtw
   8b424:	2a0103f6 	mov	w22, w1
   8b428:	17ffff19 	b	8b08c <CString::FormatV(char const*, std::__va_list)+0x42c>
   8b42c:	cb000274 	sub	x20, x19, x0
   8b430:	aa1a03e0 	mov	x0, x26
   8b434:	aa1403e1 	mov	x1, x20
   8b438:	97fffb7e 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b43c:	d1000680 	sub	x0, x20, #0x1
   8b440:	52800403 	mov	w3, #0x20                  	// #32
   8b444:	d503201f 	nop
   8b448:	f9400f41 	ldr	x1, [x26, #24]
   8b44c:	d1000400 	sub	x0, x0, #0x1
   8b450:	b100041f 	cmn	x0, #0x1
   8b454:	91000422 	add	x2, x1, #0x1
   8b458:	f9000f42 	str	x2, [x26, #24]
   8b45c:	39000023 	strb	w3, [x1]
   8b460:	54ffff41 	b.ne	8b448 <CString::FormatV(char const*, std::__va_list)+0x7e8>  // b.any
   8b464:	17fffe58 	b	8adc4 <CString::FormatV(char const*, std::__va_list)+0x164>
   8b468:	cb00027c 	sub	x28, x19, x0
   8b46c:	aa1a03e0 	mov	x0, x26
   8b470:	aa1c03e1 	mov	x1, x28
   8b474:	97fffb6f 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b478:	d1000780 	sub	x0, x28, #0x1
   8b47c:	52800403 	mov	w3, #0x20                  	// #32
   8b480:	f9400f41 	ldr	x1, [x26, #24]
   8b484:	d1000400 	sub	x0, x0, #0x1
   8b488:	b100041f 	cmn	x0, #0x1
   8b48c:	91000422 	add	x2, x1, #0x1
   8b490:	f9000f42 	str	x2, [x26, #24]
   8b494:	39000023 	strb	w3, [x1]
   8b498:	54ffff41 	b.ne	8b480 <CString::FormatV(char const*, std::__va_list)+0x820>  // b.any
   8b49c:	17fffe7e 	b	8ae94 <CString::FormatV(char const*, std::__va_list)+0x234>
   8b4a0:	91000402 	add	x2, x0, #0x1
   8b4a4:	340012d8 	cbz	w24, 8b6fc <CString::FormatV(char const*, std::__va_list)+0xa9c>
   8b4a8:	d2800021 	mov	x1, #0x1                   	// #1
   8b4ac:	aa1a03e0 	mov	x0, x26
   8b4b0:	f9003be2 	str	x2, [sp, #112]
   8b4b4:	97fffb5f 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b4b8:	f9400f40 	ldr	x0, [x26, #24]
   8b4bc:	528005a1 	mov	w1, #0x2d                  	// #45
   8b4c0:	f9403be2 	ldr	x2, [sp, #112]
   8b4c4:	91000403 	add	x3, x0, #0x1
   8b4c8:	f9000f43 	str	x3, [x26, #24]
   8b4cc:	39000001 	strb	w1, [x0]
   8b4d0:	aa1b03e0 	mov	x0, x27
   8b4d4:	f9003be2 	str	x2, [sp, #112]
   8b4d8:	94000576 	bl	8cab0 <strlen>
   8b4dc:	f9403be2 	ldr	x2, [sp, #112]
   8b4e0:	aa0003fc 	mov	x28, x0
   8b4e4:	b40000a0 	cbz	x0, 8b4f8 <CString::FormatV(char const*, std::__va_list)+0x898>
   8b4e8:	aa0003e1 	mov	x1, x0
   8b4ec:	aa1a03e0 	mov	x0, x26
   8b4f0:	97fffb50 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b4f4:	f9403be2 	ldr	x2, [sp, #112]
   8b4f8:	aa1b03e1 	mov	x1, x27
   8b4fc:	f9003be2 	str	x2, [sp, #112]
   8b500:	f9400f40 	ldr	x0, [x26, #24]
   8b504:	940005fb 	bl	8ccf0 <strcpy>
   8b508:	f9400f40 	ldr	x0, [x26, #24]
   8b50c:	f9403be2 	ldr	x2, [sp, #112]
   8b510:	8b1c0000 	add	x0, x0, x28
   8b514:	eb13005f 	cmp	x2, x19
   8b518:	f9000f40 	str	x0, [x26, #24]
   8b51c:	54ffc722 	b.cs	8ae00 <CString::FormatV(char const*, std::__va_list)+0x1a0>  // b.hs, b.nlast
   8b520:	cb020273 	sub	x19, x19, x2
   8b524:	aa1a03e0 	mov	x0, x26
   8b528:	aa1303e1 	mov	x1, x19
   8b52c:	97fffb41 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b530:	d1000660 	sub	x0, x19, #0x1
   8b534:	52800403 	mov	w3, #0x20                  	// #32
   8b538:	f9400f41 	ldr	x1, [x26, #24]
   8b53c:	d1000400 	sub	x0, x0, #0x1
   8b540:	b100041f 	cmn	x0, #0x1
   8b544:	91000422 	add	x2, x1, #0x1
   8b548:	f9000f42 	str	x2, [x26, #24]
   8b54c:	39000023 	strb	w3, [x1]
   8b550:	54ffff41 	b.ne	8b538 <CString::FormatV(char const*, std::__va_list)+0x8d8>  // b.any
   8b554:	17fffe2b 	b	8ae00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   8b558:	110042e0 	add	w0, w23, #0x10
   8b55c:	7100001f 	cmp	w0, #0x0
   8b560:	5400120d 	b.le	8b7a0 <CString::FormatV(char const*, std::__va_list)+0xb40>
   8b564:	91003e9c 	add	x28, x20, #0xf
   8b568:	2a0003f7 	mov	w23, w0
   8b56c:	927df39c 	and	x28, x28, #0xfffffffffffffff8
   8b570:	17fffe0b 	b	8ad9c <CString::FormatV(char const*, std::__va_list)+0x13c>
   8b574:	110022c0 	add	w0, w22, #0x8
   8b578:	7100001f 	cmp	w0, #0x0
   8b57c:	5400106d 	b.le	8b788 <CString::FormatV(char const*, std::__va_list)+0xb28>
   8b580:	91003e9b 	add	x27, x20, #0xf
   8b584:	2a0003f6 	mov	w22, w0
   8b588:	927df37b 	and	x27, x27, #0xfffffffffffffff8
   8b58c:	17fffe3b 	b	8ae78 <CString::FormatV(char const*, std::__va_list)+0x218>
   8b590:	110022c0 	add	w0, w22, #0x8
   8b594:	7100001f 	cmp	w0, #0x0
   8b598:	54000ecd 	b.le	8b770 <CString::FormatV(char const*, std::__va_list)+0xb10>
   8b59c:	91002e9b 	add	x27, x20, #0xb
   8b5a0:	2a0003f6 	mov	w22, w0
   8b5a4:	927df37b 	and	x27, x27, #0xfffffffffffffff8
   8b5a8:	17fffe5e 	b	8af20 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   8b5ac:	d2800021 	mov	x1, #0x1                   	// #1
   8b5b0:	aa1a03e0 	mov	x0, x26
   8b5b4:	97fffb1f 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b5b8:	f9400f40 	ldr	x0, [x26, #24]
   8b5bc:	f100067f 	cmp	x19, #0x1
   8b5c0:	91000401 	add	x1, x0, #0x1
   8b5c4:	f9000f41 	str	x1, [x26, #24]
   8b5c8:	39000014 	strb	w20, [x0]
   8b5cc:	54ffc7e9 	b.ls	8aec8 <CString::FormatV(char const*, std::__va_list)+0x268>  // b.plast
   8b5d0:	d1000661 	sub	x1, x19, #0x1
   8b5d4:	aa1a03e0 	mov	x0, x26
   8b5d8:	97fffb16 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b5dc:	d1000a73 	sub	x19, x19, #0x2
   8b5e0:	52800402 	mov	w2, #0x20                  	// #32
   8b5e4:	d503201f 	nop
   8b5e8:	f9400f40 	ldr	x0, [x26, #24]
   8b5ec:	d1000673 	sub	x19, x19, #0x1
   8b5f0:	b100067f 	cmn	x19, #0x1
   8b5f4:	91000401 	add	x1, x0, #0x1
   8b5f8:	f9000f41 	str	x1, [x26, #24]
   8b5fc:	39000002 	strb	w2, [x0]
   8b600:	54ffff41 	b.ne	8b5e8 <CString::FormatV(char const*, std::__va_list)+0x988>  // b.any
   8b604:	aa1b03f4 	mov	x20, x27
   8b608:	17fffdfe 	b	8ae00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   8b60c:	aa1b03e0 	mov	x0, x27
   8b610:	94000528 	bl	8cab0 <strlen>
   8b614:	aa0003f8 	mov	x24, x0
   8b618:	b4000080 	cbz	x0, 8b628 <CString::FormatV(char const*, std::__va_list)+0x9c8>
   8b61c:	aa0003e1 	mov	x1, x0
   8b620:	aa1a03e0 	mov	x0, x26
   8b624:	97fffb03 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b628:	f9400f40 	ldr	x0, [x26, #24]
   8b62c:	aa1b03e1 	mov	x1, x27
   8b630:	940005b0 	bl	8ccf0 <strcpy>
   8b634:	f9400f40 	ldr	x0, [x26, #24]
   8b638:	eb13029f 	cmp	x20, x19
   8b63c:	8b180000 	add	x0, x0, x24
   8b640:	f9000f40 	str	x0, [x26, #24]
   8b644:	54ffbda2 	b.cs	8adf8 <CString::FormatV(char const*, std::__va_list)+0x198>  // b.hs, b.nlast
   8b648:	cb140274 	sub	x20, x19, x20
   8b64c:	aa1a03e0 	mov	x0, x26
   8b650:	aa1403e1 	mov	x1, x20
   8b654:	97fffaf7 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b658:	d1000680 	sub	x0, x20, #0x1
   8b65c:	52800403 	mov	w3, #0x20                  	// #32
   8b660:	f9400f41 	ldr	x1, [x26, #24]
   8b664:	d1000400 	sub	x0, x0, #0x1
   8b668:	b100041f 	cmn	x0, #0x1
   8b66c:	91000422 	add	x2, x1, #0x1
   8b670:	f9000f42 	str	x2, [x26, #24]
   8b674:	39000023 	strb	w3, [x1]
   8b678:	54ffff41 	b.ne	8b660 <CString::FormatV(char const*, std::__va_list)+0xa00>  // b.any
   8b67c:	aa1c03f4 	mov	x20, x28
   8b680:	17fffde0 	b	8ae00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   8b684:	aa1403e0 	mov	x0, x20
   8b688:	9400050a 	bl	8cab0 <strlen>
   8b68c:	aa0003f8 	mov	x24, x0
   8b690:	b4000080 	cbz	x0, 8b6a0 <CString::FormatV(char const*, std::__va_list)+0xa40>
   8b694:	aa0003e1 	mov	x1, x0
   8b698:	aa1a03e0 	mov	x0, x26
   8b69c:	97fffae5 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b6a0:	f9400f40 	ldr	x0, [x26, #24]
   8b6a4:	aa1403e1 	mov	x1, x20
   8b6a8:	94000592 	bl	8ccf0 <strcpy>
   8b6ac:	f9400f40 	ldr	x0, [x26, #24]
   8b6b0:	eb13039f 	cmp	x28, x19
   8b6b4:	8b180000 	add	x0, x0, x24
   8b6b8:	f9000f40 	str	x0, [x26, #24]
   8b6bc:	54ffc062 	b.cs	8aec8 <CString::FormatV(char const*, std::__va_list)+0x268>  // b.hs, b.nlast
   8b6c0:	cb1c027c 	sub	x28, x19, x28
   8b6c4:	aa1a03e0 	mov	x0, x26
   8b6c8:	aa1c03e1 	mov	x1, x28
   8b6cc:	97fffad9 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b6d0:	d1000780 	sub	x0, x28, #0x1
   8b6d4:	52800403 	mov	w3, #0x20                  	// #32
   8b6d8:	f9400f41 	ldr	x1, [x26, #24]
   8b6dc:	d1000400 	sub	x0, x0, #0x1
   8b6e0:	b100041f 	cmn	x0, #0x1
   8b6e4:	91000422 	add	x2, x1, #0x1
   8b6e8:	f9000f42 	str	x2, [x26, #24]
   8b6ec:	39000023 	strb	w3, [x1]
   8b6f0:	54ffff41 	b.ne	8b6d8 <CString::FormatV(char const*, std::__va_list)+0xa78>  // b.any
   8b6f4:	aa1b03f4 	mov	x20, x27
   8b6f8:	17fffdc2 	b	8ae00 <CString::FormatV(char const*, std::__va_list)+0x1a0>
   8b6fc:	3500085c 	cbnz	w28, 8b804 <CString::FormatV(char const*, std::__va_list)+0xba4>
   8b700:	eb13005f 	cmp	x2, x19
   8b704:	540005e3 	b.cc	8b7c0 <CString::FormatV(char const*, std::__va_list)+0xb60>  // b.lo, b.ul, b.last
   8b708:	d2800021 	mov	x1, #0x1                   	// #1
   8b70c:	aa1a03e0 	mov	x0, x26
   8b710:	97fffac8 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b714:	f9400f40 	ldr	x0, [x26, #24]
   8b718:	528005a1 	mov	w1, #0x2d                  	// #45
   8b71c:	91000402 	add	x2, x0, #0x1
   8b720:	f9000f42 	str	x2, [x26, #24]
   8b724:	39000001 	strb	w1, [x0]
   8b728:	17fffe42 	b	8b030 <CString::FormatV(char const*, std::__va_list)+0x3d0>
   8b72c:	110022c1 	add	w1, w22, #0x8
   8b730:	7100003f 	cmp	w1, #0x0
   8b734:	540007ed 	b.le	8b830 <CString::FormatV(char const*, std::__va_list)+0xbd0>
   8b738:	91002e82 	add	x2, x20, #0xb
   8b73c:	aa1403e0 	mov	x0, x20
   8b740:	2a0103f6 	mov	w22, w1
   8b744:	927df054 	and	x20, x2, #0xfffffffffffffff8
   8b748:	b9800002 	ldrsw	x2, [x0]
   8b74c:	17fffe0a 	b	8af74 <CString::FormatV(char const*, std::__va_list)+0x314>
   8b750:	110022c1 	add	w1, w22, #0x8
   8b754:	7100003f 	cmp	w1, #0x0
   8b758:	5400076d 	b.le	8b844 <CString::FormatV(char const*, std::__va_list)+0xbe4>
   8b75c:	91003e82 	add	x2, x20, #0xf
   8b760:	aa1403e0 	mov	x0, x20
   8b764:	2a0103f6 	mov	w22, w1
   8b768:	927df054 	and	x20, x2, #0xfffffffffffffff8
   8b76c:	17fffe01 	b	8af70 <CString::FormatV(char const*, std::__va_list)+0x310>
   8b770:	f94037e1 	ldr	x1, [sp, #104]
   8b774:	aa1403fb 	mov	x27, x20
   8b778:	8b36c021 	add	x1, x1, w22, sxtw
   8b77c:	2a0003f6 	mov	w22, w0
   8b780:	aa0103f4 	mov	x20, x1
   8b784:	17fffde7 	b	8af20 <CString::FormatV(char const*, std::__va_list)+0x2c0>
   8b788:	f94037e1 	ldr	x1, [sp, #104]
   8b78c:	aa1403fb 	mov	x27, x20
   8b790:	8b36c021 	add	x1, x1, w22, sxtw
   8b794:	2a0003f6 	mov	w22, w0
   8b798:	aa0103f4 	mov	x20, x1
   8b79c:	17fffdb7 	b	8ae78 <CString::FormatV(char const*, std::__va_list)+0x218>
   8b7a0:	f9400aa2 	ldr	x2, [x21, #16]
   8b7a4:	aa1403fc 	mov	x28, x20
   8b7a8:	8b37c042 	add	x2, x2, w23, sxtw
   8b7ac:	2a0003f7 	mov	w23, w0
   8b7b0:	aa0203f4 	mov	x20, x2
   8b7b4:	17fffd7a 	b	8ad9c <CString::FormatV(char const*, std::__va_list)+0x13c>
   8b7b8:	eb13001f 	cmp	x0, x19
   8b7bc:	54ffc3a2 	b.cs	8b030 <CString::FormatV(char const*, std::__va_list)+0x3d0>  // b.hs, b.nlast
   8b7c0:	cb020273 	sub	x19, x19, x2
   8b7c4:	aa1a03e0 	mov	x0, x26
   8b7c8:	b90073e3 	str	w3, [sp, #112]
   8b7cc:	aa1303e1 	mov	x1, x19
   8b7d0:	97fffa98 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b7d4:	b94073e3 	ldr	w3, [sp, #112]
   8b7d8:	d1000660 	sub	x0, x19, #0x1
   8b7dc:	52800404 	mov	w4, #0x20                  	// #32
   8b7e0:	d1000400 	sub	x0, x0, #0x1
   8b7e4:	f9400f41 	ldr	x1, [x26, #24]
   8b7e8:	b100041f 	cmn	x0, #0x1
   8b7ec:	91000422 	add	x2, x1, #0x1
   8b7f0:	f9000f42 	str	x2, [x26, #24]
   8b7f4:	39000024 	strb	w4, [x1]
   8b7f8:	54ffff41 	b.ne	8b7e0 <CString::FormatV(char const*, std::__va_list)+0xb80>  // b.any
   8b7fc:	34ffc1a3 	cbz	w3, 8b030 <CString::FormatV(char const*, std::__va_list)+0x3d0>
   8b800:	17ffffc2 	b	8b708 <CString::FormatV(char const*, std::__va_list)+0xaa8>
   8b804:	d2800021 	mov	x1, #0x1                   	// #1
   8b808:	aa1a03e0 	mov	x0, x26
   8b80c:	f9003be2 	str	x2, [sp, #112]
   8b810:	97fffa88 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b814:	f9400f40 	ldr	x0, [x26, #24]
   8b818:	528005a1 	mov	w1, #0x2d                  	// #45
   8b81c:	f9403be2 	ldr	x2, [sp, #112]
   8b820:	91000403 	add	x3, x0, #0x1
   8b824:	f9000f43 	str	x3, [x26, #24]
   8b828:	39000001 	strb	w1, [x0]
   8b82c:	17fffdff 	b	8b028 <CString::FormatV(char const*, std::__va_list)+0x3c8>
   8b830:	f94037e0 	ldr	x0, [sp, #104]
   8b834:	8b36c000 	add	x0, x0, w22, sxtw
   8b838:	2a0103f6 	mov	w22, w1
   8b83c:	b9800002 	ldrsw	x2, [x0]
   8b840:	17fffdcd 	b	8af74 <CString::FormatV(char const*, std::__va_list)+0x314>
   8b844:	f94037e0 	ldr	x0, [sp, #104]
   8b848:	8b36c000 	add	x0, x0, w22, sxtw
   8b84c:	2a0103f6 	mov	w22, w1
   8b850:	17fffdc8 	b	8af70 <CString::FormatV(char const*, std::__va_list)+0x310>
   8b854:	aa0203e1 	mov	x1, x2
   8b858:	17fffdd5 	b	8afac <CString::FormatV(char const*, std::__va_list)+0x34c>
   8b85c:	cb020273 	sub	x19, x19, x2
   8b860:	aa1a03e0 	mov	x0, x26
   8b864:	aa1303e1 	mov	x1, x19
   8b868:	97fffa72 	bl	8a230 <CString::ReserveSpace(unsigned long) [clone .part.0]>
   8b86c:	d1000660 	sub	x0, x19, #0x1
   8b870:	52800603 	mov	w3, #0x30                  	// #48
   8b874:	f9400f41 	ldr	x1, [x26, #24]
   8b878:	d1000400 	sub	x0, x0, #0x1
   8b87c:	b100041f 	cmn	x0, #0x1
   8b880:	91000422 	add	x2, x1, #0x1
   8b884:	f9000f42 	str	x2, [x26, #24]
   8b888:	39000023 	strb	w3, [x1]
   8b88c:	54ffff41 	b.ne	8b874 <CString::FormatV(char const*, std::__va_list)+0xc14>  // b.any
   8b890:	17fffde8 	b	8b030 <CString::FormatV(char const*, std::__va_list)+0x3d0>
   8b894:	d503201f 	nop
   8b898:	d503201f 	nop
   8b89c:	d503201f 	nop

000000000008b8a0 <CString::Format(char const*, ...)>:
   8b8a0:	a9b07bfd 	stp	x29, x30, [sp, #-256]!
   8b8a4:	910403eb 	add	x11, sp, #0x100
   8b8a8:	910403e8 	add	x8, sp, #0x100
   8b8ac:	910003fd 	mov	x29, sp
   8b8b0:	910343ea 	add	x10, sp, #0xd0
   8b8b4:	128005e9 	mov	w9, #0xffffffd0            	// #-48
   8b8b8:	a9032fe8 	stp	x8, x11, [sp, #48]
   8b8bc:	12800fe8 	mov	w8, #0xffffff80            	// #-128
   8b8c0:	f90023ea 	str	x10, [sp, #64]
   8b8c4:	b9004be9 	str	w9, [sp, #72]
   8b8c8:	b9004fe8 	str	w8, [sp, #76]
   8b8cc:	ad41c7f0 	ldp	q16, q17, [sp, #48]
   8b8d0:	a90d0fe2 	stp	x2, x3, [sp, #208]
   8b8d4:	910043e2 	add	x2, sp, #0x10
   8b8d8:	3d8017e0 	str	q0, [sp, #80]
   8b8dc:	3d801be1 	str	q1, [sp, #96]
   8b8e0:	ad00c7f0 	stp	q16, q17, [sp, #16]
   8b8e4:	3d801fe2 	str	q2, [sp, #112]
   8b8e8:	3d8023e3 	str	q3, [sp, #128]
   8b8ec:	3d8027e4 	str	q4, [sp, #144]
   8b8f0:	3d802be5 	str	q5, [sp, #160]
   8b8f4:	3d802fe6 	str	q6, [sp, #176]
   8b8f8:	3d8033e7 	str	q7, [sp, #192]
   8b8fc:	a90e17e4 	stp	x4, x5, [sp, #224]
   8b900:	a90f1fe6 	stp	x6, x7, [sp, #240]
   8b904:	97fffcd7 	bl	8ac60 <CString::FormatV(char const*, std::__va_list)>
   8b908:	a8d07bfd 	ldp	x29, x30, [sp], #256
   8b90c:	d65f03c0 	ret

000000000008b910 <__aeabi_atexit>:
   8b910:	d65f03c0 	ret
   8b914:	d503201f 	nop
   8b918:	d503201f 	nop
   8b91c:	d503201f 	nop

000000000008b920 <__cxa_atexit>:
   8b920:	d65f03c0 	ret
   8b924:	d503201f 	nop
   8b928:	d503201f 	nop
   8b92c:	d503201f 	nop

000000000008b930 <set_qemu_exit_status>:
   8b930:	d65f03c0 	ret
   8b934:	d503201f 	nop
   8b938:	d503201f 	nop
   8b93c:	d503201f 	nop

000000000008b940 <halt>:
   8b940:	d50342df 	msr	daifset, #0x2
   8b944:	d50341df 	msr	daifset, #0x1
   8b948:	d5033f9f 	dsb	sy
   8b94c:	d503207f 	wfi
   8b950:	17fffffe 	b	8b948 <halt+0x8>
   8b954:	d503201f 	nop
   8b958:	d503201f 	nop
   8b95c:	d503201f 	nop

000000000008b960 <reboot>:
   8b960:	d2800480 	mov	x0, #0x24                  	// #36
   8b964:	f2bfc200 	movk	x0, #0xfe10, lsl #16
   8b968:	52800021 	mov	w1, #0x1                   	// #1
   8b96c:	72ab4001 	movk	w1, #0x5a00, lsl #16
   8b970:	11007c22 	add	w2, w1, #0x1f
   8b974:	b9000001 	str	w1, [x0]
   8b978:	b81f8002 	stur	w2, [x0, #-8]
   8b97c:	14000000 	b	8b97c <reboot+0x1c>

000000000008b980 <sysinit>:
   8b980:	d11003ff 	sub	sp, sp, #0x400
   8b984:	a9007bfd 	stp	x29, x30, [sp]
   8b988:	910003fd 	mov	x29, sp
   8b98c:	a90153f3 	stp	x19, x20, [sp, #16]
   8b990:	f90013f5 	str	x21, [sp, #32]
   8b994:	d50341ff 	msr	daifclr, #0x1
   8b998:	d50342ff 	msr	daifclr, #0x2
   8b99c:	f0000133 	adrp	x19, b2000 <appendBuf+0xa0>
   8b9a0:	9115d273 	add	x19, x19, #0x574
   8b9a4:	90000120 	adrp	x0, af000 <_binary_src_fith_rc_5_start+0xdb35>
   8b9a8:	91094000 	add	x0, x0, #0x250
   8b9ac:	cb000262 	sub	x2, x19, x0
   8b9b0:	52800001 	mov	w1, #0x0                   	// #0
   8b9b4:	940005b5 	bl	8d088 <memset>
   8b9b8:	f14a027f 	cmp	x19, #0x280, lsl #12
   8b9bc:	54000528 	b.hi	8ba60 <sysinit+0xe0>  // b.pmore
   8b9c0:	910143e0 	add	x0, sp, #0x50
   8b9c4:	90000055 	adrp	x21, 93000 <vtable for CString+0x38>
   8b9c8:	9130c2b5 	add	x21, x21, #0xc30
   8b9cc:	97fff2d1 	bl	88510 <CMachineInfo::CMachineInfo()>
   8b9d0:	52800021 	mov	w1, #0x1                   	// #1
   8b9d4:	910343e0 	add	x0, sp, #0xd0
   8b9d8:	9400089e 	bl	8dc50 <CMemorySystem::CMemorySystem(bool)>
   8b9dc:	910143e0 	add	x0, sp, #0x50
   8b9e0:	97fff544 	bl	88ef0 <CMachineInfo::FetchDTB()>
   8b9e4:	9100c3e0 	add	x0, sp, #0x30
   8b9e8:	97fffa36 	bl	8a2c0 <CString::CString()>
   8b9ec:	f0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8b9f0:	52800043 	mov	w3, #0x2                   	// #2
   8b9f4:	913fa021 	add	x1, x1, #0xfe8
   8b9f8:	528005a2 	mov	w2, #0x2d                  	// #45
   8b9fc:	9100c3e0 	add	x0, sp, #0x30
   8ba00:	97ffffa8 	bl	8b8a0 <CString::Format(char const*, ...)>
   8ba04:	9100c3e0 	add	x0, sp, #0x30
   8ba08:	97fffa72 	bl	8a3d0 <CString::operator char const*() const>
   8ba0c:	f0000122 	adrp	x2, b2000 <appendBuf+0xa0>
   8ba10:	aa0003e1 	mov	x1, x0
   8ba14:	910fa040 	add	x0, x2, #0x3e8
   8ba18:	940004b6 	bl	8ccf0 <strcpy>
   8ba1c:	90000040 	adrp	x0, 93000 <vtable for CString+0x38>
   8ba20:	91312000 	add	x0, x0, #0xc48
   8ba24:	eb0002bf 	cmp	x21, x0
   8ba28:	54000162 	b.cs	8ba54 <sysinit+0xd4>  // b.hs, b.nlast
   8ba2c:	d1000414 	sub	x20, x0, #0x1
   8ba30:	d2800013 	mov	x19, #0x0                   	// #0
   8ba34:	cb150294 	sub	x20, x20, x21
   8ba38:	d343fe94 	lsr	x20, x20, #3
   8ba3c:	d503201f 	nop
   8ba40:	f8737aa0 	ldr	x0, [x21, x19, lsl #3]
   8ba44:	d63f0000 	blr	x0
   8ba48:	eb14027f 	cmp	x19, x20
   8ba4c:	91000673 	add	x19, x19, #0x1
   8ba50:	54ffff81 	b.ne	8ba40 <sysinit+0xc0>  // b.any
   8ba54:	97ffdb1b 	bl	826c0 <main>
   8ba58:	7100041f 	cmp	w0, #0x1
   8ba5c:	54000040 	b.eq	8ba64 <sysinit+0xe4>  // b.none
   8ba60:	97ffffb8 	bl	8b940 <halt>
   8ba64:	940005e3 	bl	8d1f0 <IsChainBootEnabled>
   8ba68:	37000040 	tbnz	w0, #0, 8ba70 <sysinit+0xf0>
   8ba6c:	97ffffbd 	bl	8b960 <reboot>
   8ba70:	910343e0 	add	x0, sp, #0xd0
   8ba74:	9400080b 	bl	8daa0 <CMemorySystem::Destructor()>
   8ba78:	d50341df 	msr	daifset, #0x1
   8ba7c:	940005e5 	bl	8d210 <DoChainBoot>
   8ba80:	97ffffb8 	bl	8b960 <reboot>
	...

000000000008ba90 <CTimer::CTimer(CInterruptSystem*)>:
   8ba90:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ba94:	910003fd 	mov	x29, sp
   8ba98:	d2800022 	mov	x2, #0x1                   	// #1
   8ba9c:	f9000bf3 	str	x19, [sp, #16]
   8baa0:	aa0003f3 	mov	x19, x0
   8baa4:	91008000 	add	x0, x0, #0x20
   8baa8:	b9000e7f 	str	wzr, [x19, #12]
   8baac:	b900127f 	str	wzr, [x19, #16]
   8bab0:	f9000261 	str	x1, [x19]
   8bab4:	b900167f 	str	wzr, [x19, #20]
   8bab8:	f9000e62 	str	x2, [x19, #24]
   8babc:	940011c9 	bl	901e0 <CPtrList::CPtrList()>
   8bac0:	d2800023 	mov	x3, #0x1                   	// #1
   8bac4:	52801902 	mov	w2, #0xc8                  	// #200
   8bac8:	f9001e7f 	str	xzr, [x19, #56]
   8bacc:	f2c1a803 	movk	x3, #0xd40, lsl #32
   8bad0:	f2e00063 	movk	x3, #0x3, lsl #48
   8bad4:	b900627f 	str	wzr, [x19, #96]
   8bad8:	f0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8badc:	b9003262 	str	w2, [x19, #48]
   8bae0:	f9420001 	ldr	x1, [x0, #1024]
   8bae4:	f9001663 	str	x3, [x19, #40]
   8bae8:	b50000a1 	cbnz	x1, 8bafc <CTimer::CTimer(CInterruptSystem*)+0x6c>
   8baec:	f9020013 	str	x19, [x0, #1024]
   8baf0:	f9400bf3 	ldr	x19, [sp, #16]
   8baf4:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8baf8:	d65f03c0 	ret
   8bafc:	f0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8bb00:	f0000020 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8bb04:	913fc021 	add	x1, x1, #0xff0
   8bb08:	91062000 	add	x0, x0, #0x188
   8bb0c:	52800802 	mov	w2, #0x40                  	// #64
   8bb10:	94000f24 	bl	8f7a0 <assertion_failed>
   8bb14:	d503201f 	nop
   8bb18:	d503201f 	nop
   8bb1c:	d503201f 	nop

000000000008bb20 <CTimer::~CTimer()>:
   8bb20:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8bb24:	910003fd 	mov	x29, sp
   8bb28:	a90153f3 	stp	x19, x20, [sp, #16]
   8bb2c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8bb30:	aa0003f5 	mov	x21, x0
   8bb34:	f9400000 	ldr	x0, [x0]
   8bb38:	b4000620 	cbz	x0, 8bbfc <CTimer::~CTimer()+0xdc>
   8bb3c:	d2800001 	mov	x1, #0x0                   	// #0
   8bb40:	d51be221 	msr	cntp_ctl_el0, x1
   8bb44:	528003c1 	mov	w1, #0x1e                  	// #30
   8bb48:	910082b5 	add	x21, x21, #0x20
   8bb4c:	94000b91 	bl	8e990 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   8bb50:	aa1503e0 	mov	x0, x21
   8bb54:	5289a876 	mov	w22, #0x4d43                	// #19779
   8bb58:	72a96a96 	movk	w22, #0x4b54, lsl #16
   8bb5c:	940011b1 	bl	90220 <CPtrList::GetFirst()>
   8bb60:	aa0003f3 	mov	x19, x0
   8bb64:	b4000260 	cbz	x0, 8bbb0 <CTimer::~CTimer()+0x90>
   8bb68:	aa1303e1 	mov	x1, x19
   8bb6c:	aa1503e0 	mov	x0, x21
   8bb70:	940011c8 	bl	90290 <CPtrList::GetPtr(TPtrListElement*)>
   8bb74:	aa0003f4 	mov	x20, x0
   8bb78:	b40002a0 	cbz	x0, 8bbcc <CTimer::~CTimer()+0xac>
   8bb7c:	b9400000 	ldr	w0, [x0]
   8bb80:	6b16001f 	cmp	w0, w22
   8bb84:	54000301 	b.ne	8bbe4 <CTimer::~CTimer()+0xc4>  // b.any
   8bb88:	aa1303e1 	mov	x1, x19
   8bb8c:	aa1503e0 	mov	x0, x21
   8bb90:	94001258 	bl	904f0 <CPtrList::Remove(TPtrListElement*)>
   8bb94:	aa1403e0 	mov	x0, x20
   8bb98:	d2800501 	mov	x1, #0x28                  	// #40
   8bb9c:	94000645 	bl	8d4b0 <operator delete(void*, unsigned long)>
   8bba0:	aa1503e0 	mov	x0, x21
   8bba4:	9400119f 	bl	90220 <CPtrList::GetFirst()>
   8bba8:	aa0003f3 	mov	x19, x0
   8bbac:	b5fffde0 	cbnz	x0, 8bb68 <CTimer::~CTimer()+0x48>
   8bbb0:	f0000121 	adrp	x1, b2000 <appendBuf+0xa0>
   8bbb4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bbb8:	aa1503e0 	mov	x0, x21
   8bbbc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8bbc0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8bbc4:	f902003f 	str	xzr, [x1, #1024]
   8bbc8:	1400118a 	b	901f0 <CPtrList::~CPtrList()>
   8bbcc:	f0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8bbd0:	90000040 	adrp	x0, 93000 <vtable for CString+0x38>
   8bbd4:	913fc021 	add	x1, x1, #0xff0
   8bbd8:	91006000 	add	x0, x0, #0x18
   8bbdc:	52800ae2 	mov	w2, #0x57                  	// #87
   8bbe0:	94000ef0 	bl	8f7a0 <assertion_failed>
   8bbe4:	f0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8bbe8:	90000040 	adrp	x0, 93000 <vtable for CString+0x38>
   8bbec:	913fc021 	add	x1, x1, #0xff0
   8bbf0:	9100a000 	add	x0, x0, #0x28
   8bbf4:	52800b02 	mov	w2, #0x58                  	// #88
   8bbf8:	94000eea 	bl	8f7a0 <assertion_failed>
   8bbfc:	f0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8bc00:	90000040 	adrp	x0, 93000 <vtable for CString+0x38>
   8bc04:	913fc021 	add	x1, x1, #0xff0
   8bc08:	91000000 	add	x0, x0, #0x0
   8bc0c:	528008c2 	mov	w2, #0x46                  	// #70
   8bc10:	94000ee4 	bl	8f7a0 <assertion_failed>
   8bc14:	d503201f 	nop
   8bc18:	d503201f 	nop
   8bc1c:	d503201f 	nop

000000000008bc20 <CTimer::Initialize()>:
   8bc20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bc24:	910003fd 	mov	x29, sp
   8bc28:	f9000bf3 	str	x19, [sp, #16]
   8bc2c:	aa0003f3 	mov	x19, x0
   8bc30:	f9400000 	ldr	x0, [x0]
   8bc34:	b4000460 	cbz	x0, 8bcc0 <CTimer::Initialize()+0xa0>
   8bc38:	aa1303e3 	mov	x3, x19
   8bc3c:	528003c1 	mov	w1, #0x1e                  	// #30
   8bc40:	b0000002 	adrp	x2, 8c000 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xf0>
   8bc44:	911b8042 	add	x2, x2, #0x6e0
   8bc48:	94000b32 	bl	8e910 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   8bc4c:	d53be001 	mrs	x1, cntfrq_el0
   8bc50:	d28b8520 	mov	x0, #0x5c29                	// #23593
   8bc54:	f2b851e0 	movk	x0, #0xc28f, lsl #16
   8bc58:	f2c51ea0 	movk	x0, #0x28f5, lsl #32
   8bc5c:	f2f1eb80 	movk	x0, #0x8f5c, lsl #48
   8bc60:	d291eb82 	mov	x2, #0x8f5c                	// #36700
   8bc64:	f2beb842 	movk	x2, #0xf5c2, lsl #16
   8bc68:	9b007c20 	mul	x0, x1, x0
   8bc6c:	f2cb8502 	movk	x2, #0x5c28, lsl #32
   8bc70:	f2e051e2 	movk	x2, #0x28f, lsl #48
   8bc74:	93c00800 	ror	x0, x0, #2
   8bc78:	eb02001f 	cmp	x0, x2
   8bc7c:	540002e8 	b.hi	8bcd8 <CTimer::Initialize()+0xb8>  // b.pmore
   8bc80:	d29eb860 	mov	x0, #0xf5c3                	// #62915
   8bc84:	f2ab8500 	movk	x0, #0x5c28, lsl #16
   8bc88:	d342fc21 	lsr	x1, x1, #2
   8bc8c:	f2d851e0 	movk	x0, #0xc28f, lsl #32
   8bc90:	f2e51ea0 	movk	x0, #0x28f5, lsl #48
   8bc94:	9bc07c21 	umulh	x1, x1, x0
   8bc98:	d342fc21 	lsr	x1, x1, #2
   8bc9c:	b9000a61 	str	w1, [x19, #8]
   8bca0:	d53be020 	mrs	x0, cntpct_el0
   8bca4:	8b214001 	add	x1, x0, w1, uxtw
   8bca8:	d51be241 	msr	cntp_cval_el0, x1
   8bcac:	d2800020 	mov	x0, #0x1                   	// #1
   8bcb0:	d51be220 	msr	cntp_ctl_el0, x0
   8bcb4:	f9400bf3 	ldr	x19, [sp, #16]
   8bcb8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bcbc:	d65f03c0 	ret
   8bcc0:	f0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8bcc4:	90000040 	adrp	x0, 93000 <vtable for CString+0x38>
   8bcc8:	913fc021 	add	x1, x1, #0xff0
   8bccc:	91000000 	add	x0, x0, #0x0
   8bcd0:	52800c82 	mov	w2, #0x64                  	// #100
   8bcd4:	94000eb3 	bl	8f7a0 <assertion_failed>
   8bcd8:	f0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8bcdc:	90000040 	adrp	x0, 93000 <vtable for CString+0x38>
   8bce0:	913fc021 	add	x1, x1, #0xff0
   8bce4:	91014000 	add	x0, x0, #0x50
   8bce8:	52800f82 	mov	w2, #0x7c                  	// #124
   8bcec:	94000ead 	bl	8f7a0 <assertion_failed>

000000000008bcf0 <CTimer::SetTimeZone(int)>:
   8bcf0:	11167c22 	add	w2, w1, #0x59f
   8bcf4:	712cf85f 	cmp	w2, #0xb3e
   8bcf8:	54000089 	b.ls	8bd08 <CTimer::SetTimeZone(int)+0x18>  // b.plast
   8bcfc:	52800002 	mov	w2, #0x0                   	// #0
   8bd00:	2a0203e0 	mov	w0, w2
   8bd04:	d65f03c0 	ret
   8bd08:	52800022 	mov	w2, #0x1                   	// #1
   8bd0c:	b9001c01 	str	w1, [x0, #28]
   8bd10:	2a0203e0 	mov	w0, w2
   8bd14:	d65f03c0 	ret
   8bd18:	d503201f 	nop
   8bd1c:	d503201f 	nop

000000000008bd20 <CTimer::GetTimeZone() const>:
   8bd20:	b9401c00 	ldr	w0, [x0, #28]
   8bd24:	d65f03c0 	ret
   8bd28:	d503201f 	nop
   8bd2c:	d503201f 	nop

000000000008bd30 <CTimer::SetTime(unsigned int, bool)>:
   8bd30:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8bd34:	910003fd 	mov	x29, sp
   8bd38:	a90153f3 	stp	x19, x20, [sp, #16]
   8bd3c:	aa0003f3 	mov	x19, x0
   8bd40:	2a0103f4 	mov	w20, w1
   8bd44:	b9401c00 	ldr	w0, [x0, #28]
   8bd48:	531c6c03 	lsl	w3, w0, #4
   8bd4c:	4b000063 	sub	w3, w3, w0
   8bd50:	531e7463 	lsl	w3, w3, #2
   8bd54:	37000062 	tbnz	w2, #0, 8bd60 <CTimer::SetTime(unsigned int, bool)+0x30>
   8bd58:	37f802e3 	tbnz	w3, #31, 8bdb4 <CTimer::SetTime(unsigned int, bool)+0x84>
   8bd5c:	0b030294 	add	w20, w20, w3
   8bd60:	f9401e62 	ldr	x2, [x19, #56]
   8bd64:	b4000102 	cbz	x2, 8bd84 <CTimer::SetTime(unsigned int, bool)+0x54>
   8bd68:	b9401661 	ldr	w1, [x19, #20]
   8bd6c:	4b030280 	sub	w0, w20, w3
   8bd70:	6b01007f 	cmp	w3, w1
   8bd74:	4b030021 	sub	w1, w1, w3
   8bd78:	1a9fd021 	csel	w1, w1, wzr, le
   8bd7c:	d63f0040 	blr	x2
   8bd80:	36000200 	tbz	w0, #0, 8bdc0 <CTimer::SetTime(unsigned int, bool)+0x90>
   8bd84:	b9401a60 	ldr	w0, [x19, #24]
   8bd88:	35000080 	cbnz	w0, 8bd98 <CTimer::SetTime(unsigned int, bool)+0x68>
   8bd8c:	b9001674 	str	w20, [x19, #20]
   8bd90:	52800020 	mov	w0, #0x1                   	// #1
   8bd94:	1400000c 	b	8bdc4 <CTimer::SetTime(unsigned int, bool)+0x94>
   8bd98:	94000822 	bl	8de20 <EnterCritical>
   8bd9c:	b9401a60 	ldr	w0, [x19, #24]
   8bda0:	b9001674 	str	w20, [x19, #20]
   8bda4:	34ffff60 	cbz	w0, 8bd90 <CTimer::SetTime(unsigned int, bool)+0x60>
   8bda8:	9400084e 	bl	8dee0 <LeaveCritical>
   8bdac:	52800020 	mov	w0, #0x1                   	// #1
   8bdb0:	14000005 	b	8bdc4 <CTimer::SetTime(unsigned int, bool)+0x94>
   8bdb4:	4b0303e0 	neg	w0, w3
   8bdb8:	6b01001f 	cmp	w0, w1
   8bdbc:	54fffd0d 	b.le	8bd5c <CTimer::SetTime(unsigned int, bool)+0x2c>
   8bdc0:	52800000 	mov	w0, #0x0                   	// #0
   8bdc4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bdc8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8bdcc:	d65f03c0 	ret

000000000008bdd0 <CTimer::GetClockTicks()>:
   8bdd0:	d5033fdf 	isb
   8bdd4:	d53be020 	mrs	x0, cntpct_el0
   8bdd8:	d53be001 	mrs	x1, cntfrq_el0
   8bddc:	d2884802 	mov	x2, #0x4240                	// #16960
   8bde0:	f2a001e2 	movk	x2, #0xf, lsl #16
   8bde4:	9b027c00 	mul	x0, x0, x2
   8bde8:	9ac10800 	udiv	x0, x0, x1
   8bdec:	d65f03c0 	ret

000000000008bdf0 <CTimer::GetTicks() const>:
   8bdf0:	b9400c00 	ldr	w0, [x0, #12]
   8bdf4:	d65f03c0 	ret
   8bdf8:	d503201f 	nop
   8bdfc:	d503201f 	nop

000000000008be00 <CTimer::GetUptime() const>:
   8be00:	b9401000 	ldr	w0, [x0, #16]
   8be04:	d65f03c0 	ret
   8be08:	d503201f 	nop
   8be0c:	d503201f 	nop

000000000008be10 <CTimer::GetTime() const>:
   8be10:	b9401400 	ldr	w0, [x0, #20]
   8be14:	d65f03c0 	ret
   8be18:	d503201f 	nop
   8be1c:	d503201f 	nop

000000000008be20 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
   8be20:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8be24:	910003fd 	mov	x29, sp
   8be28:	a90153f3 	stp	x19, x20, [sp, #16]
   8be2c:	aa0003f3 	mov	x19, x0
   8be30:	aa0103f4 	mov	x20, x1
   8be34:	b9401800 	ldr	w0, [x0, #24]
   8be38:	a9025bf5 	stp	x21, x22, [sp, #32]
   8be3c:	aa0203f5 	mov	x21, x2
   8be40:	f9001bf7 	str	x23, [sp, #48]
   8be44:	350002a0 	cbnz	w0, 8be98 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x78>
   8be48:	b9401677 	ldr	w23, [x19, #20]
   8be4c:	b9400e76 	ldr	w22, [x19, #12]
   8be50:	b4000334 	cbz	x20, 8beb4 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x94>
   8be54:	b9000297 	str	w23, [x20]
   8be58:	b40003b5 	cbz	x21, 8becc <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xac>
   8be5c:	5290a3e0 	mov	w0, #0x851f                	// #34079
   8be60:	72aa3d60 	movk	w0, #0x51eb, lsl #16
   8be64:	a94153f3 	ldp	x19, x20, [sp, #16]
   8be68:	52800c82 	mov	w2, #0x64                  	// #100
   8be6c:	5284e201 	mov	w1, #0x2710                	// #10000
   8be70:	9ba07ec0 	umull	x0, w22, w0
   8be74:	f9401bf7 	ldr	x23, [sp, #48]
   8be78:	d365fc00 	lsr	x0, x0, #37
   8be7c:	1b02d800 	msub	w0, w0, w2, w22
   8be80:	1b017c00 	mul	w0, w0, w1
   8be84:	b90002a0 	str	w0, [x21]
   8be88:	52800020 	mov	w0, #0x1                   	// #1
   8be8c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8be90:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8be94:	d65f03c0 	ret
   8be98:	940007e2 	bl	8de20 <EnterCritical>
   8be9c:	b9401677 	ldr	w23, [x19, #20]
   8bea0:	b9400e76 	ldr	w22, [x19, #12]
   8bea4:	b9401a60 	ldr	w0, [x19, #24]
   8bea8:	34fffd40 	cbz	w0, 8be50 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x30>
   8beac:	9400080d 	bl	8dee0 <LeaveCritical>
   8beb0:	b5fffd34 	cbnz	x20, 8be54 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x34>
   8beb4:	f0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8beb8:	90000040 	adrp	x0, 93000 <vtable for CString+0x38>
   8bebc:	913fc021 	add	x1, x1, #0xff0
   8bec0:	9101a000 	add	x0, x0, #0x68
   8bec4:	52802142 	mov	w2, #0x10a                 	// #266
   8bec8:	94000e36 	bl	8f7a0 <assertion_failed>
   8becc:	f0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8bed0:	90000040 	adrp	x0, 93000 <vtable for CString+0x38>
   8bed4:	913fc021 	add	x1, x1, #0xff0
   8bed8:	9101e000 	add	x0, x0, #0x78
   8bedc:	528021a2 	mov	w2, #0x10d                 	// #269
   8bee0:	94000e30 	bl	8f7a0 <assertion_failed>
   8bee4:	d503201f 	nop
   8bee8:	d503201f 	nop
   8beec:	d503201f 	nop

000000000008bef0 <CTimer::GetUniversalTime() const>:
   8bef0:	b9401c02 	ldr	w2, [x0, #28]
   8bef4:	b9401400 	ldr	w0, [x0, #20]
   8bef8:	531c6c41 	lsl	w1, w2, #4
   8befc:	4b020021 	sub	w1, w1, w2
   8bf00:	531e7421 	lsl	w1, w1, #2
   8bf04:	6b010000 	subs	w0, w0, w1
   8bf08:	1a9fa000 	csel	w0, w0, wzr, ge	// ge = tcont
   8bf0c:	d65f03c0 	ret

000000000008bf10 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
   8bf10:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8bf14:	910003fd 	mov	x29, sp
   8bf18:	a90153f3 	stp	x19, x20, [sp, #16]
   8bf1c:	aa0003f3 	mov	x19, x0
   8bf20:	aa0103f4 	mov	x20, x1
   8bf24:	b9401800 	ldr	w0, [x0, #24]
   8bf28:	a9025bf5 	stp	x21, x22, [sp, #32]
   8bf2c:	aa0203f5 	mov	x21, x2
   8bf30:	f9001bf7 	str	x23, [sp, #48]
   8bf34:	35000440 	cbnz	w0, 8bfbc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xac>
   8bf38:	b9401676 	ldr	w22, [x19, #20]
   8bf3c:	b9400e77 	ldr	w23, [x19, #12]
   8bf40:	b9401e61 	ldr	w1, [x19, #28]
   8bf44:	531c6c20 	lsl	w0, w1, #4
   8bf48:	4b010000 	sub	w0, w0, w1
   8bf4c:	531e7400 	lsl	w0, w0, #2
   8bf50:	6b0002df 	cmp	w22, w0
   8bf54:	5400028b 	b.lt	8bfa4 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x94>  // b.tstop
   8bf58:	b4000414 	cbz	x20, 8bfd8 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc8>
   8bf5c:	4b0002d6 	sub	w22, w22, w0
   8bf60:	b9000296 	str	w22, [x20]
   8bf64:	b4000475 	cbz	x21, 8bff0 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xe0>
   8bf68:	5290a3e1 	mov	w1, #0x851f                	// #34079
   8bf6c:	72aa3d61 	movk	w1, #0x51eb, lsl #16
   8bf70:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bf74:	52800c83 	mov	w3, #0x64                  	// #100
   8bf78:	5284e202 	mov	w2, #0x2710                	// #10000
   8bf7c:	9ba17ee1 	umull	x1, w23, w1
   8bf80:	52800020 	mov	w0, #0x1                   	// #1
   8bf84:	d365fc21 	lsr	x1, x1, #37
   8bf88:	1b03dc21 	msub	w1, w1, w3, w23
   8bf8c:	f9401bf7 	ldr	x23, [sp, #48]
   8bf90:	1b027c21 	mul	w1, w1, w2
   8bf94:	b90002a1 	str	w1, [x21]
   8bf98:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8bf9c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8bfa0:	d65f03c0 	ret
   8bfa4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8bfa8:	52800000 	mov	w0, #0x0                   	// #0
   8bfac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8bfb0:	f9401bf7 	ldr	x23, [sp, #48]
   8bfb4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8bfb8:	d65f03c0 	ret
   8bfbc:	94000799 	bl	8de20 <EnterCritical>
   8bfc0:	b9401676 	ldr	w22, [x19, #20]
   8bfc4:	b9400e77 	ldr	w23, [x19, #12]
   8bfc8:	b9401a60 	ldr	w0, [x19, #24]
   8bfcc:	34fffba0 	cbz	w0, 8bf40 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
   8bfd0:	940007c4 	bl	8dee0 <LeaveCritical>
   8bfd4:	17ffffdb 	b	8bf40 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
   8bfd8:	f0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8bfdc:	90000040 	adrp	x0, 93000 <vtable for CString+0x38>
   8bfe0:	913fc021 	add	x1, x1, #0xff0
   8bfe4:	9101a000 	add	x0, x0, #0x68
   8bfe8:	528025e2 	mov	w2, #0x12f                 	// #303
   8bfec:	94000ded 	bl	8f7a0 <assertion_failed>
   8bff0:	f0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8bff4:	90000040 	adrp	x0, 93000 <vtable for CString+0x38>
   8bff8:	913fc021 	add	x1, x1, #0xff0
   8bffc:	9101e000 	add	x0, x0, #0x78
   8c000:	52802642 	mov	w2, #0x132                 	// #306
   8c004:	94000de7 	bl	8f7a0 <assertion_failed>
   8c008:	d503201f 	nop
   8c00c:	d503201f 	nop

000000000008c010 <CTimer::GetTimeString()>:
   8c010:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8c014:	910003fd 	mov	x29, sp
   8c018:	a90153f3 	stp	x19, x20, [sp, #16]
   8c01c:	aa0003f3 	mov	x19, x0
   8c020:	b9401800 	ldr	w0, [x0, #24]
   8c024:	a9046bf9 	stp	x25, x26, [sp, #64]
   8c028:	35000e20 	cbnz	w0, 8c1ec <CTimer::GetTimeString()+0x1dc>
   8c02c:	b9401674 	ldr	w20, [x19, #20]
   8c030:	b9400e7a 	ldr	w26, [x19, #12]
   8c034:	2a1a0280 	orr	w0, w20, w26
   8c038:	34000ea0 	cbz	w0, 8c20c <CTimer::GetTimeString()+0x1fc>
   8c03c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c040:	52911136 	mov	w22, #0x8889                	// #34953
   8c044:	72b11116 	movk	w22, #0x8888, lsl #16
   8c048:	52955573 	mov	w19, #0xaaab                	// #43691
   8c04c:	72b55553 	movk	w19, #0xaaaa, lsl #16
   8c050:	9bb67e99 	umull	x25, w20, w22
   8c054:	528b8523 	mov	w3, #0x5c29                	// #23593
   8c058:	72b851e3 	movk	w3, #0xc28f, lsl #16
   8c05c:	a90363f7 	stp	x23, x24, [sp, #48]
   8c060:	528b8502 	mov	w2, #0x5c28                	// #23592
   8c064:	72a051e2 	movk	w2, #0x28f, lsl #16
   8c068:	529ae144 	mov	w4, #0xd70a                	// #55050
   8c06c:	72a01464 	movk	w4, #0xa3, lsl #16
   8c070:	d365ff21 	lsr	x1, x25, #37
   8c074:	5280f655 	mov	w21, #0x7b2                 	// #1970
   8c078:	531c6c20 	lsl	w0, w1, #4
   8c07c:	9bb67c36 	umull	x22, w1, w22
   8c080:	4b010000 	sub	w0, w0, w1
   8c084:	4b000a99 	sub	w25, w20, w0, lsl #2
   8c088:	d365fed8 	lsr	x24, x22, #37
   8c08c:	531c6f00 	lsl	w0, w24, #4
   8c090:	9bb37f13 	umull	x19, w24, w19
   8c094:	4b180000 	sub	w0, w0, w24
   8c098:	4b000836 	sub	w22, w1, w0, lsl #2
   8c09c:	d364fe73 	lsr	x19, x19, #36
   8c0a0:	14000008 	b	8c0c0 <CTimer::GetTimeString()+0xb0>
   8c0a4:	f24006bf 	tst	x21, #0x3
   8c0a8:	1a9f17e0 	cset	w0, eq	// eq = none
   8c0ac:	1105b401 	add	w1, w0, #0x16d
   8c0b0:	6b01027f 	cmp	w19, w1
   8c0b4:	540001a3 	b.cc	8c0e8 <CTimer::GetTimeString()+0xd8>  // b.lo, b.ul, b.last
   8c0b8:	4b010273 	sub	w19, w19, w1
   8c0bc:	110006b5 	add	w21, w21, #0x1
   8c0c0:	1b037ea0 	mul	w0, w21, w3
   8c0c4:	13800801 	ror	w1, w0, #2
   8c0c8:	6b02003f 	cmp	w1, w2
   8c0cc:	54fffec8 	b.hi	8c0a4 <CTimer::GetTimeString()+0x94>  // b.pmore
   8c0d0:	13801000 	ror	w0, w0, #4
   8c0d4:	6b04001f 	cmp	w0, w4
   8c0d8:	1a9f87e0 	cset	w0, ls	// ls = plast
   8c0dc:	1105b401 	add	w1, w0, #0x16d
   8c0e0:	6b01027f 	cmp	w19, w1
   8c0e4:	54fffea2 	b.cs	8c0b8 <CTimer::GetTimeString()+0xa8>  // b.hs, b.nlast
   8c0e8:	f0000022 	adrp	x2, 93000 <vtable for CString+0x38>
   8c0ec:	91080042 	add	x2, x2, #0x200
   8c0f0:	52800014 	mov	w20, #0x0                   	// #0
   8c0f4:	14000003 	b	8c100 <CTimer::GetTimeString()+0xf0>
   8c0f8:	4b010273 	sub	w19, w19, w1
   8c0fc:	11000694 	add	w20, w20, #0x1
   8c100:	7100001f 	cmp	w0, #0x0
   8c104:	7a411a80 	ccmp	w20, #0x1, #0x0, ne	// ne = any
   8c108:	540003e0 	b.eq	8c184 <CTimer::GetTimeString()+0x174>  // b.none
   8c10c:	b8745841 	ldr	w1, [x2, w20, uxtw #2]
   8c110:	6b01027f 	cmp	w19, w1
   8c114:	54ffff22 	b.cs	8c0f8 <CTimer::GetTimeString()+0xe8>  // b.hs, b.nlast
   8c118:	5290a3f7 	mov	w23, #0x851f                	// #34079
   8c11c:	72aa3d77 	movk	w23, #0x51eb, lsl #16
   8c120:	52800c81 	mov	w1, #0x64                  	// #100
   8c124:	d2800400 	mov	x0, #0x20                  	// #32
   8c128:	9bb77f57 	umull	x23, w26, w23
   8c12c:	d365fef7 	lsr	x23, x23, #37
   8c130:	1b01eaf7 	msub	w23, w23, w1, w26
   8c134:	9400049f 	bl	8d3b0 <operator new(unsigned long)>
   8c138:	aa0003fa 	mov	x26, x0
   8c13c:	97fff861 	bl	8a2c0 <CString::CString()>
   8c140:	711edebf 	cmp	w21, #0x7b7
   8c144:	54000248 	b.hi	8c18c <CTimer::GetTimeString()+0x17c>  // b.pmore
   8c148:	f0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8c14c:	2a1703e5 	mov	w5, w23
   8c150:	2a1903e4 	mov	w4, w25
   8c154:	2a1603e3 	mov	w3, w22
   8c158:	2a1803e2 	mov	w2, w24
   8c15c:	aa1a03e0 	mov	x0, x26
   8c160:	9102c021 	add	x1, x1, #0xb0
   8c164:	97fffdcf 	bl	8b8a0 <CString::Format(char const*, ...)>
   8c168:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c16c:	aa1a03e0 	mov	x0, x26
   8c170:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c174:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c178:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8c17c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8c180:	d65f03c0 	ret
   8c184:	528003a1 	mov	w1, #0x1d                  	// #29
   8c188:	17ffffe2 	b	8c110 <CTimer::GetTimeString()+0x100>
   8c18c:	52955564 	mov	w4, #0xaaab                	// #43691
   8c190:	72b55544 	movk	w4, #0xaaaa, lsl #16
   8c194:	f0000100 	adrp	x0, af000 <_binary_src_fith_rc_5_start+0xdb35>
   8c198:	91064000 	add	x0, x0, #0x190
   8c19c:	9ba47f04 	umull	x4, w24, w4
   8c1a0:	f0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8c1a4:	f8745802 	ldr	x2, [x0, w20, uxtw #3]
   8c1a8:	2a1703e7 	mov	w7, w23
   8c1ac:	2a1903e6 	mov	w6, w25
   8c1b0:	2a1603e5 	mov	w5, w22
   8c1b4:	11000663 	add	w3, w19, #0x1
   8c1b8:	d364fc84 	lsr	x4, x4, #36
   8c1bc:	aa1a03e0 	mov	x0, x26
   8c1c0:	0b040484 	add	w4, w4, w4, lsl #1
   8c1c4:	91024021 	add	x1, x1, #0x90
   8c1c8:	4b040f04 	sub	w4, w24, w4, lsl #3
   8c1cc:	97fffdb5 	bl	8b8a0 <CString::Format(char const*, ...)>
   8c1d0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c1d4:	aa1a03e0 	mov	x0, x26
   8c1d8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c1dc:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c1e0:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8c1e4:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8c1e8:	d65f03c0 	ret
   8c1ec:	9400070d 	bl	8de20 <EnterCritical>
   8c1f0:	b9401674 	ldr	w20, [x19, #20]
   8c1f4:	b9400e7a 	ldr	w26, [x19, #12]
   8c1f8:	b9401a60 	ldr	w0, [x19, #24]
   8c1fc:	34fff1c0 	cbz	w0, 8c034 <CTimer::GetTimeString()+0x24>
   8c200:	94000738 	bl	8dee0 <LeaveCritical>
   8c204:	2a1a0280 	orr	w0, w20, w26
   8c208:	35fff1a0 	cbnz	w0, 8c03c <CTimer::GetTimeString()+0x2c>
   8c20c:	d280001a 	mov	x26, #0x0                   	// #0
   8c210:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c214:	aa1a03e0 	mov	x0, x26
   8c218:	a9446bf9 	ldp	x25, x26, [sp, #64]
   8c21c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8c220:	d65f03c0 	ret
   8c224:	d503201f 	nop
   8c228:	d503201f 	nop
   8c22c:	d503201f 	nop

000000000008c230 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)>:
   8c230:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8c234:	910003fd 	mov	x29, sp
   8c238:	a90363f7 	stp	x23, x24, [sp, #48]
   8c23c:	aa0003f7 	mov	x23, x0
   8c240:	d2800500 	mov	x0, #0x28                  	// #40
   8c244:	aa0303f8 	mov	x24, x3
   8c248:	a90153f3 	stp	x19, x20, [sp, #16]
   8c24c:	2a0103f4 	mov	w20, w1
   8c250:	aa0203f3 	mov	x19, x2
   8c254:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c258:	f90023f9 	str	x25, [sp, #64]
   8c25c:	aa0403f9 	mov	x25, x4
   8c260:	94000454 	bl	8d3b0 <operator new(unsigned long)>
   8c264:	b9400ef6 	ldr	w22, [x23, #12]
   8c268:	0b1402d6 	add	w22, w22, w20
   8c26c:	b40007d3 	cbz	x19, 8c364 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x134>
   8c270:	aa0003f5 	mov	x21, x0
   8c274:	5289a861 	mov	w1, #0x4d43                	// #19779
   8c278:	72a96a81 	movk	w1, #0x4b54, lsl #16
   8c27c:	b9402ae0 	ldr	w0, [x23, #40]
   8c280:	f90006b3 	str	x19, [x21, #8]
   8c284:	b90002a1 	str	w1, [x21]
   8c288:	b90012b6 	str	w22, [x21, #16]
   8c28c:	a901e6b8 	stp	x24, x25, [x21, #24]
   8c290:	35000500 	cbnz	w0, 8c330 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x100>
   8c294:	910082f4 	add	x20, x23, #0x20
   8c298:	aa1403e0 	mov	x0, x20
   8c29c:	94000fe1 	bl	90220 <CPtrList::GetFirst()>
   8c2a0:	aa0003f3 	mov	x19, x0
   8c2a4:	b4000700 	cbz	x0, 8c384 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x154>
   8c2a8:	aa1303e1 	mov	x1, x19
   8c2ac:	aa1403e0 	mov	x0, x20
   8c2b0:	5289a878 	mov	w24, #0x4d43                	// #19779
   8c2b4:	72a96a98 	movk	w24, #0x4b54, lsl #16
   8c2b8:	94000ff6 	bl	90290 <CPtrList::GetPtr(TPtrListElement*)>
   8c2bc:	b4000220 	cbz	x0, 8c300 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xd0>
   8c2c0:	b9400001 	ldr	w1, [x0]
   8c2c4:	6b18003f 	cmp	w1, w24
   8c2c8:	54000281 	b.ne	8c318 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0xe8>  // b.any
   8c2cc:	b9401000 	ldr	w0, [x0, #16]
   8c2d0:	aa1303e1 	mov	x1, x19
   8c2d4:	4b160000 	sub	w0, w0, w22
   8c2d8:	7100001f 	cmp	w0, #0x0
   8c2dc:	aa1403e0 	mov	x0, x20
   8c2e0:	540002cc 	b.gt	8c338 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x108>
   8c2e4:	94000fd3 	bl	90230 <CPtrList::GetNext(TPtrListElement*)>
   8c2e8:	b40004e0 	cbz	x0, 8c384 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x154>
   8c2ec:	aa0003f3 	mov	x19, x0
   8c2f0:	aa1403e0 	mov	x0, x20
   8c2f4:	aa1303e1 	mov	x1, x19
   8c2f8:	94000fe6 	bl	90290 <CPtrList::GetPtr(TPtrListElement*)>
   8c2fc:	b5fffe20 	cbnz	x0, 8c2c0 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x90>
   8c300:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c304:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c308:	913fc021 	add	x1, x1, #0xff0
   8c30c:	91032000 	add	x0, x0, #0xc8
   8c310:	52803322 	mov	w2, #0x199                 	// #409
   8c314:	94000d23 	bl	8f7a0 <assertion_failed>
   8c318:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c31c:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c320:	913fc021 	add	x1, x1, #0xff0
   8c324:	91036000 	add	x0, x0, #0xd8
   8c328:	52803342 	mov	w2, #0x19a                 	// #410
   8c32c:	94000d1d 	bl	8f7a0 <assertion_failed>
   8c330:	940006bc 	bl	8de20 <EnterCritical>
   8c334:	17ffffd8 	b	8c294 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x64>
   8c338:	aa1503e2 	mov	x2, x21
   8c33c:	94000fed 	bl	902f0 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   8c340:	b9402ae0 	ldr	w0, [x23, #40]
   8c344:	350001c0 	cbnz	w0, 8c37c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x14c>
   8c348:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c34c:	aa1503e0 	mov	x0, x21
   8c350:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c354:	a94363f7 	ldp	x23, x24, [sp, #48]
   8c358:	f94023f9 	ldr	x25, [sp, #64]
   8c35c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8c360:	d65f03c0 	ret
   8c364:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c368:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c36c:	913fc021 	add	x1, x1, #0xff0
   8c370:	9115e000 	add	x0, x0, #0x578
   8c374:	52803122 	mov	w2, #0x189                 	// #393
   8c378:	94000d0a 	bl	8f7a0 <assertion_failed>
   8c37c:	940006d9 	bl	8dee0 <LeaveCritical>
   8c380:	17fffff2 	b	8c348 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x118>
   8c384:	aa1303e1 	mov	x1, x19
   8c388:	aa1403e0 	mov	x0, x20
   8c38c:	aa1503e2 	mov	x2, x21
   8c390:	94001018 	bl	903f0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   8c394:	17ffffeb 	b	8c340 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned long, void*, void*), void*, void*)+0x110>
   8c398:	d503201f 	nop
   8c39c:	d503201f 	nop

000000000008c3a0 <CTimer::CancelKernelTimer(unsigned long)>:
   8c3a0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8c3a4:	910003fd 	mov	x29, sp
   8c3a8:	a90153f3 	stp	x19, x20, [sp, #16]
   8c3ac:	f90013f5 	str	x21, [sp, #32]
   8c3b0:	b4000421 	cbz	x1, 8c434 <CTimer::CancelKernelTimer(unsigned long)+0x94>
   8c3b4:	aa0003f4 	mov	x20, x0
   8c3b8:	b9402800 	ldr	w0, [x0, #40]
   8c3bc:	aa0103f3 	mov	x19, x1
   8c3c0:	350002e0 	cbnz	w0, 8c41c <CTimer::CancelKernelTimer(unsigned long)+0x7c>
   8c3c4:	91008295 	add	x21, x20, #0x20
   8c3c8:	aa1303e1 	mov	x1, x19
   8c3cc:	aa1503e0 	mov	x0, x21
   8c3d0:	94001094 	bl	90620 <CPtrList::Find(void*)>
   8c3d4:	aa0003e1 	mov	x1, x0
   8c3d8:	b4000160 	cbz	x0, 8c404 <CTimer::CancelKernelTimer(unsigned long)+0x64>
   8c3dc:	b9400262 	ldr	w2, [x19]
   8c3e0:	5289a860 	mov	w0, #0x4d43                	// #19779
   8c3e4:	72a96a80 	movk	w0, #0x4b54, lsl #16
   8c3e8:	6b00005f 	cmp	w2, w0
   8c3ec:	54000301 	b.ne	8c44c <CTimer::CancelKernelTimer(unsigned long)+0xac>  // b.any
   8c3f0:	aa1503e0 	mov	x0, x21
   8c3f4:	9400103f 	bl	904f0 <CPtrList::Remove(TPtrListElement*)>
   8c3f8:	aa1303e0 	mov	x0, x19
   8c3fc:	d2800501 	mov	x1, #0x28                  	// #40
   8c400:	9400042c 	bl	8d4b0 <operator delete(void*, unsigned long)>
   8c404:	b9402a80 	ldr	w0, [x20, #40]
   8c408:	350000e0 	cbnz	w0, 8c424 <CTimer::CancelKernelTimer(unsigned long)+0x84>
   8c40c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c410:	f94013f5 	ldr	x21, [sp, #32]
   8c414:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c418:	d65f03c0 	ret
   8c41c:	94000681 	bl	8de20 <EnterCritical>
   8c420:	17ffffe9 	b	8c3c4 <CTimer::CancelKernelTimer(unsigned long)+0x24>
   8c424:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c428:	f94013f5 	ldr	x21, [sp, #32]
   8c42c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c430:	140006ac 	b	8dee0 <LeaveCritical>
   8c434:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c438:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c43c:	913fc021 	add	x1, x1, #0xff0
   8c440:	91006000 	add	x0, x0, #0x18
   8c444:	528036c2 	mov	w2, #0x1b6                 	// #438
   8c448:	94000cd6 	bl	8f7a0 <assertion_failed>
   8c44c:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c450:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c454:	913fc021 	add	x1, x1, #0xff0
   8c458:	9100a000 	add	x0, x0, #0x28
   8c45c:	528037a2 	mov	w2, #0x1bd                 	// #445
   8c460:	94000cd0 	bl	8f7a0 <assertion_failed>
   8c464:	d503201f 	nop
   8c468:	d503201f 	nop
   8c46c:	d503201f 	nop

000000000008c470 <CTimer::PollKernelTimers()>:
   8c470:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8c474:	910003fd 	mov	x29, sp
   8c478:	a90153f3 	stp	x19, x20, [sp, #16]
   8c47c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c480:	aa0003f5 	mov	x21, x0
   8c484:	b9402800 	ldr	w0, [x0, #40]
   8c488:	350007c0 	cbnz	w0, 8c580 <CTimer::PollKernelTimers()+0x110>
   8c48c:	910082b6 	add	x22, x21, #0x20
   8c490:	aa1603e0 	mov	x0, x22
   8c494:	94000f63 	bl	90220 <CPtrList::GetFirst()>
   8c498:	aa0003f4 	mov	x20, x0
   8c49c:	b40004e0 	cbz	x0, 8c538 <CTimer::PollKernelTimers()+0xc8>
   8c4a0:	f9001bf7 	str	x23, [sp, #48]
   8c4a4:	5289a877 	mov	w23, #0x4d43                	// #19779
   8c4a8:	72a96a97 	movk	w23, #0x4b54, lsl #16
   8c4ac:	aa1403e1 	mov	x1, x20
   8c4b0:	aa1603e0 	mov	x0, x22
   8c4b4:	94000f77 	bl	90290 <CPtrList::GetPtr(TPtrListElement*)>
   8c4b8:	aa0003f3 	mov	x19, x0
   8c4bc:	b4000660 	cbz	x0, 8c588 <CTimer::PollKernelTimers()+0x118>
   8c4c0:	b9400000 	ldr	w0, [x0]
   8c4c4:	6b17001f 	cmp	w0, w23
   8c4c8:	540006c1 	b.ne	8c5a0 <CTimer::PollKernelTimers()+0x130>  // b.any
   8c4cc:	b9401260 	ldr	w0, [x19, #16]
   8c4d0:	b9400ea1 	ldr	w1, [x21, #12]
   8c4d4:	4b010000 	sub	w0, w0, w1
   8c4d8:	7100001f 	cmp	w0, #0x0
   8c4dc:	540002cc 	b.gt	8c534 <CTimer::PollKernelTimers()+0xc4>
   8c4e0:	aa1403e1 	mov	x1, x20
   8c4e4:	aa1603e0 	mov	x0, x22
   8c4e8:	94000f52 	bl	90230 <CPtrList::GetNext(TPtrListElement*)>
   8c4ec:	aa0003e2 	mov	x2, x0
   8c4f0:	aa1403e1 	mov	x1, x20
   8c4f4:	aa1603e0 	mov	x0, x22
   8c4f8:	aa0203f4 	mov	x20, x2
   8c4fc:	94000ffd 	bl	904f0 <CPtrList::Remove(TPtrListElement*)>
   8c500:	b9402aa0 	ldr	w0, [x21, #40]
   8c504:	350002c0 	cbnz	w0, 8c55c <CTimer::PollKernelTimers()+0xec>
   8c508:	f9400663 	ldr	x3, [x19, #8]
   8c50c:	b40002e3 	cbz	x3, 8c568 <CTimer::PollKernelTimers()+0xf8>
   8c510:	a9418a61 	ldp	x1, x2, [x19, #24]
   8c514:	aa1303e0 	mov	x0, x19
   8c518:	d63f0060 	blr	x3
   8c51c:	aa1303e0 	mov	x0, x19
   8c520:	d2800501 	mov	x1, #0x28                  	// #40
   8c524:	940003e3 	bl	8d4b0 <operator delete(void*, unsigned long)>
   8c528:	b9402aa0 	ldr	w0, [x21, #40]
   8c52c:	35000120 	cbnz	w0, 8c550 <CTimer::PollKernelTimers()+0xe0>
   8c530:	b5fffbf4 	cbnz	x20, 8c4ac <CTimer::PollKernelTimers()+0x3c>
   8c534:	f9401bf7 	ldr	x23, [sp, #48]
   8c538:	b9402aa0 	ldr	w0, [x21, #40]
   8c53c:	350003e0 	cbnz	w0, 8c5b8 <CTimer::PollKernelTimers()+0x148>
   8c540:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c544:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c548:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c54c:	d65f03c0 	ret
   8c550:	94000634 	bl	8de20 <EnterCritical>
   8c554:	b5fffad4 	cbnz	x20, 8c4ac <CTimer::PollKernelTimers()+0x3c>
   8c558:	17fffff7 	b	8c534 <CTimer::PollKernelTimers()+0xc4>
   8c55c:	94000661 	bl	8dee0 <LeaveCritical>
   8c560:	f9400663 	ldr	x3, [x19, #8]
   8c564:	b5fffd63 	cbnz	x3, 8c510 <CTimer::PollKernelTimers()+0xa0>
   8c568:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c56c:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c570:	913fc021 	add	x1, x1, #0xff0
   8c574:	9115e000 	add	x0, x0, #0x578
   8c578:	52803c22 	mov	w2, #0x1e1                 	// #481
   8c57c:	94000c89 	bl	8f7a0 <assertion_failed>
   8c580:	94000628 	bl	8de20 <EnterCritical>
   8c584:	17ffffc2 	b	8c48c <CTimer::PollKernelTimers()+0x1c>
   8c588:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c58c:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c590:	913fc021 	add	x1, x1, #0xff0
   8c594:	91006000 	add	x0, x0, #0x18
   8c598:	52803a42 	mov	w2, #0x1d2                 	// #466
   8c59c:	94000c81 	bl	8f7a0 <assertion_failed>
   8c5a0:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c5a4:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c5a8:	913fc021 	add	x1, x1, #0xff0
   8c5ac:	9100a000 	add	x0, x0, #0x28
   8c5b0:	52803a62 	mov	w2, #0x1d3                 	// #467
   8c5b4:	94000c7b 	bl	8f7a0 <assertion_failed>
   8c5b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c5bc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c5c0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8c5c4:	14000647 	b	8dee0 <LeaveCritical>
   8c5c8:	d503201f 	nop
   8c5cc:	d503201f 	nop

000000000008c5d0 <CTimer::InterruptHandler()>:
   8c5d0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8c5d4:	910003fd 	mov	x29, sp
   8c5d8:	a90153f3 	stp	x19, x20, [sp, #16]
   8c5dc:	aa0003f4 	mov	x20, x0
   8c5e0:	f90013f5 	str	x21, [sp, #32]
   8c5e4:	d53be241 	mrs	x1, cntp_cval_el0
   8c5e8:	b9400800 	ldr	w0, [x0, #8]
   8c5ec:	8b010000 	add	x0, x0, x1
   8c5f0:	d51be240 	msr	cntp_cval_el0, x0
   8c5f4:	b9401a80 	ldr	w0, [x20, #24]
   8c5f8:	35000460 	cbnz	w0, 8c684 <CTimer::InterruptHandler()+0xb4>
   8c5fc:	b9400e81 	ldr	w1, [x20, #12]
   8c600:	528b8520 	mov	w0, #0x5c29                	// #23593
   8c604:	72b851e0 	movk	w0, #0xc28f, lsl #16
   8c608:	528b8502 	mov	w2, #0x5c28                	// #23592
   8c60c:	72a051e2 	movk	w2, #0x28f, lsl #16
   8c610:	11000421 	add	w1, w1, #0x1
   8c614:	1b007c20 	mul	w0, w1, w0
   8c618:	b9000e81 	str	w1, [x20, #12]
   8c61c:	13800800 	ror	w0, w0, #2
   8c620:	6b02001f 	cmp	w0, w2
   8c624:	54000229 	b.ls	8c668 <CTimer::InterruptHandler()+0x98>  // b.plast
   8c628:	aa1403e0 	mov	x0, x20
   8c62c:	91010295 	add	x21, x20, #0x40
   8c630:	97ffff90 	bl	8c470 <CTimer::PollKernelTimers()>
   8c634:	b9406280 	ldr	w0, [x20, #96]
   8c638:	d2800013 	mov	x19, #0x0                   	// #0
   8c63c:	340000e0 	cbz	w0, 8c658 <CTimer::InterruptHandler()+0x88>
   8c640:	f8737aa0 	ldr	x0, [x21, x19, lsl #3]
   8c644:	91000673 	add	x19, x19, #0x1
   8c648:	d63f0000 	blr	x0
   8c64c:	b9406280 	ldr	w0, [x20, #96]
   8c650:	6b13001f 	cmp	w0, w19
   8c654:	54ffff68 	b.hi	8c640 <CTimer::InterruptHandler()+0x70>  // b.pmore
   8c658:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c65c:	f94013f5 	ldr	x21, [sp, #32]
   8c660:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c664:	d65f03c0 	ret
   8c668:	b9401280 	ldr	w0, [x20, #16]
   8c66c:	11000400 	add	w0, w0, #0x1
   8c670:	b9001280 	str	w0, [x20, #16]
   8c674:	b9401680 	ldr	w0, [x20, #20]
   8c678:	11000400 	add	w0, w0, #0x1
   8c67c:	b9001680 	str	w0, [x20, #20]
   8c680:	17ffffea 	b	8c628 <CTimer::InterruptHandler()+0x58>
   8c684:	940005e7 	bl	8de20 <EnterCritical>
   8c688:	b9400e81 	ldr	w1, [x20, #12]
   8c68c:	528b8520 	mov	w0, #0x5c29                	// #23593
   8c690:	72b851e0 	movk	w0, #0xc28f, lsl #16
   8c694:	528b8503 	mov	w3, #0x5c28                	// #23592
   8c698:	72a051e3 	movk	w3, #0x28f, lsl #16
   8c69c:	b9401a82 	ldr	w2, [x20, #24]
   8c6a0:	11000421 	add	w1, w1, #0x1
   8c6a4:	1b007c20 	mul	w0, w1, w0
   8c6a8:	b9000e81 	str	w1, [x20, #12]
   8c6ac:	13800800 	ror	w0, w0, #2
   8c6b0:	6b03001f 	cmp	w0, w3
   8c6b4:	54000089 	b.ls	8c6c4 <CTimer::InterruptHandler()+0xf4>  // b.plast
   8c6b8:	34fffb82 	cbz	w2, 8c628 <CTimer::InterruptHandler()+0x58>
   8c6bc:	94000609 	bl	8dee0 <LeaveCritical>
   8c6c0:	17ffffda 	b	8c628 <CTimer::InterruptHandler()+0x58>
   8c6c4:	b9401280 	ldr	w0, [x20, #16]
   8c6c8:	11000400 	add	w0, w0, #0x1
   8c6cc:	b9001280 	str	w0, [x20, #16]
   8c6d0:	b9401680 	ldr	w0, [x20, #20]
   8c6d4:	11000400 	add	w0, w0, #0x1
   8c6d8:	b9001680 	str	w0, [x20, #20]
   8c6dc:	17fffff7 	b	8c6b8 <CTimer::InterruptHandler()+0xe8>

000000000008c6e0 <CTimer::InterruptHandler(void*)>:
   8c6e0:	b4000040 	cbz	x0, 8c6e8 <CTimer::InterruptHandler(void*)+0x8>
   8c6e4:	17ffffbb 	b	8c5d0 <CTimer::InterruptHandler()>
   8c6e8:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c6ec:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c6f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8c6f4:	913fc021 	add	x1, x1, #0xff0
   8c6f8:	910003fd 	mov	x29, sp
   8c6fc:	91040000 	add	x0, x0, #0x100
   8c700:	52804502 	mov	w2, #0x228                 	// #552
   8c704:	94000c27 	bl	8f7a0 <assertion_failed>
   8c708:	d503201f 	nop
   8c70c:	d503201f 	nop

000000000008c710 <CTimer::TuneMsDelay()>:
   8c710:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8c714:	910003fd 	mov	x29, sp
   8c718:	52807d01 	mov	w1, #0x3e8                 	// #1000
   8c71c:	a90153f3 	stp	x19, x20, [sp, #16]
   8c720:	aa0003f3 	mov	x19, x0
   8c724:	5290a3f4 	mov	w20, #0x851f                	// #34079
   8c728:	72aa3d74 	movk	w20, #0x51eb, lsl #16
   8c72c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8c730:	5284e215 	mov	w21, #0x2710                	// #10000
   8c734:	b9400c16 	ldr	w22, [x0, #12]
   8c738:	b9402c00 	ldr	w0, [x0, #44]
   8c73c:	1b017c00 	mul	w0, w0, w1
   8c740:	94000d30 	bl	8fc00 <DelayLoop>
   8c744:	b9400e61 	ldr	w1, [x19, #12]
   8c748:	5289ba62 	mov	w2, #0x4dd3                	// #19923
   8c74c:	72a20c42 	movk	w2, #0x1062, lsl #16
   8c750:	b9402e60 	ldr	w0, [x19, #44]
   8c754:	4b160021 	sub	w1, w1, w22
   8c758:	1ac10ab5 	udiv	w21, w21, w1
   8c75c:	1b007ea0 	mul	w0, w21, w0
   8c760:	9bb47c00 	umull	x0, w0, w20
   8c764:	d365fc00 	lsr	x0, x0, #37
   8c768:	1107d001 	add	w1, w0, #0x1f4
   8c76c:	b9002e60 	str	w0, [x19, #44]
   8c770:	9ba27c20 	umull	x0, w1, w2
   8c774:	d366fc00 	lsr	x0, x0, #38
   8c778:	b9003260 	str	w0, [x19, #48]
   8c77c:	97ffed4d 	bl	87cb0 <CLogger::Get()>
   8c780:	9bb47ea4 	umull	x4, w21, w20
   8c784:	52800c85 	mov	w5, #0x64                  	// #100
   8c788:	f0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8c78c:	91080021 	add	x1, x1, #0x200
   8c790:	f0000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8c794:	a94153f3 	ldp	x19, x20, [sp, #16]
   8c798:	9100c021 	add	x1, x1, #0x30
   8c79c:	91044063 	add	x3, x3, #0x110
   8c7a0:	d365fc84 	lsr	x4, x4, #37
   8c7a4:	52800062 	mov	w2, #0x3                   	// #3
   8c7a8:	1b05d485 	msub	w5, w4, w5, w21
   8c7ac:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8c7b0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8c7b4:	17ffef23 	b	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8c7b8:	d503201f 	nop
   8c7bc:	d503201f 	nop

000000000008c7c0 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
   8c7c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8c7c4:	910003fd 	mov	x29, sp
   8c7c8:	f9401c02 	ldr	x2, [x0, #56]
   8c7cc:	b50000a2 	cbnz	x2, 8c7e0 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x20>
   8c7d0:	f9001c01 	str	x1, [x0, #56]
   8c7d4:	b4000121 	cbz	x1, 8c7f8 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x38>
   8c7d8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8c7dc:	d65f03c0 	ret
   8c7e0:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c7e4:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c7e8:	913fc021 	add	x1, x1, #0xff0
   8c7ec:	9104a000 	add	x0, x0, #0x128
   8c7f0:	528047c2 	mov	w2, #0x23e                 	// #574
   8c7f4:	94000beb 	bl	8f7a0 <assertion_failed>
   8c7f8:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c7fc:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c800:	913fc021 	add	x1, x1, #0xff0
   8c804:	91052000 	add	x0, x0, #0x148
   8c808:	52804802 	mov	w2, #0x240                 	// #576
   8c80c:	94000be5 	bl	8f7a0 <assertion_failed>

000000000008c810 <CTimer::RegisterPeriodicHandler(void (*)())>:
   8c810:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8c814:	910003fd 	mov	x29, sp
   8c818:	b40001c1 	cbz	x1, 8c850 <CTimer::RegisterPeriodicHandler(void (*)())+0x40>
   8c81c:	b9406002 	ldr	w2, [x0, #96]
   8c820:	71000c5f 	cmp	w2, #0x3
   8c824:	54000228 	b.hi	8c868 <CTimer::RegisterPeriodicHandler(void (*)())+0x58>  // b.pmore
   8c828:	b9406002 	ldr	w2, [x0, #96]
   8c82c:	2a0203e2 	mov	w2, w2
   8c830:	91002042 	add	x2, x2, #0x8
   8c834:	f8227801 	str	x1, [x0, x2, lsl #3]
   8c838:	d5033f9f 	dsb	sy
   8c83c:	b9406001 	ldr	w1, [x0, #96]
   8c840:	11000421 	add	w1, w1, #0x1
   8c844:	b9006001 	str	w1, [x0, #96]
   8c848:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8c84c:	d65f03c0 	ret
   8c850:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c854:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c858:	913fc021 	add	x1, x1, #0xff0
   8c85c:	9115e000 	add	x0, x0, #0x578
   8c860:	528048a2 	mov	w2, #0x245                 	// #581
   8c864:	94000bcf 	bl	8f7a0 <assertion_failed>
   8c868:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8c86c:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c870:	913fc021 	add	x1, x1, #0xff0
   8c874:	9105a000 	add	x0, x0, #0x168
   8c878:	528048e2 	mov	w2, #0x247                 	// #583
   8c87c:	94000bc9 	bl	8f7a0 <assertion_failed>

000000000008c880 <CTimer::SimpleMsDelay(unsigned int)>:
   8c880:	34000280 	cbz	w0, 8c8d0 <CTimer::SimpleMsDelay(unsigned int)+0x50>
   8c884:	52807d01 	mov	w1, #0x3e8                 	// #1000
   8c888:	1b017c00 	mul	w0, w0, w1
   8c88c:	34000220 	cbz	w0, 8c8d0 <CTimer::SimpleMsDelay(unsigned int)+0x50>
   8c890:	11000401 	add	w1, w0, #0x1
   8c894:	d5033fdf 	isb
   8c898:	d53be023 	mrs	x3, cntpct_el0
   8c89c:	d53be000 	mrs	x0, cntfrq_el0
   8c8a0:	d2884804 	mov	x4, #0x4240                	// #16960
   8c8a4:	f2a001e4 	movk	x4, #0xf, lsl #16
   8c8a8:	9b047c63 	mul	x3, x3, x4
   8c8ac:	9ac00863 	udiv	x3, x3, x0
   8c8b0:	d5033fdf 	isb
   8c8b4:	d53be020 	mrs	x0, cntpct_el0
   8c8b8:	d53be002 	mrs	x2, cntfrq_el0
   8c8bc:	9b047c00 	mul	x0, x0, x4
   8c8c0:	9ac20800 	udiv	x0, x0, x2
   8c8c4:	4b030000 	sub	w0, w0, w3
   8c8c8:	6b00003f 	cmp	w1, w0
   8c8cc:	54ffff28 	b.hi	8c8b0 <CTimer::SimpleMsDelay(unsigned int)+0x30>  // b.pmore
   8c8d0:	d65f03c0 	ret
   8c8d4:	d503201f 	nop
   8c8d8:	d503201f 	nop
   8c8dc:	d503201f 	nop

000000000008c8e0 <CTimer::SimpleusDelay(unsigned int)>:
   8c8e0:	34000240 	cbz	w0, 8c928 <CTimer::SimpleusDelay(unsigned int)+0x48>
   8c8e4:	11000401 	add	w1, w0, #0x1
   8c8e8:	d5033fdf 	isb
   8c8ec:	d53be023 	mrs	x3, cntpct_el0
   8c8f0:	d53be000 	mrs	x0, cntfrq_el0
   8c8f4:	d2884804 	mov	x4, #0x4240                	// #16960
   8c8f8:	f2a001e4 	movk	x4, #0xf, lsl #16
   8c8fc:	9b047c63 	mul	x3, x3, x4
   8c900:	9ac00863 	udiv	x3, x3, x0
   8c904:	d503201f 	nop
   8c908:	d5033fdf 	isb
   8c90c:	d53be020 	mrs	x0, cntpct_el0
   8c910:	d53be002 	mrs	x2, cntfrq_el0
   8c914:	9b047c00 	mul	x0, x0, x4
   8c918:	9ac20800 	udiv	x0, x0, x2
   8c91c:	4b030000 	sub	w0, w0, w3
   8c920:	6b00003f 	cmp	w1, w0
   8c924:	54ffff28 	b.hi	8c908 <CTimer::SimpleusDelay(unsigned int)+0x28>  // b.pmore
   8c928:	d65f03c0 	ret
   8c92c:	d503201f 	nop

000000000008c930 <CTimer::IsLeapYear(unsigned int)>:
   8c930:	528b8521 	mov	w1, #0x5c29                	// #23593
   8c934:	72b851e1 	movk	w1, #0xc28f, lsl #16
   8c938:	528b8502 	mov	w2, #0x5c28                	// #23592
   8c93c:	72a051e2 	movk	w2, #0x28f, lsl #16
   8c940:	1b017c01 	mul	w1, w0, w1
   8c944:	13810823 	ror	w3, w1, #2
   8c948:	6b02007f 	cmp	w3, w2
   8c94c:	54000089 	b.ls	8c95c <CTimer::IsLeapYear(unsigned int)+0x2c>  // b.plast
   8c950:	f240041f 	tst	x0, #0x3
   8c954:	1a9f17e0 	cset	w0, eq	// eq = none
   8c958:	d65f03c0 	ret
   8c95c:	529ae140 	mov	w0, #0xd70a                	// #55050
   8c960:	72a01460 	movk	w0, #0xa3, lsl #16
   8c964:	13811021 	ror	w1, w1, #4
   8c968:	6b00003f 	cmp	w1, w0
   8c96c:	1a9f87e0 	cset	w0, ls	// ls = plast
   8c970:	d65f03c0 	ret
   8c974:	d503201f 	nop
   8c978:	d503201f 	nop
   8c97c:	d503201f 	nop

000000000008c980 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
   8c980:	7100041f 	cmp	w0, #0x1
   8c984:	2a0003e2 	mov	w2, w0
   8c988:	540000a0 	b.eq	8c99c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x1c>  // b.none
   8c98c:	f0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8c990:	91080000 	add	x0, x0, #0x200
   8c994:	b8625800 	ldr	w0, [x0, w2, uxtw #2]
   8c998:	d65f03c0 	ret
   8c99c:	528b8520 	mov	w0, #0x5c29                	// #23593
   8c9a0:	72b851e0 	movk	w0, #0xc28f, lsl #16
   8c9a4:	528b8503 	mov	w3, #0x5c28                	// #23592
   8c9a8:	72a051e3 	movk	w3, #0x28f, lsl #16
   8c9ac:	1b007c20 	mul	w0, w1, w0
   8c9b0:	13800804 	ror	w4, w0, #2
   8c9b4:	6b03009f 	cmp	w4, w3
   8c9b8:	540000a9 	b.ls	8c9cc <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x4c>  // b.plast
   8c9bc:	f240043f 	tst	x1, #0x3
   8c9c0:	528003a0 	mov	w0, #0x1d                  	// #29
   8c9c4:	54fffe41 	b.ne	8c98c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0xc>  // b.any
   8c9c8:	d65f03c0 	ret
   8c9cc:	13801000 	ror	w0, w0, #4
   8c9d0:	529ae141 	mov	w1, #0xd70a                	// #55050
   8c9d4:	72a01461 	movk	w1, #0xa3, lsl #16
   8c9d8:	6b01001f 	cmp	w0, w1
   8c9dc:	528003a0 	mov	w0, #0x1d                  	// #29
   8c9e0:	54fffd68 	b.hi	8c98c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0xc>  // b.pmore
   8c9e4:	d65f03c0 	ret
   8c9e8:	d503201f 	nop
   8c9ec:	d503201f 	nop

000000000008c9f0 <CTimer::Get()>:
   8c9f0:	d0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8c9f4:	f9420000 	ldr	x0, [x0, #1024]
   8c9f8:	b4000040 	cbz	x0, 8ca00 <CTimer::Get()+0x10>
   8c9fc:	d65f03c0 	ret
   8ca00:	d0000021 	adrp	x1, 92000 <uart_putHexByte::hexDigits>
   8ca04:	d0000020 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8ca08:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8ca0c:	913fc021 	add	x1, x1, #0xff0
   8ca10:	910003fd 	mov	x29, sp
   8ca14:	91052000 	add	x0, x0, #0x148
   8ca18:	52805102 	mov	w2, #0x288                 	// #648
   8ca1c:	94000b61 	bl	8f7a0 <assertion_failed>

000000000008ca20 <memmove>:
   8ca20:	eb01001f 	cmp	x0, x1
   8ca24:	54000089 	b.ls	8ca34 <memmove+0x14>  // b.plast
   8ca28:	8b020023 	add	x3, x1, x2
   8ca2c:	eb03001f 	cmp	x0, x3
   8ca30:	54000043 	b.cc	8ca38 <memmove+0x18>  // b.lo, b.ul, b.last
   8ca34:	140001ad 	b	8d0e8 <memcpy>
   8ca38:	d1000443 	sub	x3, x2, #0x1
   8ca3c:	b40000c2 	cbz	x2, 8ca54 <memmove+0x34>
   8ca40:	38e36822 	ldrsb	w2, [x1, x3]
   8ca44:	38236802 	strb	w2, [x0, x3]
   8ca48:	d1000463 	sub	x3, x3, #0x1
   8ca4c:	b100047f 	cmn	x3, #0x1
   8ca50:	54ffff81 	b.ne	8ca40 <memmove+0x20>  // b.any
   8ca54:	d65f03c0 	ret
   8ca58:	d503201f 	nop
   8ca5c:	d503201f 	nop

000000000008ca60 <memcmp>:
   8ca60:	b40001a2 	cbz	x2, 8ca94 <memcmp+0x34>
   8ca64:	d2800003 	mov	x3, #0x0                   	// #0
   8ca68:	14000004 	b	8ca78 <memcmp+0x18>
   8ca6c:	54000183 	b.cc	8ca9c <memcmp+0x3c>  // b.lo, b.ul, b.last
   8ca70:	eb02007f 	cmp	x3, x2
   8ca74:	54000100 	b.eq	8ca94 <memcmp+0x34>  // b.none
   8ca78:	38636805 	ldrb	w5, [x0, x3]
   8ca7c:	38636824 	ldrb	w4, [x1, x3]
   8ca80:	91000463 	add	x3, x3, #0x1
   8ca84:	6b0400bf 	cmp	w5, w4
   8ca88:	54ffff29 	b.ls	8ca6c <memcmp+0xc>  // b.plast
   8ca8c:	52800020 	mov	w0, #0x1                   	// #1
   8ca90:	d65f03c0 	ret
   8ca94:	52800000 	mov	w0, #0x0                   	// #0
   8ca98:	d65f03c0 	ret
   8ca9c:	12800000 	mov	w0, #0xffffffff            	// #-1
   8caa0:	d65f03c0 	ret
   8caa4:	d503201f 	nop
   8caa8:	d503201f 	nop
   8caac:	d503201f 	nop

000000000008cab0 <strlen>:
   8cab0:	aa0003e2 	mov	x2, x0
   8cab4:	39c00000 	ldrsb	w0, [x0]
   8cab8:	340000c0 	cbz	w0, 8cad0 <strlen+0x20>
   8cabc:	d2800000 	mov	x0, #0x0                   	// #0
   8cac0:	91000400 	add	x0, x0, #0x1
   8cac4:	38e06841 	ldrsb	w1, [x2, x0]
   8cac8:	35ffffc1 	cbnz	w1, 8cac0 <strlen+0x10>
   8cacc:	d65f03c0 	ret
   8cad0:	d2800000 	mov	x0, #0x0                   	// #0
   8cad4:	d65f03c0 	ret
   8cad8:	d503201f 	nop
   8cadc:	d503201f 	nop

000000000008cae0 <strcmp>:
   8cae0:	39c00002 	ldrsb	w2, [x0]
   8cae4:	35000102 	cbnz	w2, 8cb04 <strcmp+0x24>
   8cae8:	14000017 	b	8cb44 <strcmp+0x64>
   8caec:	6b02007f 	cmp	w3, w2
   8caf0:	5400018b 	b.lt	8cb20 <strcmp+0x40>  // b.tstop
   8caf4:	540001ac 	b.gt	8cb28 <strcmp+0x48>
   8caf8:	38c01c02 	ldrsb	w2, [x0, #1]!
   8cafc:	340001a2 	cbz	w2, 8cb30 <strcmp+0x50>
   8cb00:	aa0403e1 	mov	x1, x4
   8cb04:	39c00023 	ldrsb	w3, [x1]
   8cb08:	91000424 	add	x4, x1, #0x1
   8cb0c:	35ffff03 	cbnz	w3, 8caec <strcmp+0xc>
   8cb10:	6b03005f 	cmp	w2, w3
   8cb14:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   8cb18:	1a9fd400 	csinc	w0, w0, wzr, le
   8cb1c:	d65f03c0 	ret
   8cb20:	52800020 	mov	w0, #0x1                   	// #1
   8cb24:	d65f03c0 	ret
   8cb28:	12800000 	mov	w0, #0xffffffff            	// #-1
   8cb2c:	d65f03c0 	ret
   8cb30:	39c00423 	ldrsb	w3, [x1, #1]
   8cb34:	6b03005f 	cmp	w2, w3
   8cb38:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   8cb3c:	1a9fd400 	csinc	w0, w0, wzr, le
   8cb40:	17fffff7 	b	8cb1c <strcmp+0x3c>
   8cb44:	39c00023 	ldrsb	w3, [x1]
   8cb48:	17fffff2 	b	8cb10 <strcmp+0x30>
   8cb4c:	d503201f 	nop

000000000008cb50 <strcasecmp>:
   8cb50:	1400000c 	b	8cb80 <strcasecmp+0x30>
   8cb54:	51008063 	sub	w3, w3, #0x20
   8cb58:	39c00022 	ldrsb	w2, [x1]
   8cb5c:	51018444 	sub	w4, w2, #0x61
   8cb60:	7100649f 	cmp	w4, #0x19
   8cb64:	54000288 	b.hi	8cbb4 <strcasecmp+0x64>  // b.pmore
   8cb68:	51008042 	sub	w2, w2, #0x20
   8cb6c:	6b02007f 	cmp	w3, w2
   8cb70:	91000400 	add	x0, x0, #0x1
   8cb74:	91000421 	add	x1, x1, #0x1
   8cb78:	5400028c 	b.gt	8cbc8 <strcasecmp+0x78>
   8cb7c:	540002ab 	b.lt	8cbd0 <strcasecmp+0x80>  // b.tstop
   8cb80:	39c00003 	ldrsb	w3, [x0]
   8cb84:	51018462 	sub	w2, w3, #0x61
   8cb88:	7100645f 	cmp	w2, #0x19
   8cb8c:	54fffe49 	b.ls	8cb54 <strcasecmp+0x4>  // b.plast
   8cb90:	35fffe43 	cbnz	w3, 8cb58 <strcasecmp+0x8>
   8cb94:	39c00022 	ldrsb	w2, [x1]
   8cb98:	51018440 	sub	w0, w2, #0x61
   8cb9c:	7100641f 	cmp	w0, #0x19
   8cba0:	540000c8 	b.hi	8cbb8 <strcasecmp+0x68>  // b.pmore
   8cba4:	51008042 	sub	w2, w2, #0x20
   8cba8:	6b03005f 	cmp	w2, w3
   8cbac:	5a9fd3e0 	csetm	w0, gt
   8cbb0:	d65f03c0 	ret
   8cbb4:	35fffdc2 	cbnz	w2, 8cb6c <strcasecmp+0x1c>
   8cbb8:	6b03005f 	cmp	w2, w3
   8cbbc:	52800020 	mov	w0, #0x1                   	// #1
   8cbc0:	54ffff4a 	b.ge	8cba8 <strcasecmp+0x58>  // b.tcont
   8cbc4:	d65f03c0 	ret
   8cbc8:	52800020 	mov	w0, #0x1                   	// #1
   8cbcc:	d65f03c0 	ret
   8cbd0:	12800000 	mov	w0, #0xffffffff            	// #-1
   8cbd4:	d65f03c0 	ret
   8cbd8:	d503201f 	nop
   8cbdc:	d503201f 	nop

000000000008cbe0 <strncmp>:
   8cbe0:	b5000162 	cbnz	x2, 8cc0c <strncmp+0x2c>
   8cbe4:	14000012 	b	8cc2c <strncmp+0x4c>
   8cbe8:	39c00024 	ldrsb	w4, [x1]
   8cbec:	34000144 	cbz	w4, 8cc14 <strncmp+0x34>
   8cbf0:	6b04007f 	cmp	w3, w4
   8cbf4:	91000400 	add	x0, x0, #0x1
   8cbf8:	91000421 	add	x1, x1, #0x1
   8cbfc:	540001cc 	b.gt	8cc34 <strncmp+0x54>
   8cc00:	540001eb 	b.lt	8cc3c <strncmp+0x5c>  // b.tstop
   8cc04:	f1000442 	subs	x2, x2, #0x1
   8cc08:	54000120 	b.eq	8cc2c <strncmp+0x4c>  // b.none
   8cc0c:	39c00003 	ldrsb	w3, [x0]
   8cc10:	35fffec3 	cbnz	w3, 8cbe8 <strncmp+0x8>
   8cc14:	39c00002 	ldrsb	w2, [x0]
   8cc18:	39c00020 	ldrsb	w0, [x1]
   8cc1c:	6b00005f 	cmp	w2, w0
   8cc20:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   8cc24:	1a9fd400 	csinc	w0, w0, wzr, le
   8cc28:	d65f03c0 	ret
   8cc2c:	52800000 	mov	w0, #0x0                   	// #0
   8cc30:	d65f03c0 	ret
   8cc34:	52800020 	mov	w0, #0x1                   	// #1
   8cc38:	d65f03c0 	ret
   8cc3c:	12800000 	mov	w0, #0xffffffff            	// #-1
   8cc40:	d65f03c0 	ret
   8cc44:	d503201f 	nop
   8cc48:	d503201f 	nop
   8cc4c:	d503201f 	nop

000000000008cc50 <strncasecmp>:
   8cc50:	b50001e2 	cbnz	x2, 8cc8c <strncasecmp+0x3c>
   8cc54:	1400001c 	b	8ccc4 <strncasecmp+0x74>
   8cc58:	51008084 	sub	w4, w4, #0x20
   8cc5c:	39c00023 	ldrsb	w3, [x1]
   8cc60:	51018465 	sub	w5, w3, #0x61
   8cc64:	710064bf 	cmp	w5, #0x19
   8cc68:	54000328 	b.hi	8cccc <strncasecmp+0x7c>  // b.pmore
   8cc6c:	51008063 	sub	w3, w3, #0x20
   8cc70:	91000400 	add	x0, x0, #0x1
   8cc74:	6b04007f 	cmp	w3, w4
   8cc78:	5400032b 	b.lt	8ccdc <strncasecmp+0x8c>  // b.tstop
   8cc7c:	5400034c 	b.gt	8cce4 <strncasecmp+0x94>
   8cc80:	f1000442 	subs	x2, x2, #0x1
   8cc84:	91000421 	add	x1, x1, #0x1
   8cc88:	540001e0 	b.eq	8ccc4 <strncasecmp+0x74>  // b.none
   8cc8c:	39c00004 	ldrsb	w4, [x0]
   8cc90:	51018483 	sub	w3, w4, #0x61
   8cc94:	7100647f 	cmp	w3, #0x19
   8cc98:	54fffe09 	b.ls	8cc58 <strncasecmp+0x8>  // b.plast
   8cc9c:	35fffe04 	cbnz	w4, 8cc5c <strncasecmp+0xc>
   8cca0:	39c00023 	ldrsb	w3, [x1]
   8cca4:	51018461 	sub	w1, w3, #0x61
   8cca8:	51008060 	sub	w0, w3, #0x20
   8ccac:	7100683f 	cmp	w1, #0x1a
   8ccb0:	1a833003 	csel	w3, w0, w3, cc	// cc = lo, ul, last
   8ccb4:	6b03009f 	cmp	w4, w3
   8ccb8:	5a9fa3e0 	csetm	w0, lt	// lt = tstop
   8ccbc:	1a9fd400 	csinc	w0, w0, wzr, le
   8ccc0:	d65f03c0 	ret
   8ccc4:	52800000 	mov	w0, #0x0                   	// #0
   8ccc8:	d65f03c0 	ret
   8cccc:	34ffff43 	cbz	w3, 8ccb4 <strncasecmp+0x64>
   8ccd0:	6b04007f 	cmp	w3, w4
   8ccd4:	91000400 	add	x0, x0, #0x1
   8ccd8:	54fffd2a 	b.ge	8cc7c <strncasecmp+0x2c>  // b.tcont
   8ccdc:	52800020 	mov	w0, #0x1                   	// #1
   8cce0:	d65f03c0 	ret
   8cce4:	12800000 	mov	w0, #0xffffffff            	// #-1
   8cce8:	d65f03c0 	ret
   8ccec:	d503201f 	nop

000000000008ccf0 <strcpy>:
   8ccf0:	39c00022 	ldrsb	w2, [x1]
   8ccf4:	aa0003e3 	mov	x3, x0
   8ccf8:	340000a2 	cbz	w2, 8cd0c <strcpy+0x1c>
   8ccfc:	d503201f 	nop
   8cd00:	38001462 	strb	w2, [x3], #1
   8cd04:	38c01c22 	ldrsb	w2, [x1, #1]!
   8cd08:	35ffffc2 	cbnz	w2, 8cd00 <strcpy+0x10>
   8cd0c:	3900007f 	strb	wzr, [x3]
   8cd10:	d65f03c0 	ret
   8cd14:	d503201f 	nop
   8cd18:	d503201f 	nop
   8cd1c:	d503201f 	nop

000000000008cd20 <strncpy>:
   8cd20:	b4000142 	cbz	x2, 8cd48 <strncpy+0x28>
   8cd24:	aa0003e4 	mov	x4, x0
   8cd28:	14000003 	b	8cd34 <strncpy+0x14>
   8cd2c:	38001483 	strb	w3, [x4], #1
   8cd30:	540000c0 	b.eq	8cd48 <strncpy+0x28>  // b.none
   8cd34:	39c00023 	ldrsb	w3, [x1]
   8cd38:	f1000442 	subs	x2, x2, #0x1
   8cd3c:	91000421 	add	x1, x1, #0x1
   8cd40:	35ffff63 	cbnz	w3, 8cd2c <strncpy+0xc>
   8cd44:	3900009f 	strb	wzr, [x4]
   8cd48:	d65f03c0 	ret
   8cd4c:	d503201f 	nop

000000000008cd50 <strcat>:
   8cd50:	39c00002 	ldrsb	w2, [x0]
   8cd54:	34000182 	cbz	w2, 8cd84 <strcat+0x34>
   8cd58:	aa0003e2 	mov	x2, x0
   8cd5c:	d503201f 	nop
   8cd60:	38c01c43 	ldrsb	w3, [x2, #1]!
   8cd64:	35ffffe3 	cbnz	w3, 8cd60 <strcat+0x10>
   8cd68:	39c00023 	ldrsb	w3, [x1]
   8cd6c:	34000083 	cbz	w3, 8cd7c <strcat+0x2c>
   8cd70:	38001443 	strb	w3, [x2], #1
   8cd74:	38c01c23 	ldrsb	w3, [x1, #1]!
   8cd78:	35ffffc3 	cbnz	w3, 8cd70 <strcat+0x20>
   8cd7c:	3900005f 	strb	wzr, [x2]
   8cd80:	d65f03c0 	ret
   8cd84:	aa0003e2 	mov	x2, x0
   8cd88:	17fffff8 	b	8cd68 <strcat+0x18>
   8cd8c:	d503201f 	nop

000000000008cd90 <strchr>:
   8cd90:	39c00002 	ldrsb	w2, [x0]
   8cd94:	35000082 	cbnz	w2, 8cda4 <strchr+0x14>
   8cd98:	14000006 	b	8cdb0 <strchr+0x20>
   8cd9c:	38c01c02 	ldrsb	w2, [x0, #1]!
   8cda0:	34000082 	cbz	w2, 8cdb0 <strchr+0x20>
   8cda4:	6b01005f 	cmp	w2, w1
   8cda8:	54ffffa1 	b.ne	8cd9c <strchr+0xc>  // b.any
   8cdac:	d65f03c0 	ret
   8cdb0:	d2800000 	mov	x0, #0x0                   	// #0
   8cdb4:	d65f03c0 	ret
   8cdb8:	d503201f 	nop
   8cdbc:	d503201f 	nop

000000000008cdc0 <strstr>:
   8cdc0:	39c00002 	ldrsb	w2, [x0]
   8cdc4:	39c00025 	ldrsb	w5, [x1]
   8cdc8:	35000082 	cbnz	w2, 8cdd8 <strstr+0x18>
   8cdcc:	710000bf 	cmp	w5, #0x0
   8cdd0:	9a9f0000 	csel	x0, x0, xzr, eq	// eq = none
   8cdd4:	d65f03c0 	ret
   8cdd8:	34ffffe5 	cbz	w5, 8cdd4 <strstr+0x14>
   8cddc:	2a0503e3 	mov	w3, w5
   8cde0:	d2800002 	mov	x2, #0x0                   	// #0
   8cde4:	14000003 	b	8cdf0 <strstr+0x30>
   8cde8:	38e26823 	ldrsb	w3, [x1, x2]
   8cdec:	34ffff43 	cbz	w3, 8cdd4 <strstr+0x14>
   8cdf0:	38e26804 	ldrsb	w4, [x0, x2]
   8cdf4:	91000442 	add	x2, x2, #0x1
   8cdf8:	6b03009f 	cmp	w4, w3
   8cdfc:	54ffff60 	b.eq	8cde8 <strstr+0x28>  // b.none
   8ce00:	38c01c02 	ldrsb	w2, [x0, #1]!
   8ce04:	35fffec2 	cbnz	w2, 8cddc <strstr+0x1c>
   8ce08:	d2800000 	mov	x0, #0x0                   	// #0
   8ce0c:	d65f03c0 	ret

000000000008ce10 <strtok_r>:
   8ce10:	b40004a0 	cbz	x0, 8cea4 <strtok_r+0x94>
   8ce14:	39c00004 	ldrsb	w4, [x0]
   8ce18:	34000404 	cbz	w4, 8ce98 <strtok_r+0x88>
   8ce1c:	39c00027 	ldrsb	w7, [x1]
   8ce20:	34000167 	cbz	w7, 8ce4c <strtok_r+0x3c>
   8ce24:	d503201f 	nop
   8ce28:	aa0103e5 	mov	x5, x1
   8ce2c:	2a0703e3 	mov	w3, w7
   8ce30:	14000003 	b	8ce3c <strtok_r+0x2c>
   8ce34:	38c01ca3 	ldrsb	w3, [x5, #1]!
   8ce38:	340000a3 	cbz	w3, 8ce4c <strtok_r+0x3c>
   8ce3c:	6b04007f 	cmp	w3, w4
   8ce40:	54ffffa1 	b.ne	8ce34 <strtok_r+0x24>  // b.any
   8ce44:	38c01c04 	ldrsb	w4, [x0, #1]!
   8ce48:	17fffff8 	b	8ce28 <strtok_r+0x18>
   8ce4c:	34000264 	cbz	w4, 8ce98 <strtok_r+0x88>
   8ce50:	aa0003e6 	mov	x6, x0
   8ce54:	350000e7 	cbnz	w7, 8ce70 <strtok_r+0x60>
   8ce58:	38c01cc4 	ldrsb	w4, [x6, #1]!
   8ce5c:	35ffffe4 	cbnz	w4, 8ce58 <strtok_r+0x48>
   8ce60:	f9000046 	str	x6, [x2]
   8ce64:	d65f03c0 	ret
   8ce68:	38c01cc4 	ldrsb	w4, [x6, #1]!
   8ce6c:	34ffffa4 	cbz	w4, 8ce60 <strtok_r+0x50>
   8ce70:	aa0103e5 	mov	x5, x1
   8ce74:	2a0703e3 	mov	w3, w7
   8ce78:	14000003 	b	8ce84 <strtok_r+0x74>
   8ce7c:	38c01ca3 	ldrsb	w3, [x5, #1]!
   8ce80:	34ffff43 	cbz	w3, 8ce68 <strtok_r+0x58>
   8ce84:	6b04007f 	cmp	w3, w4
   8ce88:	54ffffa1 	b.ne	8ce7c <strtok_r+0x6c>  // b.any
   8ce8c:	380014df 	strb	wzr, [x6], #1
   8ce90:	f9000046 	str	x6, [x2]
   8ce94:	17fffff4 	b	8ce64 <strtok_r+0x54>
   8ce98:	d2800000 	mov	x0, #0x0                   	// #0
   8ce9c:	f900005f 	str	xzr, [x2]
   8cea0:	d65f03c0 	ret
   8cea4:	f9400040 	ldr	x0, [x2]
   8cea8:	b5fffb60 	cbnz	x0, 8ce14 <strtok_r+0x4>
   8ceac:	d2800000 	mov	x0, #0x0                   	// #0
   8ceb0:	17fffffc 	b	8cea0 <strtok_r+0x90>
   8ceb4:	d503201f 	nop
   8ceb8:	d503201f 	nop
   8cebc:	d503201f 	nop

000000000008cec0 <strtoul>:
   8cec0:	aa0003e5 	mov	x5, x0
   8cec4:	b4000041 	cbz	x1, 8cecc <strtoul+0xc>
   8cec8:	f9000020 	str	x0, [x1]
   8cecc:	51000840 	sub	w0, w2, #0x2
   8ced0:	7100881f 	cmp	w0, #0x22
   8ced4:	7a408844 	ccmp	w2, #0x0, #0x4, hi	// hi = pmore
   8ced8:	54000a41 	b.ne	8d020 <strtoul+0x160>  // b.any
   8cedc:	d503201f 	nop
   8cee0:	39c000a3 	ldrsb	w3, [x5]
   8cee4:	51002464 	sub	w4, w3, #0x9
   8cee8:	7100807f 	cmp	w3, #0x20
   8ceec:	12001c84 	and	w4, w4, #0xff
   8cef0:	54000300 	b.eq	8cf50 <strtoul+0x90>  // b.none
   8cef4:	7100109f 	cmp	w4, #0x4
   8cef8:	540002c9 	b.ls	8cf50 <strtoul+0x90>  // b.plast
   8cefc:	7100ac7f 	cmp	w3, #0x2b
   8cf00:	540002c0 	b.eq	8cf58 <strtoul+0x98>  // b.none
   8cf04:	7100b47f 	cmp	w3, #0x2d
   8cf08:	52800009 	mov	w9, #0x0                   	// #0
   8cf0c:	540002c1 	b.ne	8cf64 <strtoul+0xa4>  // b.any
   8cf10:	39c004a3 	ldrsb	w3, [x5, #1]
   8cf14:	52800029 	mov	w9, #0x1                   	// #1
   8cf18:	910004a5 	add	x5, x5, #0x1
   8cf1c:	7100c07f 	cmp	w3, #0x30
   8cf20:	54000261 	b.ne	8cf6c <strtoul+0xac>  // b.any
   8cf24:	39c004a3 	ldrsb	w3, [x5, #1]
   8cf28:	910004a4 	add	x4, x5, #0x1
   8cf2c:	121a7860 	and	w0, w3, #0xffffffdf
   8cf30:	7101601f 	cmp	w0, #0x58
   8cf34:	540007a1 	b.ne	8d028 <strtoul+0x168>  // b.any
   8cf38:	721b785f 	tst	w2, #0xffffffef
   8cf3c:	54000721 	b.ne	8d020 <strtoul+0x160>  // b.any
   8cf40:	39c008a3 	ldrsb	w3, [x5, #2]
   8cf44:	52800202 	mov	w2, #0x10                  	// #16
   8cf48:	910008a5 	add	x5, x5, #0x2
   8cf4c:	1400000b 	b	8cf78 <strtoul+0xb8>
   8cf50:	910004a5 	add	x5, x5, #0x1
   8cf54:	17ffffe3 	b	8cee0 <strtoul+0x20>
   8cf58:	39c004a3 	ldrsb	w3, [x5, #1]
   8cf5c:	52800009 	mov	w9, #0x0                   	// #0
   8cf60:	910004a5 	add	x5, x5, #0x1
   8cf64:	7100c07f 	cmp	w3, #0x30
   8cf68:	54fffde0 	b.eq	8cf24 <strtoul+0x64>  // b.none
   8cf6c:	7100005f 	cmp	w2, #0x0
   8cf70:	52800140 	mov	w0, #0xa                   	// #10
   8cf74:	1a801042 	csel	w2, w2, w0, ne	// ne = any
   8cf78:	7100bc7f 	cmp	w3, #0x2f
   8cf7c:	2a0303e4 	mov	w4, w3
   8cf80:	540004cd 	b.le	8d018 <strtoul+0x158>
   8cf84:	52800027 	mov	w7, #0x1                   	// #1
   8cf88:	d2800006 	mov	x6, #0x0                   	// #0
   8cf8c:	93407c48 	sxtw	x8, w2
   8cf90:	51018463 	sub	w3, w3, #0x61
   8cf94:	7100647f 	cmp	w3, #0x19
   8cf98:	54000248 	b.hi	8cfe0 <strtoul+0x120>  // b.pmore
   8cf9c:	51008084 	sub	w4, w4, #0x20
   8cfa0:	51001c84 	sub	w4, w4, #0x7
   8cfa4:	5100c084 	sub	w4, w4, #0x30
   8cfa8:	6b02009f 	cmp	w4, w2
   8cfac:	93407c80 	sxtw	x0, w4
   8cfb0:	5400024a 	b.ge	8cff8 <strtoul+0x138>  // b.tcont
   8cfb4:	9b060100 	madd	x0, x8, x6, x0
   8cfb8:	52800007 	mov	w7, #0x0                   	// #0
   8cfbc:	eb06001f 	cmp	x0, x6
   8cfc0:	aa0003e6 	mov	x6, x0
   8cfc4:	540003a3 	b.cc	8d038 <strtoul+0x178>  // b.lo, b.ul, b.last
   8cfc8:	38c01ca4 	ldrsb	w4, [x5, #1]!
   8cfcc:	7100bc9f 	cmp	w4, #0x2f
   8cfd0:	2a0403e3 	mov	w3, w4
   8cfd4:	54fffdec 	b.gt	8cf90 <strtoul+0xd0>
   8cfd8:	52800022 	mov	w2, #0x1                   	// #1
   8cfdc:	14000009 	b	8d000 <strtoul+0x140>
   8cfe0:	7101009f 	cmp	w4, #0x40
   8cfe4:	54fffdec 	b.gt	8cfa0 <strtoul+0xe0>
   8cfe8:	5100c084 	sub	w4, w4, #0x30
   8cfec:	6b02009f 	cmp	w4, w2
   8cff0:	93407c80 	sxtw	x0, w4
   8cff4:	54fffe0b 	b.lt	8cfb4 <strtoul+0xf4>  // b.tstop
   8cff8:	520000e2 	eor	w2, w7, #0x1
   8cffc:	aa0603e0 	mov	x0, x6
   8d000:	0a090042 	and	w2, w2, w9
   8d004:	b4000041 	cbz	x1, 8d00c <strtoul+0x14c>
   8d008:	f9000025 	str	x5, [x1]
   8d00c:	7100005f 	cmp	w2, #0x0
   8d010:	da800400 	cneg	x0, x0, ne	// ne = any
   8d014:	d65f03c0 	ret
   8d018:	b4000041 	cbz	x1, 8d020 <strtoul+0x160>
   8d01c:	f9000025 	str	x5, [x1]
   8d020:	d2800000 	mov	x0, #0x0                   	// #0
   8d024:	d65f03c0 	ret
   8d028:	aa0403e5 	mov	x5, x4
   8d02c:	35fffa62 	cbnz	w2, 8cf78 <strtoul+0xb8>
   8d030:	52800102 	mov	w2, #0x8                   	// #8
   8d034:	17ffffd1 	b	8cf78 <strtoul+0xb8>
   8d038:	b4000041 	cbz	x1, 8d040 <strtoul+0x180>
   8d03c:	f9000025 	str	x5, [x1]
   8d040:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   8d044:	d65f03c0 	ret
   8d048:	d503201f 	nop
   8d04c:	d503201f 	nop

000000000008d050 <strtoull>:
   8d050:	17ffff9c 	b	8cec0 <strtoul>
   8d054:	d503201f 	nop
   8d058:	d503201f 	nop
   8d05c:	d503201f 	nop

000000000008d060 <atoi>:
   8d060:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d064:	52800142 	mov	w2, #0xa                   	// #10
   8d068:	910003fd 	mov	x29, sp
   8d06c:	d2800001 	mov	x1, #0x0                   	// #0
   8d070:	97ffff94 	bl	8cec0 <strtoul>
   8d074:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d078:	d65f03c0 	ret
   8d07c:	d503201f 	nop

000000000008d080 <char2int>:
   8d080:	13001c00 	sxtb	w0, w0
   8d084:	d65f03c0 	ret

000000000008d088 <memset>:
   8d088:	f240081f 	tst	x0, #0x7
   8d08c:	540001c1 	b.ne	8d0c4 <memset+0x3c>  // b.any
   8d090:	f100405f 	cmp	x2, #0x10
   8d094:	54000243 	b.cc	8d0dc <memset+0x54>  // b.lo, b.ul, b.last
   8d098:	2a012028 	orr	w8, w1, w1, lsl #8
   8d09c:	2a084109 	orr	w9, w8, w8, lsl #16
   8d0a0:	aa0003ea 	mov	x10, x0
   8d0a4:	29002549 	stp	w9, w9, [x10]
   8d0a8:	91004148 	add	x8, x10, #0x10
   8d0ac:	d1004042 	sub	x2, x2, #0x10
   8d0b0:	f1003c5f 	cmp	x2, #0xf
   8d0b4:	29012549 	stp	w9, w9, [x10, #8]
   8d0b8:	aa0803ea 	mov	x10, x8
   8d0bc:	54ffff48 	b.hi	8d0a4 <memset+0x1c>  // b.pmore
   8d0c0:	14000002 	b	8d0c8 <memset+0x40>
   8d0c4:	aa0003e8 	mov	x8, x0
   8d0c8:	b4000082 	cbz	x2, 8d0d8 <memset+0x50>
   8d0cc:	f1000442 	subs	x2, x2, #0x1
   8d0d0:	38001501 	strb	w1, [x8], #1
   8d0d4:	54ffffc1 	b.ne	8d0cc <memset+0x44>  // b.any
   8d0d8:	d65f03c0 	ret
   8d0dc:	aa0003e8 	mov	x8, x0
   8d0e0:	b5ffff62 	cbnz	x2, 8d0cc <memset+0x44>
   8d0e4:	17fffffd 	b	8d0d8 <memset+0x50>

000000000008d0e8 <memcpy>:
   8d0e8:	aa0003e8 	mov	x8, x0
   8d0ec:	f101fc5f 	cmp	x2, #0x7f
   8d0f0:	540001c9 	b.ls	8d128 <memcpy+0x40>  // b.plast
   8d0f4:	f240083f 	tst	x1, #0x7
   8d0f8:	54000181 	b.ne	8d128 <memcpy+0x40>  // b.any
   8d0fc:	f240083f 	tst	x1, #0x7
   8d100:	54000141 	b.ne	8d128 <memcpy+0x40>  // b.any
   8d104:	d2800803 	mov	x3, #0x40                  	// #64
   8d108:	a8c11424 	ldp	x4, x5, [x1], #16
   8d10c:	a8c11c26 	ldp	x6, x7, [x1], #16
   8d110:	d1008042 	sub	x2, x2, #0x20
   8d114:	a8811404 	stp	x4, x5, [x0], #16
   8d118:	a8811c06 	stp	x6, x7, [x0], #16
   8d11c:	f8a36821 	prfm	pldl1strm, [x1, x3]
   8d120:	f1007c5f 	cmp	x2, #0x1f
   8d124:	54ffff28 	b.hi	8d108 <memcpy+0x20>  // b.pmore
   8d128:	f100005f 	cmp	x2, #0x0
   8d12c:	540000a0 	b.eq	8d140 <memcpy+0x58>  // b.none
   8d130:	38401423 	ldrb	w3, [x1], #1
   8d134:	f1000442 	subs	x2, x2, #0x1
   8d138:	38001403 	strb	w3, [x0], #1
   8d13c:	54ffffa1 	b.ne	8d130 <memcpy+0x48>  // b.any
   8d140:	aa0803e0 	mov	x0, x8
   8d144:	d65f03c0 	ret
	...

000000000008d150 <ChainBootStub(void const*, unsigned long)>:
   8d150:	91000c21 	add	x1, x1, #0x3
   8d154:	d342fc21 	lsr	x1, x1, #2
   8d158:	b4000181 	cbz	x1, 8d188 <ChainBootStub(void const*, unsigned long)+0x38>
   8d15c:	d1420004 	sub	x4, x0, #0x80, lsl #12
   8d160:	91408021 	add	x1, x1, #0x20, lsl #12
   8d164:	d1001084 	sub	x4, x4, #0x4
   8d168:	d37ef421 	lsl	x1, x1, #2
   8d16c:	d2a00100 	mov	x0, #0x80000               	// #524288
   8d170:	aa0003e2 	mov	x2, x0
   8d174:	91001000 	add	x0, x0, #0x4
   8d178:	b8646803 	ldr	w3, [x0, x4]
   8d17c:	eb01001f 	cmp	x0, x1
   8d180:	b9000043 	str	w3, [x2]
   8d184:	54ffff61 	b.ne	8d170 <ChainBootStub(void const*, unsigned long)+0x20>  // b.any
   8d188:	d508751f 	ic	iallu
   8d18c:	d5033f9f 	dsb	sy
   8d190:	d5033fdf 	isb
   8d194:	d2a00100 	mov	x0, #0x80000               	// #524288
   8d198:	aa0003f0 	mov	x16, x0
   8d19c:	d61f0200 	br	x16

000000000008d1a0 <EnableChainBoot>:
   8d1a0:	aa0003e6 	mov	x6, x0
   8d1a4:	aa0103e5 	mov	x5, x1
   8d1a8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d1ac:	b0000123 	adrp	x3, b2000 <appendBuf+0xa0>
   8d1b0:	91102064 	add	x4, x3, #0x408
   8d1b4:	90000001 	adrp	x1, 8d000 <strtoul+0x140>
   8d1b8:	910003fd 	mov	x29, sp
   8d1bc:	d2808002 	mov	x2, #0x400                 	// #1024
   8d1c0:	91054021 	add	x1, x1, #0x150
   8d1c4:	f9020466 	str	x6, [x3, #1032]
   8d1c8:	b27623e0 	mov	x0, #0x7fc00               	// #523264
   8d1cc:	f9000485 	str	x5, [x4, #8]
   8d1d0:	97ffffc6 	bl	8d0e8 <memcpy>
   8d1d4:	d508751f 	ic	iallu
   8d1d8:	d5033f9f 	dsb	sy
   8d1dc:	d5033fdf 	isb
   8d1e0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8d1e4:	d65f03c0 	ret
   8d1e8:	d503201f 	nop
   8d1ec:	d503201f 	nop

000000000008d1f0 <IsChainBootEnabled>:
   8d1f0:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8d1f4:	f9420400 	ldr	x0, [x0, #1032]
   8d1f8:	f100001f 	cmp	x0, #0x0
   8d1fc:	1a9f07e0 	cset	w0, ne	// ne = any
   8d200:	d65f03c0 	ret
   8d204:	d503201f 	nop
   8d208:	d503201f 	nop
   8d20c:	d503201f 	nop

000000000008d210 <DoChainBoot>:
   8d210:	d4000002 	hvc	#0x0
   8d214:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8d218:	91102001 	add	x1, x0, #0x408
   8d21c:	b27623e2 	mov	x2, #0x7fc00               	// #523264
   8d220:	f9400421 	ldr	x1, [x1, #8]
   8d224:	aa0203f0 	mov	x16, x2
   8d228:	f9420400 	ldr	x0, [x0, #1032]
   8d22c:	d61f0200 	br	x16

000000000008d230 <operator new(unsigned long, int)>:
   8d230:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d234:	910003fd 	mov	x29, sp
   8d238:	7100043f 	cmp	w1, #0x1
   8d23c:	a90153f3 	stp	x19, x20, [sp, #16]
   8d240:	aa0003f3 	mov	x19, x0
   8d244:	54000280 	b.eq	8d294 <operator new(unsigned long, int)+0x64>  // b.none
   8d248:	7100083f 	cmp	w1, #0x2
   8d24c:	54000120 	b.eq	8d270 <operator new(unsigned long, int)+0x40>  // b.none
   8d250:	35000301 	cbnz	w1, 8d2b0 <operator new(unsigned long, int)+0x80>
   8d254:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8d258:	aa1303e1 	mov	x1, x19
   8d25c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d260:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d264:	f9421000 	ldr	x0, [x0, #1056]
   8d268:	91006000 	add	x0, x0, #0x18
   8d26c:	140000d1 	b	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d270:	b0000134 	adrp	x20, b2000 <appendBuf+0xa0>
   8d274:	aa0003e1 	mov	x1, x0
   8d278:	f9421280 	ldr	x0, [x20, #1056]
   8d27c:	91064000 	add	x0, x0, #0x190
   8d280:	940000cc 	bl	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d284:	b40001e0 	cbz	x0, 8d2c0 <operator new(unsigned long, int)+0x90>
   8d288:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d28c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d290:	d65f03c0 	ret
   8d294:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8d298:	aa1303e1 	mov	x1, x19
   8d29c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d2a0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d2a4:	f9421000 	ldr	x0, [x0, #1056]
   8d2a8:	91064000 	add	x0, x0, #0x190
   8d2ac:	140000c1 	b	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d2b0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d2b4:	d2800000 	mov	x0, #0x0                   	// #0
   8d2b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d2bc:	d65f03c0 	ret
   8d2c0:	f9421280 	ldr	x0, [x20, #1056]
   8d2c4:	aa1303e1 	mov	x1, x19
   8d2c8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d2cc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d2d0:	91006000 	add	x0, x0, #0x18
   8d2d4:	140000b7 	b	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d2d8:	d503201f 	nop
   8d2dc:	d503201f 	nop

000000000008d2e0 <operator new[](unsigned long, int)>:
   8d2e0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d2e4:	910003fd 	mov	x29, sp
   8d2e8:	7100043f 	cmp	w1, #0x1
   8d2ec:	a90153f3 	stp	x19, x20, [sp, #16]
   8d2f0:	aa0003f3 	mov	x19, x0
   8d2f4:	54000280 	b.eq	8d344 <operator new[](unsigned long, int)+0x64>  // b.none
   8d2f8:	7100083f 	cmp	w1, #0x2
   8d2fc:	54000120 	b.eq	8d320 <operator new[](unsigned long, int)+0x40>  // b.none
   8d300:	35000301 	cbnz	w1, 8d360 <operator new[](unsigned long, int)+0x80>
   8d304:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8d308:	aa1303e1 	mov	x1, x19
   8d30c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d310:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d314:	f9421000 	ldr	x0, [x0, #1056]
   8d318:	91006000 	add	x0, x0, #0x18
   8d31c:	140000a5 	b	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d320:	b0000134 	adrp	x20, b2000 <appendBuf+0xa0>
   8d324:	aa0003e1 	mov	x1, x0
   8d328:	f9421280 	ldr	x0, [x20, #1056]
   8d32c:	91064000 	add	x0, x0, #0x190
   8d330:	940000a0 	bl	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d334:	b40001e0 	cbz	x0, 8d370 <operator new[](unsigned long, int)+0x90>
   8d338:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d33c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d340:	d65f03c0 	ret
   8d344:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8d348:	aa1303e1 	mov	x1, x19
   8d34c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d350:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d354:	f9421000 	ldr	x0, [x0, #1056]
   8d358:	91064000 	add	x0, x0, #0x190
   8d35c:	14000095 	b	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d360:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d364:	d2800000 	mov	x0, #0x0                   	// #0
   8d368:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d36c:	d65f03c0 	ret
   8d370:	f9421280 	ldr	x0, [x20, #1056]
   8d374:	aa1303e1 	mov	x1, x19
   8d378:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d37c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d380:	91006000 	add	x0, x0, #0x18
   8d384:	1400008b 	b	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d388:	d503201f 	nop
   8d38c:	d503201f 	nop

000000000008d390 <operator new(unsigned long, void*)>:
   8d390:	aa0103e0 	mov	x0, x1
   8d394:	d65f03c0 	ret
   8d398:	d503201f 	nop
   8d39c:	d503201f 	nop

000000000008d3a0 <operator new[](unsigned long, void*)>:
   8d3a0:	aa0103e0 	mov	x0, x1
   8d3a4:	d65f03c0 	ret
   8d3a8:	d503201f 	nop
   8d3ac:	d503201f 	nop

000000000008d3b0 <operator new(unsigned long)>:
   8d3b0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d3b4:	910003fd 	mov	x29, sp
   8d3b8:	aa0003e1 	mov	x1, x0
   8d3bc:	a90153f3 	stp	x19, x20, [sp, #16]
   8d3c0:	b0000134 	adrp	x20, b2000 <appendBuf+0xa0>
   8d3c4:	aa0003f3 	mov	x19, x0
   8d3c8:	f9421282 	ldr	x2, [x20, #1056]
   8d3cc:	91064040 	add	x0, x2, #0x190
   8d3d0:	94000078 	bl	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d3d4:	b4000080 	cbz	x0, 8d3e4 <operator new(unsigned long)+0x34>
   8d3d8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d3dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d3e0:	d65f03c0 	ret
   8d3e4:	f9421280 	ldr	x0, [x20, #1056]
   8d3e8:	aa1303e1 	mov	x1, x19
   8d3ec:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d3f0:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d3f4:	91006000 	add	x0, x0, #0x18
   8d3f8:	1400006e 	b	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d3fc:	d503201f 	nop

000000000008d400 <operator new[](unsigned long)>:
   8d400:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d404:	910003fd 	mov	x29, sp
   8d408:	aa0003e1 	mov	x1, x0
   8d40c:	a90153f3 	stp	x19, x20, [sp, #16]
   8d410:	b0000134 	adrp	x20, b2000 <appendBuf+0xa0>
   8d414:	aa0003f3 	mov	x19, x0
   8d418:	f9421282 	ldr	x2, [x20, #1056]
   8d41c:	91064040 	add	x0, x2, #0x190
   8d420:	94000064 	bl	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d424:	b4000080 	cbz	x0, 8d434 <operator new[](unsigned long)+0x34>
   8d428:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d42c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d430:	d65f03c0 	ret
   8d434:	f9421280 	ldr	x0, [x20, #1056]
   8d438:	aa1303e1 	mov	x1, x19
   8d43c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d440:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d444:	91006000 	add	x0, x0, #0x18
   8d448:	1400005a 	b	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d44c:	d503201f 	nop

000000000008d450 <operator delete(void*)>:
   8d450:	aa0003e1 	mov	x1, x0
   8d454:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   8d458:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8d45c:	eb02003f 	cmp	x1, x2
   8d460:	f9421000 	ldr	x0, [x0, #1056]
   8d464:	54000068 	b.hi	8d470 <operator delete(void*)+0x20>  // b.pmore
   8d468:	91006000 	add	x0, x0, #0x18
   8d46c:	140000b1 	b	8d730 <CHeapAllocator::Free(void*)>
   8d470:	91064000 	add	x0, x0, #0x190
   8d474:	140000af 	b	8d730 <CHeapAllocator::Free(void*)>
   8d478:	d503201f 	nop
   8d47c:	d503201f 	nop

000000000008d480 <operator delete[](void*)>:
   8d480:	aa0003e1 	mov	x1, x0
   8d484:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   8d488:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8d48c:	eb02003f 	cmp	x1, x2
   8d490:	f9421000 	ldr	x0, [x0, #1056]
   8d494:	54000068 	b.hi	8d4a0 <operator delete[](void*)+0x20>  // b.pmore
   8d498:	91006000 	add	x0, x0, #0x18
   8d49c:	140000a5 	b	8d730 <CHeapAllocator::Free(void*)>
   8d4a0:	91064000 	add	x0, x0, #0x190
   8d4a4:	140000a3 	b	8d730 <CHeapAllocator::Free(void*)>
   8d4a8:	d503201f 	nop
   8d4ac:	d503201f 	nop

000000000008d4b0 <operator delete(void*, unsigned long)>:
   8d4b0:	aa0003e1 	mov	x1, x0
   8d4b4:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   8d4b8:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8d4bc:	eb02003f 	cmp	x1, x2
   8d4c0:	f9421000 	ldr	x0, [x0, #1056]
   8d4c4:	54000068 	b.hi	8d4d0 <operator delete(void*, unsigned long)+0x20>  // b.pmore
   8d4c8:	91006000 	add	x0, x0, #0x18
   8d4cc:	14000099 	b	8d730 <CHeapAllocator::Free(void*)>
   8d4d0:	91064000 	add	x0, x0, #0x190
   8d4d4:	14000097 	b	8d730 <CHeapAllocator::Free(void*)>
   8d4d8:	d503201f 	nop
   8d4dc:	d503201f 	nop

000000000008d4e0 <operator delete[](void*, unsigned long)>:
   8d4e0:	aa0003e1 	mov	x1, x0
   8d4e4:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   8d4e8:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8d4ec:	eb02003f 	cmp	x1, x2
   8d4f0:	f9421000 	ldr	x0, [x0, #1056]
   8d4f4:	54000068 	b.hi	8d500 <operator delete[](void*, unsigned long)+0x20>  // b.pmore
   8d4f8:	91006000 	add	x0, x0, #0x18
   8d4fc:	1400008d 	b	8d730 <CHeapAllocator::Free(void*)>
   8d500:	91064000 	add	x0, x0, #0x190
   8d504:	1400008b 	b	8d730 <CHeapAllocator::Free(void*)>
	...

000000000008d510 <CHeapAllocator::CHeapAllocator(char const*)>:
   8d510:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8d514:	aa0003e3 	mov	x3, x0
   8d518:	aa0103e5 	mov	x5, x1
   8d51c:	910003fd 	mov	x29, sp
   8d520:	52800024 	mov	w4, #0x1                   	// #1
   8d524:	52800001 	mov	w1, #0x0                   	// #0
   8d528:	d2802a02 	mov	x2, #0x150                 	// #336
   8d52c:	f9000bf3 	str	x19, [sp, #16]
   8d530:	91008013 	add	x19, x0, #0x20
   8d534:	aa1303e0 	mov	x0, x19
   8d538:	a9007c65 	stp	x5, xzr, [x3]
   8d53c:	a9017c7f 	stp	xzr, xzr, [x3, #16]
   8d540:	b9017064 	str	w4, [x3, #368]
   8d544:	97fffed1 	bl	8d088 <memset>
   8d548:	d0000101 	adrp	x1, af000 <_binary_src_fith_rc_5_start+0xdb35>
   8d54c:	9107c021 	add	x1, x1, #0x1f0
   8d550:	aa1303e0 	mov	x0, x19
   8d554:	91007023 	add	x3, x1, #0x1c
   8d558:	b8404422 	ldr	w2, [x1], #4
   8d55c:	eb03003f 	cmp	x1, x3
   8d560:	b8010402 	str	w2, [x0], #16
   8d564:	54ffffa1 	b.ne	8d558 <CHeapAllocator::CHeapAllocator(char const*)+0x48>  // b.any
   8d568:	f9400bf3 	ldr	x19, [sp, #16]
   8d56c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8d570:	d65f03c0 	ret
   8d574:	d503201f 	nop
   8d578:	d503201f 	nop
   8d57c:	d503201f 	nop

000000000008d580 <CHeapAllocator::~CHeapAllocator()>:
   8d580:	d65f03c0 	ret
   8d584:	d503201f 	nop
   8d588:	d503201f 	nop
   8d58c:	d503201f 	nop

000000000008d590 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>:
   8d590:	8b020022 	add	x2, x1, x2
   8d594:	f9000c03 	str	x3, [x0, #24]
   8d598:	a9008801 	stp	x1, x2, [x0, #8]
   8d59c:	d65f03c0 	ret

000000000008d5a0 <CHeapAllocator::GetFreeSpace() const>:
   8d5a0:	a9408001 	ldp	x1, x0, [x0, #8]
   8d5a4:	cb010000 	sub	x0, x0, x1
   8d5a8:	d65f03c0 	ret
   8d5ac:	d503201f 	nop

000000000008d5b0 <CHeapAllocator::Allocate(unsigned long)>:
   8d5b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8d5b4:	910003fd 	mov	x29, sp
   8d5b8:	a90153f3 	stp	x19, x20, [sp, #16]
   8d5bc:	aa0003f4 	mov	x20, x0
   8d5c0:	f9400400 	ldr	x0, [x0, #8]
   8d5c4:	b4000720 	cbz	x0, 8d6a8 <CHeapAllocator::Allocate(unsigned long)+0xf8>
   8d5c8:	b9417280 	ldr	w0, [x20, #368]
   8d5cc:	aa0103f3 	mov	x19, x1
   8d5d0:	f90013f5 	str	x21, [sp, #32]
   8d5d4:	350006e0 	cbnz	w0, 8d6b0 <CHeapAllocator::Allocate(unsigned long)+0x100>
   8d5d8:	b9402282 	ldr	w2, [x20, #32]
   8d5dc:	91008283 	add	x3, x20, #0x20
   8d5e0:	35000082 	cbnz	w2, 8d5f0 <CHeapAllocator::Allocate(unsigned long)+0x40>
   8d5e4:	1400001a 	b	8d64c <CHeapAllocator::Allocate(unsigned long)+0x9c>
   8d5e8:	b8410c62 	ldr	w2, [x3, #16]!
   8d5ec:	34000302 	cbz	w2, 8d64c <CHeapAllocator::Allocate(unsigned long)+0x9c>
   8d5f0:	2a0203e2 	mov	w2, w2
   8d5f4:	eb13005f 	cmp	x2, x19
   8d5f8:	54ffff83 	b.cc	8d5e8 <CHeapAllocator::Allocate(unsigned long)+0x38>  // b.lo, b.ul, b.last
   8d5fc:	f9400475 	ldr	x21, [x3, #8]
   8d600:	aa0203f3 	mov	x19, x2
   8d604:	b4000255 	cbz	x21, 8d64c <CHeapAllocator::Allocate(unsigned long)+0x9c>
   8d608:	b94002a1 	ldr	w1, [x21]
   8d60c:	5289a860 	mov	w0, #0x4d43                	// #19779
   8d610:	72a84980 	movk	w0, #0x424c, lsl #16
   8d614:	6b00003f 	cmp	w1, w0
   8d618:	540007e1 	b.ne	8d714 <CHeapAllocator::Allocate(unsigned long)+0x164>  // b.any
   8d61c:	f94006a0 	ldr	x0, [x21, #8]
   8d620:	f9000460 	str	x0, [x3, #8]
   8d624:	b9417280 	ldr	w0, [x20, #368]
   8d628:	35000340 	cbnz	w0, 8d690 <CHeapAllocator::Allocate(unsigned long)+0xe0>
   8d62c:	f24016bf 	tst	x21, #0x3f
   8d630:	f90006bf 	str	xzr, [x21, #8]
   8d634:	910102a0 	add	x0, x21, #0x40
   8d638:	54000561 	b.ne	8d6e4 <CHeapAllocator::Allocate(unsigned long)+0x134>  // b.any
   8d63c:	f94013f5 	ldr	x21, [sp, #32]
   8d640:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d644:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8d648:	d65f03c0 	ret
   8d64c:	f9400695 	ldr	x21, [x20, #8]
   8d650:	9101fe60 	add	x0, x19, #0x7f
   8d654:	927ae400 	and	x0, x0, #0xffffffffffffffc0
   8d658:	f9400e82 	ldr	x2, [x20, #24]
   8d65c:	8b0002a0 	add	x0, x21, x0
   8d660:	eb0002bf 	cmp	x21, x0
   8d664:	540001a2 	b.cs	8d698 <CHeapAllocator::Allocate(unsigned long)+0xe8>  // b.hs, b.nlast
   8d668:	f9400a81 	ldr	x1, [x20, #16]
   8d66c:	cb020021 	sub	x1, x1, x2
   8d670:	eb01001f 	cmp	x0, x1
   8d674:	54000128 	b.hi	8d698 <CHeapAllocator::Allocate(unsigned long)+0xe8>  // b.pmore
   8d678:	5289a861 	mov	w1, #0x4d43                	// #19779
   8d67c:	72a84981 	movk	w1, #0x424c, lsl #16
   8d680:	f9000680 	str	x0, [x20, #8]
   8d684:	29004ea1 	stp	w1, w19, [x21]
   8d688:	b9417280 	ldr	w0, [x20, #368]
   8d68c:	34fffd00 	cbz	w0, 8d62c <CHeapAllocator::Allocate(unsigned long)+0x7c>
   8d690:	94000214 	bl	8dee0 <LeaveCritical>
   8d694:	17ffffe6 	b	8d62c <CHeapAllocator::Allocate(unsigned long)+0x7c>
   8d698:	b9417280 	ldr	w0, [x20, #368]
   8d69c:	b50000e2 	cbnz	x2, 8d6b8 <CHeapAllocator::Allocate(unsigned long)+0x108>
   8d6a0:	350002e0 	cbnz	w0, 8d6fc <CHeapAllocator::Allocate(unsigned long)+0x14c>
   8d6a4:	f94013f5 	ldr	x21, [sp, #32]
   8d6a8:	d2800000 	mov	x0, #0x0                   	// #0
   8d6ac:	17ffffe5 	b	8d640 <CHeapAllocator::Allocate(unsigned long)+0x90>
   8d6b0:	940001dc 	bl	8de20 <EnterCritical>
   8d6b4:	17ffffc9 	b	8d5d8 <CHeapAllocator::Allocate(unsigned long)+0x28>
   8d6b8:	f9000e9f 	str	xzr, [x20, #24]
   8d6bc:	35000280 	cbnz	w0, 8d70c <CHeapAllocator::Allocate(unsigned long)+0x15c>
   8d6c0:	97ffe97c 	bl	87cb0 <CLogger::Get()>
   8d6c4:	f9400281 	ldr	x1, [x20]
   8d6c8:	d0000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8d6cc:	910a0063 	add	x3, x3, #0x280
   8d6d0:	52800002 	mov	w2, #0x0                   	// #0
   8d6d4:	97ffeb5b 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d6d8:	f94013f5 	ldr	x21, [sp, #32]
   8d6dc:	d2800000 	mov	x0, #0x0                   	// #0
   8d6e0:	17ffffd8 	b	8d640 <CHeapAllocator::Allocate(unsigned long)+0x90>
   8d6e4:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8d6e8:	d0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8d6ec:	9108e021 	add	x1, x1, #0x238
   8d6f0:	910a4000 	add	x0, x0, #0x290
   8d6f4:	528011c2 	mov	w2, #0x8e                  	// #142
   8d6f8:	9400082a 	bl	8f7a0 <assertion_failed>
   8d6fc:	940001f9 	bl	8dee0 <LeaveCritical>
   8d700:	f94013f5 	ldr	x21, [sp, #32]
   8d704:	d2800000 	mov	x0, #0x0                   	// #0
   8d708:	17ffffce 	b	8d640 <CHeapAllocator::Allocate(unsigned long)+0x90>
   8d70c:	940001f5 	bl	8dee0 <LeaveCritical>
   8d710:	17ffffec 	b	8d6c0 <CHeapAllocator::Allocate(unsigned long)+0x110>
   8d714:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8d718:	d0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8d71c:	9108e021 	add	x1, x1, #0x238
   8d720:	91094000 	add	x0, x0, #0x250
   8d724:	52800bc2 	mov	w2, #0x5e                  	// #94
   8d728:	9400081e 	bl	8f7a0 <assertion_failed>
   8d72c:	d503201f 	nop

000000000008d730 <CHeapAllocator::Free(void*)>:
   8d730:	b40003c1 	cbz	x1, 8d7a8 <CHeapAllocator::Free(void*)+0x78>
   8d734:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8d738:	910003fd 	mov	x29, sp
   8d73c:	b85c0022 	ldur	w2, [x1, #-64]
   8d740:	f90013f5 	str	x21, [sp, #32]
   8d744:	aa0003f5 	mov	x21, x0
   8d748:	5289a860 	mov	w0, #0x4d43                	// #19779
   8d74c:	72a84980 	movk	w0, #0x424c, lsl #16
   8d750:	a90153f3 	stp	x19, x20, [sp, #16]
   8d754:	d1010034 	sub	x20, x1, #0x40
   8d758:	6b00005f 	cmp	w2, w0
   8d75c:	540003c1 	b.ne	8d7d4 <CHeapAllocator::Free(void*)+0xa4>  // b.any
   8d760:	b94022a1 	ldr	w1, [x21, #32]
   8d764:	910082b3 	add	x19, x21, #0x20
   8d768:	34000181 	cbz	w1, 8d798 <CHeapAllocator::Free(void*)+0x68>
   8d76c:	b9400682 	ldr	w2, [x20, #4]
   8d770:	14000003 	b	8d77c <CHeapAllocator::Free(void*)+0x4c>
   8d774:	b8410e61 	ldr	w1, [x19, #16]!
   8d778:	34000101 	cbz	w1, 8d798 <CHeapAllocator::Free(void*)+0x68>
   8d77c:	6b02003f 	cmp	w1, w2
   8d780:	54ffffa1 	b.ne	8d774 <CHeapAllocator::Free(void*)+0x44>  // b.any
   8d784:	b94172a0 	ldr	w0, [x21, #368]
   8d788:	35000120 	cbnz	w0, 8d7ac <CHeapAllocator::Free(void*)+0x7c>
   8d78c:	f9400660 	ldr	x0, [x19, #8]
   8d790:	f9000680 	str	x0, [x20, #8]
   8d794:	f9000674 	str	x20, [x19, #8]
   8d798:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d79c:	f94013f5 	ldr	x21, [sp, #32]
   8d7a0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8d7a4:	d65f03c0 	ret
   8d7a8:	d65f03c0 	ret
   8d7ac:	9400019d 	bl	8de20 <EnterCritical>
   8d7b0:	f9400661 	ldr	x1, [x19, #8]
   8d7b4:	b94172a0 	ldr	w0, [x21, #368]
   8d7b8:	f9000681 	str	x1, [x20, #8]
   8d7bc:	f9000674 	str	x20, [x19, #8]
   8d7c0:	34fffec0 	cbz	w0, 8d798 <CHeapAllocator::Free(void*)+0x68>
   8d7c4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d7c8:	f94013f5 	ldr	x21, [sp, #32]
   8d7cc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8d7d0:	140001c4 	b	8dee0 <LeaveCritical>
   8d7d4:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8d7d8:	d0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8d7dc:	9108e021 	add	x1, x1, #0x238
   8d7e0:	91094000 	add	x0, x0, #0x250
   8d7e4:	528017e2 	mov	w2, #0xbf                  	// #191
   8d7e8:	940007ee 	bl	8f7a0 <assertion_failed>
   8d7ec:	d503201f 	nop

000000000008d7f0 <CHeapAllocator::ReAllocate(void*, unsigned long)>:
   8d7f0:	b40004c1 	cbz	x1, 8d888 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x98>
   8d7f4:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8d7f8:	910003fd 	mov	x29, sp
   8d7fc:	a9025bf5 	stp	x21, x22, [sp, #32]
   8d800:	b4000482 	cbz	x2, 8d890 <CHeapAllocator::ReAllocate(void*, unsigned long)+0xa0>
   8d804:	a90153f3 	stp	x19, x20, [sp, #16]
   8d808:	aa0103f3 	mov	x19, x1
   8d80c:	5289a861 	mov	w1, #0x4d43                	// #19779
   8d810:	72a84981 	movk	w1, #0x424c, lsl #16
   8d814:	d1010276 	sub	x22, x19, #0x40
   8d818:	b85c0263 	ldur	w3, [x19, #-64]
   8d81c:	6b01007f 	cmp	w3, w1
   8d820:	540003e1 	b.ne	8d89c <CHeapAllocator::ReAllocate(void*, unsigned long)+0xac>  // b.any
   8d824:	b94006c1 	ldr	w1, [x22, #4]
   8d828:	aa1303f5 	mov	x21, x19
   8d82c:	eb02003f 	cmp	x1, x2
   8d830:	540000c3 	b.cc	8d848 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x58>  // b.lo, b.ul, b.last
   8d834:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d838:	aa1503e0 	mov	x0, x21
   8d83c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8d840:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8d844:	d65f03c0 	ret
   8d848:	aa0203e1 	mov	x1, x2
   8d84c:	aa0003f4 	mov	x20, x0
   8d850:	97ffff58 	bl	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d854:	aa0003f5 	mov	x21, x0
   8d858:	b4fffee0 	cbz	x0, 8d834 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x44>
   8d85c:	b94006c2 	ldr	w2, [x22, #4]
   8d860:	aa1303e1 	mov	x1, x19
   8d864:	97fffe21 	bl	8d0e8 <memcpy>
   8d868:	aa1303e1 	mov	x1, x19
   8d86c:	aa1403e0 	mov	x0, x20
   8d870:	97ffffb0 	bl	8d730 <CHeapAllocator::Free(void*)>
   8d874:	a94153f3 	ldp	x19, x20, [sp, #16]
   8d878:	aa1503e0 	mov	x0, x21
   8d87c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8d880:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8d884:	d65f03c0 	ret
   8d888:	aa0203e1 	mov	x1, x2
   8d88c:	17ffff49 	b	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8d890:	d2800015 	mov	x21, #0x0                   	// #0
   8d894:	97ffffa7 	bl	8d730 <CHeapAllocator::Free(void*)>
   8d898:	17ffffe8 	b	8d838 <CHeapAllocator::ReAllocate(void*, unsigned long)+0x48>
   8d89c:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8d8a0:	d0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8d8a4:	9108e021 	add	x1, x1, #0x238
   8d8a8:	91094000 	add	x0, x0, #0x250
   8d8ac:	52801462 	mov	w2, #0xa3                  	// #163
   8d8b0:	940007bc 	bl	8f7a0 <assertion_failed>
	...

000000000008d8c0 <CExceptionHandler::CExceptionHandler()>:
   8d8c0:	b0000121 	adrp	x1, b2000 <appendBuf+0xa0>
   8d8c4:	f9420c22 	ldr	x2, [x1, #1048]
   8d8c8:	b5000062 	cbnz	x2, 8d8d4 <CExceptionHandler::CExceptionHandler()+0x14>
   8d8cc:	f9020c20 	str	x0, [x1, #1048]
   8d8d0:	d65f03c0 	ret
   8d8d4:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8d8d8:	b0000020 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8d8dc:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8d8e0:	910b0021 	add	x1, x1, #0x2c0
   8d8e4:	910003fd 	mov	x29, sp
   8d8e8:	91062000 	add	x0, x0, #0x188
   8d8ec:	52800562 	mov	w2, #0x2b                  	// #43
   8d8f0:	940007ac 	bl	8f7a0 <assertion_failed>
   8d8f4:	d503201f 	nop
   8d8f8:	d503201f 	nop
   8d8fc:	d503201f 	nop

000000000008d900 <CExceptionHandler::~CExceptionHandler()>:
   8d900:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8d904:	f9020c1f 	str	xzr, [x0, #1048]
   8d908:	d65f03c0 	ret
   8d90c:	d503201f 	nop

000000000008d910 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   8d910:	d101c3ff 	sub	sp, sp, #0x70
   8d914:	a9027bfd 	stp	x29, x30, [sp, #32]
   8d918:	910083fd 	add	x29, sp, #0x20
   8d91c:	a90353f3 	stp	x19, x20, [sp, #48]
   8d920:	a9045bf5 	stp	x21, x22, [sp, #64]
   8d924:	a90563f7 	stp	x23, x24, [sp, #80]
   8d928:	f90033f9 	str	x25, [sp, #96]
   8d92c:	b4000602 	cbz	x2, 8d9ec <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   8d930:	f9400440 	ldr	x0, [x2, #8]
   8d934:	aa0203f3 	mov	x19, x2
   8d938:	2a0103f5 	mov	w21, w1
   8d93c:	f9401056 	ldr	x22, [x2, #32]
   8d940:	92400c00 	and	x0, x0, #0xf
   8d944:	f100141f 	cmp	x0, #0x5
   8d948:	54000041 	b.ne	8d950 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x40>  // b.any
   8d94c:	f9401456 	ldr	x22, [x2, #40]
   8d950:	d2c007e0 	mov	x0, #0x3f00000000          	// #270582939648
   8d954:	f9400267 	ldr	x7, [x19]
   8d958:	f2e00600 	movk	x0, #0x30, lsl #48
   8d95c:	531a7cf7 	lsr	w23, w7, #26
   8d960:	924060f8 	and	x24, x7, #0x1ffffff
   8d964:	9ad72400 	lsr	x0, x0, x23
   8d968:	92400019 	and	x25, x0, #0x1
   8d96c:	36000040 	tbz	w0, #0, 8d974 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x64>
   8d970:	f9401a79 	ldr	x25, [x19, #48]
   8d974:	d0000034 	adrp	x20, 93000 <vtable for CString+0x38>
   8d978:	910de294 	add	x20, x20, #0x378
   8d97c:	aa1403e1 	mov	x1, x20
   8d980:	aa1603e0 	mov	x0, x22
   8d984:	94000867 	bl	8fb20 <debug_stacktrace(unsigned long const*, char const*)>
   8d988:	97ffe8ca 	bl	87cb0 <CLogger::Get()>
   8d98c:	f9400665 	ldr	x5, [x19, #8]
   8d990:	d0000104 	adrp	x4, af000 <_binary_src_fith_rc_5_start+0xdb35>
   8d994:	91084084 	add	x4, x4, #0x210
   8d998:	f90003f9 	str	x25, [sp]
   8d99c:	d0000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8d9a0:	aa1803e7 	mov	x7, x24
   8d9a4:	f9400a68 	ldr	x8, [x19, #16]
   8d9a8:	aa1703e6 	mov	x6, x23
   8d9ac:	aa1403e1 	mov	x1, x20
   8d9b0:	910ba063 	add	x3, x3, #0x2e8
   8d9b4:	52800002 	mov	w2, #0x0                   	// #0
   8d9b8:	f90007f6 	str	x22, [sp, #8]
   8d9bc:	f8755884 	ldr	x4, [x4, w21, uxtw #3]
   8d9c0:	f9000fe5 	str	x5, [sp, #24]
   8d9c4:	f9400e65 	ldr	x5, [x19, #24]
   8d9c8:	f9000be8 	str	x8, [sp, #16]
   8d9cc:	97ffea9d 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8d9d0:	a9427bfd 	ldp	x29, x30, [sp, #32]
   8d9d4:	a94353f3 	ldp	x19, x20, [sp, #48]
   8d9d8:	a9445bf5 	ldp	x21, x22, [sp, #64]
   8d9dc:	a94563f7 	ldp	x23, x24, [sp, #80]
   8d9e0:	f94033f9 	ldr	x25, [sp, #96]
   8d9e4:	9101c3ff 	add	sp, sp, #0x70
   8d9e8:	d65f03c0 	ret
   8d9ec:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8d9f0:	d0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8d9f4:	910b0021 	add	x1, x1, #0x2c0
   8d9f8:	910b6000 	add	x0, x0, #0x2d8
   8d9fc:	528006c2 	mov	w2, #0x36                  	// #54
   8da00:	94000768 	bl	8f7a0 <assertion_failed>
   8da04:	d503201f 	nop
   8da08:	d503201f 	nop
   8da0c:	d503201f 	nop

000000000008da10 <CExceptionHandler::Get()>:
   8da10:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8da14:	f9420c00 	ldr	x0, [x0, #1048]
   8da18:	b4000040 	cbz	x0, 8da20 <CExceptionHandler::Get()+0x10>
   8da1c:	d65f03c0 	ret
   8da20:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8da24:	b0000020 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8da28:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8da2c:	910b0021 	add	x1, x1, #0x2c0
   8da30:	910003fd 	mov	x29, sp
   8da34:	91052000 	add	x0, x0, #0x148
   8da38:	52800a82 	mov	w2, #0x54                  	// #84
   8da3c:	94000759 	bl	8f7a0 <assertion_failed>

000000000008da40 <ExceptionHandler>:
   8da40:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8da44:	910003fd 	mov	x29, sp
   8da48:	a90153f3 	stp	x19, x20, [sp, #16]
   8da4c:	aa0003f3 	mov	x19, x0
   8da50:	aa0103f4 	mov	x20, x1
   8da54:	94000487 	bl	8ec70 <CInterruptSystem::DisableFIQ()>
   8da58:	d50341ff 	msr	daifclr, #0x1
   8da5c:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8da60:	f9420c00 	ldr	x0, [x0, #1048]
   8da64:	b40000c0 	cbz	x0, 8da7c <ExceptionHandler+0x3c>
   8da68:	aa1403e2 	mov	x2, x20
   8da6c:	2a1303e1 	mov	w1, w19
   8da70:	a94153f3 	ldp	x19, x20, [sp, #16]
   8da74:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8da78:	17ffffa6 	b	8d910 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   8da7c:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8da80:	b0000020 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8da84:	910b0021 	add	x1, x1, #0x2c0
   8da88:	91052000 	add	x0, x0, #0x148
   8da8c:	52800a82 	mov	w2, #0x54                  	// #84
   8da90:	94000744 	bl	8f7a0 <assertion_failed>
	...

000000000008daa0 <CMemorySystem::Destructor()>:
   8daa0:	b0000122 	adrp	x2, b2000 <appendBuf+0xa0>
   8daa4:	f9421041 	ldr	x1, [x2, #1056]
   8daa8:	eb00003f 	cmp	x1, x0
   8daac:	54000040 	b.eq	8dab4 <CMemorySystem::Destructor()+0x14>  // b.none
   8dab0:	d65f03c0 	ret
   8dab4:	39400020 	ldrb	w0, [x1]
   8dab8:	f902105f 	str	xzr, [x2, #1056]
   8dabc:	3607ffa0 	tbz	w0, #0, 8dab0 <CMemorySystem::Destructor()+0x10>
   8dac0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8dac4:	910003fd 	mov	x29, sp
   8dac8:	d5381000 	mrs	x0, sctlr_el1
   8dacc:	928000a1 	mov	x1, #0xfffffffffffffffa    	// #-6
   8dad0:	8a010000 	and	x0, x0, x1
   8dad4:	d5181000 	msr	sctlr_el1, x0
   8dad8:	d5033f9f 	dsb	sy
   8dadc:	d5033fdf 	isb
   8dae0:	94000174 	bl	8e0b0 <CleanDataCache>
   8dae4:	94000117 	bl	8df40 <InvalidateDataCache>
   8dae8:	d508871f 	tlbi	vmalle1
   8daec:	d5033f9f 	dsb	sy
   8daf0:	d5033fdf 	isb
   8daf4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8daf8:	d65f03c0 	ret
   8dafc:	d503201f 	nop

000000000008db00 <CMemorySystem::~CMemorySystem()>:
   8db00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8db04:	910003fd 	mov	x29, sp
   8db08:	f9000bf3 	str	x19, [sp, #16]
   8db0c:	aa0003f3 	mov	x19, x0
   8db10:	97ffffe4 	bl	8daa0 <CMemorySystem::Destructor()>
   8db14:	910c2260 	add	x0, x19, #0x308
   8db18:	94000ae2 	bl	906a0 <CPageAllocator::~CPageAllocator()>
   8db1c:	91064260 	add	x0, x19, #0x190
   8db20:	97fffe98 	bl	8d580 <CHeapAllocator::~CHeapAllocator()>
   8db24:	91006260 	add	x0, x19, #0x18
   8db28:	f9400bf3 	ldr	x19, [sp, #16]
   8db2c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8db30:	17fffe94 	b	8d580 <CHeapAllocator::~CHeapAllocator()>
   8db34:	d503201f 	nop
   8db38:	d503201f 	nop
   8db3c:	d503201f 	nop

000000000008db40 <CMemorySystem::GetMemSize() const>:
   8db40:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8db44:	f9421001 	ldr	x1, [x0, #1056]
   8db48:	b4000081 	cbz	x1, 8db58 <CMemorySystem::GetMemSize() const+0x18>
   8db4c:	a9408022 	ldp	x2, x0, [x1, #8]
   8db50:	8b000040 	add	x0, x2, x0
   8db54:	d65f03c0 	ret
   8db58:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8db5c:	910e0021 	add	x1, x1, #0x380
   8db60:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8db64:	91004020 	add	x0, x1, #0x10
   8db68:	910003fd 	mov	x29, sp
   8db6c:	52801162 	mov	w2, #0x8b                  	// #139
   8db70:	9400070c 	bl	8f7a0 <assertion_failed>
   8db74:	d503201f 	nop
   8db78:	d503201f 	nop
   8db7c:	d503201f 	nop

000000000008db80 <CMemorySystem::Get()>:
   8db80:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8db84:	f9421000 	ldr	x0, [x0, #1056]
   8db88:	b4000040 	cbz	x0, 8db90 <CMemorySystem::Get()+0x10>
   8db8c:	d65f03c0 	ret
   8db90:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8db94:	910e0021 	add	x1, x1, #0x380
   8db98:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8db9c:	91004020 	add	x0, x1, #0x10
   8dba0:	910003fd 	mov	x29, sp
   8dba4:	52801222 	mov	w2, #0x91                  	// #145
   8dba8:	940006fe 	bl	8f7a0 <assertion_failed>
   8dbac:	d503201f 	nop

000000000008dbb0 <CMemorySystem::EnableMMU()>:
   8dbb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8dbb4:	910003fd 	mov	x29, sp
   8dbb8:	39400001 	ldrb	w1, [x0]
   8dbbc:	36000341 	tbz	w1, #0, 8dc24 <CMemorySystem::EnableMMU()+0x74>
   8dbc0:	d2809fe1 	mov	x1, #0x4ff                 	// #1279
   8dbc4:	d518a201 	msr	mair_el1, x1
   8dbc8:	f9419400 	ldr	x0, [x0, #808]
   8dbcc:	b4000360 	cbz	x0, 8dc38 <CMemorySystem::EnableMMU()+0x88>
   8dbd0:	940001c4 	bl	8e2e0 <CTranslationTable::GetBaseAddress() const>
   8dbd4:	d5182000 	msr	ttbr0_el1, x0
   8dbd8:	d5382040 	mrs	x0, tcr_el1
   8dbdc:	929ff7e2 	mov	x2, #0xffffffffffff0040    	// #-65472
   8dbe0:	f2bff7e2 	movk	x2, #0xffbf, lsl #16
   8dbe4:	f2dfff02 	movk	x2, #0xfff8, lsl #32
   8dbe8:	d28ea381 	mov	x1, #0x751c                	// #29980
   8dbec:	f2a01001 	movk	x1, #0x80, lsl #16
   8dbf0:	8a020000 	and	x0, x0, x2
   8dbf4:	f2c00021 	movk	x1, #0x1, lsl #32
   8dbf8:	aa010000 	orr	x0, x0, x1
   8dbfc:	d5182040 	msr	tcr_el1, x0
   8dc00:	d5381000 	mrs	x0, sctlr_el1
   8dc04:	92800042 	mov	x2, #0xfffffffffffffffd    	// #-3
   8dc08:	f2bffee2 	movk	x2, #0xfff7, lsl #16
   8dc0c:	d28200a1 	mov	x1, #0x1005                	// #4101
   8dc10:	8a020000 	and	x0, x0, x2
   8dc14:	aa010000 	orr	x0, x0, x1
   8dc18:	d5181000 	msr	sctlr_el1, x0
   8dc1c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8dc20:	d65f03c0 	ret
   8dc24:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8dc28:	910e0021 	add	x1, x1, #0x380
   8dc2c:	91008020 	add	x0, x1, #0x20
   8dc30:	528012e2 	mov	w2, #0x97                  	// #151
   8dc34:	940006db 	bl	8f7a0 <assertion_failed>
   8dc38:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8dc3c:	910e0021 	add	x1, x1, #0x380
   8dc40:	9100c020 	add	x0, x1, #0x30
   8dc44:	528013c2 	mov	w2, #0x9e                  	// #158
   8dc48:	940006d6 	bl	8f7a0 <assertion_failed>
   8dc4c:	d503201f 	nop

000000000008dc50 <CMemorySystem::CMemorySystem(bool)>:
   8dc50:	a9ba7bfd 	stp	x29, x30, [sp, #-96]!
   8dc54:	910003fd 	mov	x29, sp
   8dc58:	a90153f3 	stp	x19, x20, [sp, #16]
   8dc5c:	aa0003f3 	mov	x19, x0
   8dc60:	d0000034 	adrp	x20, 93000 <vtable for CString+0x38>
   8dc64:	910e0294 	add	x20, x20, #0x380
   8dc68:	a9025bf5 	stp	x21, x22, [sp, #32]
   8dc6c:	91006016 	add	x22, x0, #0x18
   8dc70:	910c2275 	add	x21, x19, #0x308
   8dc74:	aa1603e0 	mov	x0, x22
   8dc78:	f9001bf7 	str	x23, [sp, #48]
   8dc7c:	91064277 	add	x23, x19, #0x190
   8dc80:	39000261 	strb	w1, [x19]
   8dc84:	91014281 	add	x1, x20, #0x50
   8dc88:	a900fe7f 	stp	xzr, xzr, [x19, #8]
   8dc8c:	97fffe21 	bl	8d510 <CHeapAllocator::CHeapAllocator(char const*)>
   8dc90:	91016281 	add	x1, x20, #0x58
   8dc94:	aa1703e0 	mov	x0, x23
   8dc98:	97fffe1e 	bl	8d510 <CHeapAllocator::CHeapAllocator(char const*)>
   8dc9c:	aa1503e0 	mov	x0, x21
   8dca0:	94000a78 	bl	90680 <CPageAllocator::CPageAllocator()>
   8dca4:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8dca8:	f901967f 	str	xzr, [x19, #808]
   8dcac:	f9421001 	ldr	x1, [x0, #1056]
   8dcb0:	b40000c1 	cbz	x1, 8dcc8 <CMemorySystem::CMemorySystem(bool)+0x78>
   8dcb4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dcb8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8dcbc:	f9401bf7 	ldr	x23, [sp, #48]
   8dcc0:	a8c67bfd 	ldp	x29, x30, [sp], #96
   8dcc4:	d65f03c0 	ret
   8dcc8:	52800021 	mov	w1, #0x1                   	// #1
   8dccc:	f9021013 	str	x19, [x0, #1056]
   8dcd0:	910103e0 	add	x0, sp, #0x40
   8dcd4:	940006d7 	bl	8f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   8dcd8:	528000a1 	mov	w1, #0x5                   	// #5
   8dcdc:	72a00021 	movk	w1, #0x1, lsl #16
   8dce0:	910123e2 	add	x2, sp, #0x48
   8dce4:	910103e0 	add	x0, sp, #0x40
   8dce8:	52800004 	mov	w4, #0x0                   	// #0
   8dcec:	52800283 	mov	w3, #0x14                  	// #20
   8dcf0:	94000720 	bl	8f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   8dcf4:	360003c0 	tbz	w0, #0, 8dd6c <CMemorySystem::CMemorySystem(bool)+0x11c>
   8dcf8:	b94057e0 	ldr	w0, [sp, #84]
   8dcfc:	350006c0 	cbnz	w0, 8ddd4 <CMemorySystem::CMemorySystem(bool)+0x184>
   8dd00:	b9405be1 	ldr	w1, [sp, #88]
   8dd04:	b2689ff4 	mov	x20, #0xffffffffff000000    	// #-16777216
   8dd08:	d1640282 	sub	x2, x20, #0x900, lsl #12
   8dd0c:	8b020022 	add	x2, x1, x2
   8dd10:	8b140034 	add	x20, x1, x20
   8dd14:	d2a00083 	mov	x3, #0x40000               	// #262144
   8dd18:	aa1603e0 	mov	x0, x22
   8dd1c:	f9000661 	str	x1, [x19, #8]
   8dd20:	d2a01201 	mov	x1, #0x900000              	// #9437184
   8dd24:	97fffe1b 	bl	8d590 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>
   8dd28:	97ffecf2 	bl	890f0 <CMachineInfo::Get()>
   8dd2c:	97ffeb3d 	bl	88a20 <CMachineInfo::GetRAMSize() const>
   8dd30:	7110001f 	cmp	w0, #0x400
   8dd34:	540003a8 	b.hi	8dda8 <CMemorySystem::CMemorySystem(bool)+0x158>  // b.pmore
   8dd38:	aa1503e0 	mov	x0, x21
   8dd3c:	aa1403e1 	mov	x1, x20
   8dd40:	d2a02002 	mov	x2, #0x1000000             	// #16777216
   8dd44:	94000a5b 	bl	906b0 <CPageAllocator::Setup(unsigned long, unsigned long)>
   8dd48:	39400260 	ldrb	w0, [x19]
   8dd4c:	370001c0 	tbnz	w0, #0, 8dd84 <CMemorySystem::CMemorySystem(bool)+0x134>
   8dd50:	910103e0 	add	x0, sp, #0x40
   8dd54:	940006bb 	bl	8f840 <CBcmPropertyTags::~CBcmPropertyTags()>
   8dd58:	a94153f3 	ldp	x19, x20, [sp, #16]
   8dd5c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8dd60:	f9401bf7 	ldr	x23, [sp, #48]
   8dd64:	a8c67bfd 	ldp	x29, x30, [sp], #96
   8dd68:	d65f03c0 	ret
   8dd6c:	d2e38000 	mov	x0, #0x1c00000000000000    	// #2017612633061982208
   8dd70:	d2a34e02 	mov	x2, #0x1a700000            	// #443547648
   8dd74:	91640054 	add	x20, x2, #0x900, lsl #12
   8dd78:	d2a38001 	mov	x1, #0x1c000000            	// #469762048
   8dd7c:	f80543e0 	stur	x0, [sp, #84]
   8dd80:	17ffffe5 	b	8dd14 <CMemorySystem::CMemorySystem(bool)+0xc4>
   8dd84:	d2800200 	mov	x0, #0x10                  	// #16
   8dd88:	97fffd8a 	bl	8d3b0 <operator new(unsigned long)>
   8dd8c:	f9400661 	ldr	x1, [x19, #8]
   8dd90:	aa0003f4 	mov	x20, x0
   8dd94:	940001fb 	bl	8e580 <CTranslationTable::CTranslationTable(unsigned long)>
   8dd98:	aa1303e0 	mov	x0, x19
   8dd9c:	f9019674 	str	x20, [x19, #808]
   8dda0:	97ffff84 	bl	8dbb0 <CMemorySystem::EnableMMU()>
   8dda4:	17ffffeb 	b	8dd50 <CMemorySystem::CMemorySystem(bool)+0x100>
   8dda8:	51100000 	sub	w0, w0, #0x400
   8ddac:	d2b00001 	mov	x1, #0x80000000            	// #2147483648
   8ddb0:	530c2c02 	lsl	w2, w0, #20
   8ddb4:	d2800003 	mov	x3, #0x0                   	// #0
   8ddb8:	eb01005f 	cmp	x2, x1
   8ddbc:	aa1703e0 	mov	x0, x23
   8ddc0:	9a819042 	csel	x2, x2, x1, ls	// ls = plast
   8ddc4:	d2a80001 	mov	x1, #0x40000000            	// #1073741824
   8ddc8:	f9000a62 	str	x2, [x19, #16]
   8ddcc:	97fffdf1 	bl	8d590 <CHeapAllocator::Setup(unsigned long, unsigned long, unsigned long)>
   8ddd0:	17ffffda 	b	8dd38 <CMemorySystem::CMemorySystem(bool)+0xe8>
   8ddd4:	528006e2 	mov	w2, #0x37                  	// #55
   8ddd8:	aa1403e1 	mov	x1, x20
   8dddc:	9101a280 	add	x0, x20, #0x68
   8dde0:	94000670 	bl	8f7a0 <assertion_failed>
   8dde4:	d503201f 	nop
   8dde8:	d503201f 	nop
   8ddec:	d503201f 	nop

000000000008ddf0 <CMemorySystem::GetCoherentPage(unsigned int)>:
   8ddf0:	53103c00 	lsl	w0, w0, #16
   8ddf4:	91540000 	add	x0, x0, #0x500, lsl #12
   8ddf8:	d65f03c0 	ret
   8ddfc:	00000000 	udf	#0

000000000008de00 <CurrentExecutionLevel>:
   8de00:	d53b4221 	mrs	x1, daif
   8de04:	52800040 	mov	w0, #0x2                   	// #2
   8de08:	f27a003f 	tst	x1, #0x40
   8de0c:	53071c21 	ubfx	w1, w1, #7, #1
   8de10:	1a800020 	csel	w0, w1, w0, eq	// eq = none
   8de14:	d65f03c0 	ret
   8de18:	d503201f 	nop
   8de1c:	d503201f 	nop

000000000008de20 <EnterCritical>:
   8de20:	51000401 	sub	w1, w0, #0x1
   8de24:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8de28:	910003fd 	mov	x29, sp
   8de2c:	7100043f 	cmp	w1, #0x1
   8de30:	540002c8 	b.hi	8de88 <EnterCritical+0x68>  // b.pmore
   8de34:	d53b4224 	mrs	x4, daif
   8de38:	7100081f 	cmp	w0, #0x2
   8de3c:	54000321 	b.ne	8dea0 <EnterCritical+0x80>  // b.any
   8de40:	d50343df 	msr	daifset, #0x3
   8de44:	b0000121 	adrp	x1, b2000 <appendBuf+0xa0>
   8de48:	9110c023 	add	x3, x1, #0x430
   8de4c:	b9443022 	ldr	w2, [x1, #1072]
   8de50:	71004c5f 	cmp	w2, #0x13
   8de54:	54000348 	b.hi	8debc <EnterCritical+0x9c>  // b.pmore
   8de58:	b9443022 	ldr	w2, [x1, #1072]
   8de5c:	7100041f 	cmp	w0, #0x1
   8de60:	91004063 	add	x3, x3, #0x10
   8de64:	11000440 	add	w0, w2, #0x1
   8de68:	2a0203e2 	mov	w2, w2
   8de6c:	b9043020 	str	w0, [x1, #1072]
   8de70:	f8227864 	str	x4, [x3, x2, lsl #3]
   8de74:	54000041 	b.ne	8de7c <EnterCritical+0x5c>  // b.any
   8de78:	d50341ff 	msr	daifclr, #0x1
   8de7c:	d5033fbf 	dmb	sy
   8de80:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8de84:	d65f03c0 	ret
   8de88:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8de8c:	d0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8de90:	91102021 	add	x1, x1, #0x408
   8de94:	91108000 	add	x0, x0, #0x420
   8de98:	52800c62 	mov	w2, #0x63                  	// #99
   8de9c:	94000641 	bl	8f7a0 <assertion_failed>
   8dea0:	3637fd04 	tbz	w4, #6, 8de40 <EnterCritical+0x20>
   8dea4:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8dea8:	d0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8deac:	91102021 	add	x1, x1, #0x408
   8deb0:	91116000 	add	x0, x0, #0x458
   8deb4:	52800d22 	mov	w2, #0x69                  	// #105
   8deb8:	9400063a 	bl	8f7a0 <assertion_failed>
   8debc:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8dec0:	d0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8dec4:	91102021 	add	x1, x1, #0x408
   8dec8:	91122000 	add	x0, x0, #0x488
   8decc:	52800da2 	mov	w2, #0x6d                  	// #109
   8ded0:	94000634 	bl	8f7a0 <assertion_failed>
   8ded4:	d503201f 	nop
   8ded8:	d503201f 	nop
   8dedc:	d503201f 	nop

000000000008dee0 <LeaveCritical>:
   8dee0:	d5033fbf 	dmb	sy
   8dee4:	d50341df 	msr	daifset, #0x1
   8dee8:	b0000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8deec:	b9443001 	ldr	w1, [x0, #1072]
   8def0:	34000121 	cbz	w1, 8df14 <LeaveCritical+0x34>
   8def4:	b9443001 	ldr	w1, [x0, #1072]
   8def8:	9110c002 	add	x2, x0, #0x430
   8defc:	91004042 	add	x2, x2, #0x10
   8df00:	51000423 	sub	w3, w1, #0x1
   8df04:	b9043003 	str	w3, [x0, #1072]
   8df08:	f8637840 	ldr	x0, [x2, x3, lsl #3]
   8df0c:	d51b4220 	msr	daif, x0
   8df10:	d65f03c0 	ret
   8df14:	d0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8df18:	d0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8df1c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8df20:	91102021 	add	x1, x1, #0x408
   8df24:	910003fd 	mov	x29, sp
   8df28:	9112c000 	add	x0, x0, #0x4b0
   8df2c:	52800fc2 	mov	w2, #0x7e                  	// #126
   8df30:	9400061c 	bl	8f7a0 <assertion_failed>
   8df34:	d503201f 	nop
   8df38:	d503201f 	nop
   8df3c:	d503201f 	nop

000000000008df40 <InvalidateDataCache>:
   8df40:	d2800000 	mov	x0, #0x0                   	// #0
   8df44:	d503201f 	nop
   8df48:	d5087640 	dc	isw, x0
   8df4c:	32010001 	orr	w1, w0, #0x80000000
   8df50:	d5087641 	dc	isw, x1
   8df54:	91010000 	add	x0, x0, #0x40
   8df58:	f140101f 	cmp	x0, #0x4, lsl #12
   8df5c:	54ffff61 	b.ne	8df48 <InvalidateDataCache+0x8>  // b.any
   8df60:	52800050 	mov	w16, #0x2                   	// #2
   8df64:	72a20010 	movk	w16, #0x1000, lsl #16
   8df68:	5280004f 	mov	w15, #0x2                   	// #2
   8df6c:	72a4000f 	movk	w15, #0x2000, lsl #16
   8df70:	5280004e 	mov	w14, #0x2                   	// #2
   8df74:	72a6000e 	movk	w14, #0x3000, lsl #16
   8df78:	5280004d 	mov	w13, #0x2                   	// #2
   8df7c:	72a8000d 	movk	w13, #0x4000, lsl #16
   8df80:	5280004c 	mov	w12, #0x2                   	// #2
   8df84:	72aa000c 	movk	w12, #0x5000, lsl #16
   8df88:	5280004b 	mov	w11, #0x2                   	// #2
   8df8c:	72ac000b 	movk	w11, #0x6000, lsl #16
   8df90:	5280004a 	mov	w10, #0x2                   	// #2
   8df94:	72ae000a 	movk	w10, #0x7000, lsl #16
   8df98:	52800049 	mov	w9, #0x2                   	// #2
   8df9c:	72b00009 	movk	w9, #0x8000, lsl #16
   8dfa0:	52800048 	mov	w8, #0x2                   	// #2
   8dfa4:	72b20008 	movk	w8, #0x9000, lsl #16
   8dfa8:	52800047 	mov	w7, #0x2                   	// #2
   8dfac:	72b40007 	movk	w7, #0xa000, lsl #16
   8dfb0:	52800046 	mov	w6, #0x2                   	// #2
   8dfb4:	72b60006 	movk	w6, #0xb000, lsl #16
   8dfb8:	52800045 	mov	w5, #0x2                   	// #2
   8dfbc:	72b80005 	movk	w5, #0xc000, lsl #16
   8dfc0:	52800044 	mov	w4, #0x2                   	// #2
   8dfc4:	72ba0004 	movk	w4, #0xd000, lsl #16
   8dfc8:	52800043 	mov	w3, #0x2                   	// #2
   8dfcc:	72bc0003 	movk	w3, #0xe000, lsl #16
   8dfd0:	52800042 	mov	w2, #0x2                   	// #2
   8dfd4:	72be0002 	movk	w2, #0xf000, lsl #16
   8dfd8:	52800000 	mov	w0, #0x0                   	// #0
   8dfdc:	d503201f 	nop
   8dfe0:	321f0001 	orr	w1, w0, #0x2
   8dfe4:	d5087641 	dc	isw, x1
   8dfe8:	2a100001 	orr	w1, w0, w16
   8dfec:	d5087641 	dc	isw, x1
   8dff0:	2a0f0001 	orr	w1, w0, w15
   8dff4:	d5087641 	dc	isw, x1
   8dff8:	2a0e0001 	orr	w1, w0, w14
   8dffc:	d5087641 	dc	isw, x1
   8e000:	2a0d0001 	orr	w1, w0, w13
   8e004:	d5087641 	dc	isw, x1
   8e008:	2a0c0001 	orr	w1, w0, w12
   8e00c:	d5087641 	dc	isw, x1
   8e010:	2a0b0001 	orr	w1, w0, w11
   8e014:	d5087641 	dc	isw, x1
   8e018:	2a0a0001 	orr	w1, w0, w10
   8e01c:	d5087641 	dc	isw, x1
   8e020:	2a090001 	orr	w1, w0, w9
   8e024:	d5087641 	dc	isw, x1
   8e028:	2a080001 	orr	w1, w0, w8
   8e02c:	d5087641 	dc	isw, x1
   8e030:	2a070001 	orr	w1, w0, w7
   8e034:	d5087641 	dc	isw, x1
   8e038:	2a060001 	orr	w1, w0, w6
   8e03c:	d5087641 	dc	isw, x1
   8e040:	2a050001 	orr	w1, w0, w5
   8e044:	d5087641 	dc	isw, x1
   8e048:	2a040001 	orr	w1, w0, w4
   8e04c:	d5087641 	dc	isw, x1
   8e050:	2a030001 	orr	w1, w0, w3
   8e054:	d5087641 	dc	isw, x1
   8e058:	2a020001 	orr	w1, w0, w2
   8e05c:	d5087641 	dc	isw, x1
   8e060:	11010000 	add	w0, w0, #0x40
   8e064:	7140401f 	cmp	w0, #0x10, lsl #12
   8e068:	54fffbc1 	b.ne	8dfe0 <InvalidateDataCache+0xa0>  // b.any
   8e06c:	d5033f9f 	dsb	sy
   8e070:	d65f03c0 	ret
   8e074:	d503201f 	nop
   8e078:	d503201f 	nop
   8e07c:	d503201f 	nop

000000000008e080 <InvalidateDataCacheL1Only>:
   8e080:	d2800000 	mov	x0, #0x0                   	// #0
   8e084:	d503201f 	nop
   8e088:	d5087640 	dc	isw, x0
   8e08c:	32010001 	orr	w1, w0, #0x80000000
   8e090:	d5087641 	dc	isw, x1
   8e094:	91010000 	add	x0, x0, #0x40
   8e098:	f140101f 	cmp	x0, #0x4, lsl #12
   8e09c:	54ffff61 	b.ne	8e088 <InvalidateDataCacheL1Only+0x8>  // b.any
   8e0a0:	d5033f9f 	dsb	sy
   8e0a4:	d65f03c0 	ret
   8e0a8:	d503201f 	nop
   8e0ac:	d503201f 	nop

000000000008e0b0 <CleanDataCache>:
   8e0b0:	d2800000 	mov	x0, #0x0                   	// #0
   8e0b4:	d503201f 	nop
   8e0b8:	d5087a40 	dc	csw, x0
   8e0bc:	32010001 	orr	w1, w0, #0x80000000
   8e0c0:	d5087a41 	dc	csw, x1
   8e0c4:	91010000 	add	x0, x0, #0x40
   8e0c8:	f140101f 	cmp	x0, #0x4, lsl #12
   8e0cc:	54ffff61 	b.ne	8e0b8 <CleanDataCache+0x8>  // b.any
   8e0d0:	52800050 	mov	w16, #0x2                   	// #2
   8e0d4:	72a20010 	movk	w16, #0x1000, lsl #16
   8e0d8:	5280004f 	mov	w15, #0x2                   	// #2
   8e0dc:	72a4000f 	movk	w15, #0x2000, lsl #16
   8e0e0:	5280004e 	mov	w14, #0x2                   	// #2
   8e0e4:	72a6000e 	movk	w14, #0x3000, lsl #16
   8e0e8:	5280004d 	mov	w13, #0x2                   	// #2
   8e0ec:	72a8000d 	movk	w13, #0x4000, lsl #16
   8e0f0:	5280004c 	mov	w12, #0x2                   	// #2
   8e0f4:	72aa000c 	movk	w12, #0x5000, lsl #16
   8e0f8:	5280004b 	mov	w11, #0x2                   	// #2
   8e0fc:	72ac000b 	movk	w11, #0x6000, lsl #16
   8e100:	5280004a 	mov	w10, #0x2                   	// #2
   8e104:	72ae000a 	movk	w10, #0x7000, lsl #16
   8e108:	52800049 	mov	w9, #0x2                   	// #2
   8e10c:	72b00009 	movk	w9, #0x8000, lsl #16
   8e110:	52800048 	mov	w8, #0x2                   	// #2
   8e114:	72b20008 	movk	w8, #0x9000, lsl #16
   8e118:	52800047 	mov	w7, #0x2                   	// #2
   8e11c:	72b40007 	movk	w7, #0xa000, lsl #16
   8e120:	52800046 	mov	w6, #0x2                   	// #2
   8e124:	72b60006 	movk	w6, #0xb000, lsl #16
   8e128:	52800045 	mov	w5, #0x2                   	// #2
   8e12c:	72b80005 	movk	w5, #0xc000, lsl #16
   8e130:	52800044 	mov	w4, #0x2                   	// #2
   8e134:	72ba0004 	movk	w4, #0xd000, lsl #16
   8e138:	52800043 	mov	w3, #0x2                   	// #2
   8e13c:	72bc0003 	movk	w3, #0xe000, lsl #16
   8e140:	52800042 	mov	w2, #0x2                   	// #2
   8e144:	72be0002 	movk	w2, #0xf000, lsl #16
   8e148:	52800000 	mov	w0, #0x0                   	// #0
   8e14c:	d503201f 	nop
   8e150:	321f0001 	orr	w1, w0, #0x2
   8e154:	d5087a41 	dc	csw, x1
   8e158:	2a100001 	orr	w1, w0, w16
   8e15c:	d5087a41 	dc	csw, x1
   8e160:	2a0f0001 	orr	w1, w0, w15
   8e164:	d5087a41 	dc	csw, x1
   8e168:	2a0e0001 	orr	w1, w0, w14
   8e16c:	d5087a41 	dc	csw, x1
   8e170:	2a0d0001 	orr	w1, w0, w13
   8e174:	d5087a41 	dc	csw, x1
   8e178:	2a0c0001 	orr	w1, w0, w12
   8e17c:	d5087a41 	dc	csw, x1
   8e180:	2a0b0001 	orr	w1, w0, w11
   8e184:	d5087a41 	dc	csw, x1
   8e188:	2a0a0001 	orr	w1, w0, w10
   8e18c:	d5087a41 	dc	csw, x1
   8e190:	2a090001 	orr	w1, w0, w9
   8e194:	d5087a41 	dc	csw, x1
   8e198:	2a080001 	orr	w1, w0, w8
   8e19c:	d5087a41 	dc	csw, x1
   8e1a0:	2a070001 	orr	w1, w0, w7
   8e1a4:	d5087a41 	dc	csw, x1
   8e1a8:	2a060001 	orr	w1, w0, w6
   8e1ac:	d5087a41 	dc	csw, x1
   8e1b0:	2a050001 	orr	w1, w0, w5
   8e1b4:	d5087a41 	dc	csw, x1
   8e1b8:	2a040001 	orr	w1, w0, w4
   8e1bc:	d5087a41 	dc	csw, x1
   8e1c0:	2a030001 	orr	w1, w0, w3
   8e1c4:	d5087a41 	dc	csw, x1
   8e1c8:	2a020001 	orr	w1, w0, w2
   8e1cc:	d5087a41 	dc	csw, x1
   8e1d0:	11010000 	add	w0, w0, #0x40
   8e1d4:	7140401f 	cmp	w0, #0x10, lsl #12
   8e1d8:	54fffbc1 	b.ne	8e150 <CleanDataCache+0xa0>  // b.any
   8e1dc:	d5033f9f 	dsb	sy
   8e1e0:	d65f03c0 	ret
   8e1e4:	d503201f 	nop
   8e1e8:	d503201f 	nop
   8e1ec:	d503201f 	nop

000000000008e1f0 <InvalidateDataCacheRange>:
   8e1f0:	d5087620 	dc	ivac, x0
   8e1f4:	f101003f 	cmp	x1, #0x40
   8e1f8:	54000149 	b.ls	8e220 <InvalidateDataCacheRange+0x30>  // b.plast
   8e1fc:	d1010421 	sub	x1, x1, #0x41
   8e200:	91010000 	add	x0, x0, #0x40
   8e204:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   8e208:	8b000021 	add	x1, x1, x0
   8e20c:	d503201f 	nop
   8e210:	d5087620 	dc	ivac, x0
   8e214:	eb01001f 	cmp	x0, x1
   8e218:	91010000 	add	x0, x0, #0x40
   8e21c:	54ffffa1 	b.ne	8e210 <InvalidateDataCacheRange+0x20>  // b.any
   8e220:	d5033f9f 	dsb	sy
   8e224:	d65f03c0 	ret
   8e228:	d503201f 	nop
   8e22c:	d503201f 	nop

000000000008e230 <CleanDataCacheRange>:
   8e230:	d50b7a20 	dc	cvac, x0
   8e234:	f101003f 	cmp	x1, #0x40
   8e238:	54000149 	b.ls	8e260 <CleanDataCacheRange+0x30>  // b.plast
   8e23c:	d1010421 	sub	x1, x1, #0x41
   8e240:	91010000 	add	x0, x0, #0x40
   8e244:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   8e248:	8b000021 	add	x1, x1, x0
   8e24c:	d503201f 	nop
   8e250:	d50b7a20 	dc	cvac, x0
   8e254:	eb01001f 	cmp	x0, x1
   8e258:	91010000 	add	x0, x0, #0x40
   8e25c:	54ffffa1 	b.ne	8e250 <CleanDataCacheRange+0x20>  // b.any
   8e260:	d5033f9f 	dsb	sy
   8e264:	d65f03c0 	ret
   8e268:	d503201f 	nop
   8e26c:	d503201f 	nop

000000000008e270 <CleanAndInvalidateDataCacheRange>:
   8e270:	d50b7e20 	dc	civac, x0
   8e274:	f101003f 	cmp	x1, #0x40
   8e278:	54000149 	b.ls	8e2a0 <CleanAndInvalidateDataCacheRange+0x30>  // b.plast
   8e27c:	d1010421 	sub	x1, x1, #0x41
   8e280:	91010000 	add	x0, x0, #0x40
   8e284:	927ae421 	and	x1, x1, #0xffffffffffffffc0
   8e288:	8b000021 	add	x1, x1, x0
   8e28c:	d503201f 	nop
   8e290:	d50b7e20 	dc	civac, x0
   8e294:	eb01001f 	cmp	x0, x1
   8e298:	91010000 	add	x0, x0, #0x40
   8e29c:	54ffffa1 	b.ne	8e290 <CleanAndInvalidateDataCacheRange+0x20>  // b.any
   8e2a0:	d5033f9f 	dsb	sy
   8e2a4:	d65f03c0 	ret
   8e2a8:	d503201f 	nop
   8e2ac:	d503201f 	nop

000000000008e2b0 <SyncDataAndInstructionCache>:
   8e2b0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e2b4:	910003fd 	mov	x29, sp
   8e2b8:	97ffff7e 	bl	8e0b0 <CleanDataCache>
   8e2bc:	d508751f 	ic	iallu
   8e2c0:	d5033f9f 	dsb	sy
   8e2c4:	d5033fdf 	isb
   8e2c8:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8e2cc:	d65f03c0 	ret

000000000008e2d0 <CTranslationTable::~CTranslationTable()>:
   8e2d0:	f9400400 	ldr	x0, [x0, #8]
   8e2d4:	1400052b 	b	8f780 <pfree>
   8e2d8:	d503201f 	nop
   8e2dc:	d503201f 	nop

000000000008e2e0 <CTranslationTable::GetBaseAddress() const>:
   8e2e0:	f9400400 	ldr	x0, [x0, #8]
   8e2e4:	b4000040 	cbz	x0, 8e2ec <CTranslationTable::GetBaseAddress() const+0xc>
   8e2e8:	d65f03c0 	ret
   8e2ec:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8e2f0:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8e2f4:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e2f8:	91132021 	add	x1, x1, #0x4c8
   8e2fc:	910003fd 	mov	x29, sp
   8e300:	91138000 	add	x0, x0, #0x4e0
   8e304:	52800b62 	mov	w2, #0x5b                  	// #91
   8e308:	94000526 	bl	8f7a0 <assertion_failed>
   8e30c:	d503201f 	nop

000000000008e310 <CTranslationTable::CreateLevel3Table(unsigned long)>:
   8e310:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8e314:	910003fd 	mov	x29, sp
   8e318:	f9000fe0 	str	x0, [sp, #24]
   8e31c:	f9000be1 	str	x1, [sp, #16]
   8e320:	94000514 	bl	8f770 <palloc>
   8e324:	f9001be0 	str	x0, [sp, #48]
   8e328:	f9401be0 	ldr	x0, [sp, #48]
   8e32c:	f100001f 	cmp	x0, #0x0
   8e330:	1a9f07e0 	cset	w0, ne	// ne = any
   8e334:	12001c00 	and	w0, w0, #0xff
   8e338:	92401c00 	and	x0, x0, #0xff
   8e33c:	f100001f 	cmp	x0, #0x0
   8e340:	540000e1 	b.ne	8e35c <CTranslationTable::CreateLevel3Table(unsigned long)+0x4c>  // b.any
   8e344:	52800c42 	mov	w2, #0x62                  	// #98
   8e348:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8e34c:	91132001 	add	x1, x0, #0x4c8
   8e350:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8e354:	9113c000 	add	x0, x0, #0x4f0
   8e358:	94000512 	bl	8f7a0 <assertion_failed>
   8e35c:	b9003fff 	str	wzr, [sp, #60]
   8e360:	1400007e 	b	8e558 <CTranslationTable::CreateLevel3Table(unsigned long)+0x248>
   8e364:	b9403fe0 	ldr	w0, [sp, #60]
   8e368:	d37df000 	lsl	x0, x0, #3
   8e36c:	f9401be1 	ldr	x1, [sp, #48]
   8e370:	8b000020 	add	x0, x1, x0
   8e374:	f90017e0 	str	x0, [sp, #40]
   8e378:	f94017e0 	ldr	x0, [sp, #40]
   8e37c:	39400001 	ldrb	w1, [x0]
   8e380:	32000421 	orr	w1, w1, #0x3
   8e384:	39000001 	strb	w1, [x0]
   8e388:	f94017e0 	ldr	x0, [sp, #40]
   8e38c:	39400001 	ldrb	w1, [x0]
   8e390:	121b7021 	and	w1, w1, #0xffffffe3
   8e394:	39000001 	strb	w1, [x0]
   8e398:	f94017e0 	ldr	x0, [sp, #40]
   8e39c:	39400001 	ldrb	w1, [x0]
   8e3a0:	121a7821 	and	w1, w1, #0xffffffdf
   8e3a4:	39000001 	strb	w1, [x0]
   8e3a8:	f94017e0 	ldr	x0, [sp, #40]
   8e3ac:	39400001 	ldrb	w1, [x0]
   8e3b0:	12001421 	and	w1, w1, #0x3f
   8e3b4:	39000001 	strb	w1, [x0]
   8e3b8:	f94017e0 	ldr	x0, [sp, #40]
   8e3bc:	39400401 	ldrb	w1, [x0, #1]
   8e3c0:	32000421 	orr	w1, w1, #0x3
   8e3c4:	39000401 	strb	w1, [x0, #1]
   8e3c8:	f94017e0 	ldr	x0, [sp, #40]
   8e3cc:	39400401 	ldrb	w1, [x0, #1]
   8e3d0:	321e0021 	orr	w1, w1, #0x4
   8e3d4:	39000401 	strb	w1, [x0, #1]
   8e3d8:	f94017e0 	ldr	x0, [sp, #40]
   8e3dc:	39400401 	ldrb	w1, [x0, #1]
   8e3e0:	121c7821 	and	w1, w1, #0xfffffff7
   8e3e4:	39000401 	strb	w1, [x0, #1]
   8e3e8:	f94017e0 	ldr	x0, [sp, #40]
   8e3ec:	39400401 	ldrb	w1, [x0, #1]
   8e3f0:	12000c21 	and	w1, w1, #0xf
   8e3f4:	39000401 	strb	w1, [x0, #1]
   8e3f8:	f9400be0 	ldr	x0, [sp, #16]
   8e3fc:	d350fc00 	lsr	x0, x0, #16
   8e400:	2a0003e2 	mov	w2, w0
   8e404:	f94017e1 	ldr	x1, [sp, #40]
   8e408:	f9400020 	ldr	x0, [x1]
   8e40c:	b3707c40 	bfi	x0, x2, #16, #32
   8e410:	f9000020 	str	x0, [x1]
   8e414:	f94017e0 	ldr	x0, [sp, #40]
   8e418:	39401801 	ldrb	w1, [x0, #6]
   8e41c:	121c6c21 	and	w1, w1, #0xfffffff0
   8e420:	39001801 	strb	w1, [x0, #6]
   8e424:	f94017e0 	ldr	x0, [sp, #40]
   8e428:	39401801 	ldrb	w1, [x0, #6]
   8e42c:	121b7821 	and	w1, w1, #0xffffffef
   8e430:	39001801 	strb	w1, [x0, #6]
   8e434:	f94017e0 	ldr	x0, [sp, #40]
   8e438:	39401801 	ldrb	w1, [x0, #6]
   8e43c:	121a7821 	and	w1, w1, #0xffffffdf
   8e440:	39001801 	strb	w1, [x0, #6]
   8e444:	f94017e0 	ldr	x0, [sp, #40]
   8e448:	39401801 	ldrb	w1, [x0, #6]
   8e44c:	321a0021 	orr	w1, w1, #0x40
   8e450:	39001801 	strb	w1, [x0, #6]
   8e454:	f94017e0 	ldr	x0, [sp, #40]
   8e458:	39401801 	ldrb	w1, [x0, #6]
   8e45c:	12001821 	and	w1, w1, #0x7f
   8e460:	39001801 	strb	w1, [x0, #6]
   8e464:	39401c01 	ldrb	w1, [x0, #7]
   8e468:	52800002 	mov	w2, #0x0                   	// #0
   8e46c:	0a020021 	and	w1, w1, w2
   8e470:	39001c01 	strb	w1, [x0, #7]
   8e474:	f0000000 	adrp	x0, 91000 <VectorTable>
   8e478:	9133f000 	add	x0, x0, #0xcfc
   8e47c:	f9400be1 	ldr	x1, [sp, #16]
   8e480:	eb00003f 	cmp	x1, x0
   8e484:	540005e3 	b.cc	8e540 <CTranslationTable::CreateLevel3Table(unsigned long)+0x230>  // b.lo, b.ul, b.last
   8e488:	f94017e0 	ldr	x0, [sp, #40]
   8e48c:	39401801 	ldrb	w1, [x0, #6]
   8e490:	321b0021 	orr	w1, w1, #0x20
   8e494:	39001801 	strb	w1, [x0, #6]
   8e498:	f9400fe0 	ldr	x0, [sp, #24]
   8e49c:	f9400000 	ldr	x0, [x0]
   8e4a0:	f9400be1 	ldr	x1, [sp, #16]
   8e4a4:	eb00003f 	cmp	x1, x0
   8e4a8:	540000a3 	b.cc	8e4bc <CTranslationTable::CreateLevel3Table(unsigned long)+0x1ac>  // b.lo, b.ul, b.last
   8e4ac:	f9400be1 	ldr	x1, [sp, #16]
   8e4b0:	b24077e0 	mov	x0, #0x3fffffff            	// #1073741823
   8e4b4:	eb00003f 	cmp	x1, x0
   8e4b8:	540000a9 	b.ls	8e4cc <CTranslationTable::CreateLevel3Table(unsigned long)+0x1bc>  // b.plast
   8e4bc:	f9400be1 	ldr	x1, [sp, #16]
   8e4c0:	12a80000 	mov	w0, #0xbfffffff            	// #-1073741825
   8e4c4:	eb00003f 	cmp	x1, x0
   8e4c8:	54000189 	b.ls	8e4f8 <CTranslationTable::CreateLevel3Table(unsigned long)+0x1e8>  // b.plast
   8e4cc:	f94017e1 	ldr	x1, [sp, #40]
   8e4d0:	b9400020 	ldr	w0, [x1]
   8e4d4:	52800022 	mov	w2, #0x1                   	// #1
   8e4d8:	331e0840 	bfi	w0, w2, #2, #3
   8e4dc:	b9000020 	str	w0, [x1]
   8e4e0:	f94017e1 	ldr	x1, [sp, #40]
   8e4e4:	b9400020 	ldr	w0, [x1]
   8e4e8:	52800042 	mov	w2, #0x2                   	// #2
   8e4ec:	33180440 	bfi	w0, w2, #8, #2
   8e4f0:	b9000020 	str	w0, [x1]
   8e4f4:	14000013 	b	8e540 <CTranslationTable::CreateLevel3Table(unsigned long)+0x230>
   8e4f8:	f9400be1 	ldr	x1, [sp, #16]
   8e4fc:	12bff600 	mov	w0, #0x4fffff              	// #5242879
   8e500:	eb00003f 	cmp	x1, x0
   8e504:	540001e9 	b.ls	8e540 <CTranslationTable::CreateLevel3Table(unsigned long)+0x230>  // b.plast
   8e508:	f9400be1 	ldr	x1, [sp, #16]
   8e50c:	12bfee00 	mov	w0, #0x8fffff              	// #9437183
   8e510:	eb00003f 	cmp	x1, x0
   8e514:	54000168 	b.hi	8e540 <CTranslationTable::CreateLevel3Table(unsigned long)+0x230>  // b.pmore
   8e518:	f94017e1 	ldr	x1, [sp, #40]
   8e51c:	b9400020 	ldr	w0, [x1]
   8e520:	52800042 	mov	w2, #0x2                   	// #2
   8e524:	331e0840 	bfi	w0, w2, #2, #3
   8e528:	b9000020 	str	w0, [x1]
   8e52c:	f94017e1 	ldr	x1, [sp, #40]
   8e530:	b9400020 	ldr	w0, [x1]
   8e534:	52800042 	mov	w2, #0x2                   	// #2
   8e538:	33180440 	bfi	w0, w2, #8, #2
   8e53c:	b9000020 	str	w0, [x1]
   8e540:	f9400be0 	ldr	x0, [sp, #16]
   8e544:	91404000 	add	x0, x0, #0x10, lsl #12
   8e548:	f9000be0 	str	x0, [sp, #16]
   8e54c:	b9403fe0 	ldr	w0, [sp, #60]
   8e550:	11000400 	add	w0, w0, #0x1
   8e554:	b9003fe0 	str	w0, [sp, #60]
   8e558:	b9403fe1 	ldr	w1, [sp, #60]
   8e55c:	5283ffe0 	mov	w0, #0x1fff                	// #8191
   8e560:	6b00003f 	cmp	w1, w0
   8e564:	54fff009 	b.ls	8e364 <CTranslationTable::CreateLevel3Table(unsigned long)+0x54>  // b.plast
   8e568:	f9401be0 	ldr	x0, [sp, #48]
   8e56c:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8e570:	d65f03c0 	ret
   8e574:	d503201f 	nop
   8e578:	d503201f 	nop
   8e57c:	d503201f 	nop

000000000008e580 <CTranslationTable::CTranslationTable(unsigned long)>:
   8e580:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8e584:	910003fd 	mov	x29, sp
   8e588:	f9000fe0 	str	x0, [sp, #24]
   8e58c:	f9000be1 	str	x1, [sp, #16]
   8e590:	f9400fe0 	ldr	x0, [sp, #24]
   8e594:	f9400be1 	ldr	x1, [sp, #16]
   8e598:	f9000001 	str	x1, [x0]
   8e59c:	f9400fe0 	ldr	x0, [sp, #24]
   8e5a0:	f900041f 	str	xzr, [x0, #8]
   8e5a4:	94000473 	bl	8f770 <palloc>
   8e5a8:	aa0003e1 	mov	x1, x0
   8e5ac:	f9400fe0 	ldr	x0, [sp, #24]
   8e5b0:	f9000401 	str	x1, [x0, #8]
   8e5b4:	f9400fe0 	ldr	x0, [sp, #24]
   8e5b8:	f9400400 	ldr	x0, [x0, #8]
   8e5bc:	f100001f 	cmp	x0, #0x0
   8e5c0:	1a9f07e0 	cset	w0, ne	// ne = any
   8e5c4:	12001c00 	and	w0, w0, #0xff
   8e5c8:	92401c00 	and	x0, x0, #0xff
   8e5cc:	f100001f 	cmp	x0, #0x0
   8e5d0:	540000e1 	b.ne	8e5ec <CTranslationTable::CTranslationTable(unsigned long)+0x6c>  // b.any
   8e5d4:	528005e2 	mov	w2, #0x2f                  	// #47
   8e5d8:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8e5dc:	91132001 	add	x1, x0, #0x4c8
   8e5e0:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8e5e4:	91138000 	add	x0, x0, #0x4e0
   8e5e8:	9400046e 	bl	8f7a0 <assertion_failed>
   8e5ec:	f9400fe0 	ldr	x0, [sp, #24]
   8e5f0:	f9400400 	ldr	x0, [x0, #8]
   8e5f4:	d2a00022 	mov	x2, #0x10000               	// #65536
   8e5f8:	52800001 	mov	w1, #0x0                   	// #0
   8e5fc:	97fffaa3 	bl	8d088 <memset>
   8e600:	b9003fff 	str	wzr, [sp, #60]
   8e604:	1400005b 	b	8e770 <CTranslationTable::CTranslationTable(unsigned long)+0x1f0>
   8e608:	b9403fe0 	ldr	w0, [sp, #60]
   8e60c:	d3638800 	lsl	x0, x0, #29
   8e610:	f9001be0 	str	x0, [sp, #48]
   8e614:	f9401be1 	ldr	x1, [sp, #48]
   8e618:	b2407fe0 	mov	x0, #0xffffffff            	// #4294967295
   8e61c:	eb00003f 	cmp	x1, x0
   8e620:	54000149 	b.ls	8e648 <CTranslationTable::CTranslationTable(unsigned long)+0xc8>  // b.plast
   8e624:	f9401be1 	ldr	x1, [sp, #48]
   8e628:	d2c000c0 	mov	x0, #0x600000000           	// #25769803776
   8e62c:	eb00003f 	cmp	x1, x0
   8e630:	54000983 	b.cc	8e760 <CTranslationTable::CTranslationTable(unsigned long)+0x1e0>  // b.lo, b.ul, b.last
   8e634:	f9401be1 	ldr	x1, [sp, #48]
   8e638:	b24067e0 	mov	x0, #0x3ffffff             	// #67108863
   8e63c:	f2c000c0 	movk	x0, #0x6, lsl #32
   8e640:	eb00003f 	cmp	x1, x0
   8e644:	540008e8 	b.hi	8e760 <CTranslationTable::CTranslationTable(unsigned long)+0x1e0>  // b.pmore
   8e648:	f9401be1 	ldr	x1, [sp, #48]
   8e64c:	f9400fe0 	ldr	x0, [sp, #24]
   8e650:	97ffff30 	bl	8e310 <CTranslationTable::CreateLevel3Table(unsigned long)>
   8e654:	f90017e0 	str	x0, [sp, #40]
   8e658:	f94017e0 	ldr	x0, [sp, #40]
   8e65c:	f100001f 	cmp	x0, #0x0
   8e660:	1a9f07e0 	cset	w0, ne	// ne = any
   8e664:	12001c00 	and	w0, w0, #0xff
   8e668:	92401c00 	and	x0, x0, #0xff
   8e66c:	f100001f 	cmp	x0, #0x0
   8e670:	540000e1 	b.ne	8e68c <CTranslationTable::CTranslationTable(unsigned long)+0x10c>  // b.any
   8e674:	52800822 	mov	w2, #0x41                  	// #65
   8e678:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8e67c:	91132001 	add	x1, x0, #0x4c8
   8e680:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8e684:	9113c000 	add	x0, x0, #0x4f0
   8e688:	94000446 	bl	8f7a0 <assertion_failed>
   8e68c:	f9400fe0 	ldr	x0, [sp, #24]
   8e690:	f9400401 	ldr	x1, [x0, #8]
   8e694:	b9403fe0 	ldr	w0, [sp, #60]
   8e698:	d37df000 	lsl	x0, x0, #3
   8e69c:	8b000020 	add	x0, x1, x0
   8e6a0:	f90013e0 	str	x0, [sp, #32]
   8e6a4:	f94013e0 	ldr	x0, [sp, #32]
   8e6a8:	39400001 	ldrb	w1, [x0]
   8e6ac:	32000421 	orr	w1, w1, #0x3
   8e6b0:	39000001 	strb	w1, [x0]
   8e6b4:	f94013e0 	ldr	x0, [sp, #32]
   8e6b8:	39400001 	ldrb	w1, [x0]
   8e6bc:	12000421 	and	w1, w1, #0x3
   8e6c0:	39000001 	strb	w1, [x0]
   8e6c4:	39400401 	ldrb	w1, [x0, #1]
   8e6c8:	52800002 	mov	w2, #0x0                   	// #0
   8e6cc:	0a020021 	and	w1, w1, w2
   8e6d0:	39000401 	strb	w1, [x0, #1]
   8e6d4:	f94017e0 	ldr	x0, [sp, #40]
   8e6d8:	d350fc00 	lsr	x0, x0, #16
   8e6dc:	2a0003e2 	mov	w2, w0
   8e6e0:	f94013e1 	ldr	x1, [sp, #32]
   8e6e4:	f9400020 	ldr	x0, [x1]
   8e6e8:	b3707c40 	bfi	x0, x2, #16, #32
   8e6ec:	f9000020 	str	x0, [x1]
   8e6f0:	f94013e0 	ldr	x0, [sp, #32]
   8e6f4:	39401801 	ldrb	w1, [x0, #6]
   8e6f8:	121c6c21 	and	w1, w1, #0xfffffff0
   8e6fc:	39001801 	strb	w1, [x0, #6]
   8e700:	f94013e0 	ldr	x0, [sp, #32]
   8e704:	39401801 	ldrb	w1, [x0, #6]
   8e708:	12000c21 	and	w1, w1, #0xf
   8e70c:	39001801 	strb	w1, [x0, #6]
   8e710:	39401c01 	ldrb	w1, [x0, #7]
   8e714:	121d7021 	and	w1, w1, #0xfffffff8
   8e718:	39001c01 	strb	w1, [x0, #7]
   8e71c:	f94013e0 	ldr	x0, [sp, #32]
   8e720:	39401c01 	ldrb	w1, [x0, #7]
   8e724:	121c7821 	and	w1, w1, #0xfffffff7
   8e728:	39001c01 	strb	w1, [x0, #7]
   8e72c:	f94013e0 	ldr	x0, [sp, #32]
   8e730:	39401c01 	ldrb	w1, [x0, #7]
   8e734:	121b7821 	and	w1, w1, #0xffffffef
   8e738:	39001c01 	strb	w1, [x0, #7]
   8e73c:	f94013e0 	ldr	x0, [sp, #32]
   8e740:	39401c01 	ldrb	w1, [x0, #7]
   8e744:	12197421 	and	w1, w1, #0xffffff9f
   8e748:	39001c01 	strb	w1, [x0, #7]
   8e74c:	f94013e0 	ldr	x0, [sp, #32]
   8e750:	39401c01 	ldrb	w1, [x0, #7]
   8e754:	12001821 	and	w1, w1, #0x7f
   8e758:	39001c01 	strb	w1, [x0, #7]
   8e75c:	14000002 	b	8e764 <CTranslationTable::CTranslationTable(unsigned long)+0x1e4>
   8e760:	d503201f 	nop
   8e764:	b9403fe0 	ldr	w0, [sp, #60]
   8e768:	11000400 	add	w0, w0, #0x1
   8e76c:	b9003fe0 	str	w0, [sp, #60]
   8e770:	b9403fe0 	ldr	w0, [sp, #60]
   8e774:	7101fc1f 	cmp	w0, #0x7f
   8e778:	54fff489 	b.ls	8e608 <CTranslationTable::CTranslationTable(unsigned long)+0x88>  // b.plast
   8e77c:	d5033f9f 	dsb	sy
   8e780:	d503201f 	nop
   8e784:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8e788:	d65f03c0 	ret
   8e78c:	00000000 	udf	#0

000000000008e790 <CInterruptSystem::CInterruptSystem()>:
   8e790:	aa0003e1 	mov	x1, x0
   8e794:	91200002 	add	x2, x0, #0x800
   8e798:	91002021 	add	x1, x1, #0x8
   8e79c:	f81f803f 	stur	xzr, [x1, #-8]
   8e7a0:	f903fc3f 	str	xzr, [x1, #2040]
   8e7a4:	eb02003f 	cmp	x1, x2
   8e7a8:	54ffff81 	b.ne	8e798 <CInterruptSystem::CInterruptSystem()+0x8>  // b.any
   8e7ac:	90000121 	adrp	x1, b2000 <appendBuf+0xa0>
   8e7b0:	f9027020 	str	x0, [x1, #1248]
   8e7b4:	d65f03c0 	ret
   8e7b8:	d503201f 	nop
   8e7bc:	d503201f 	nop

000000000008e7c0 <CInterruptSystem::~CInterruptSystem()>:
   8e7c0:	d50342df 	msr	daifset, #0x2
   8e7c4:	d2820001 	mov	x1, #0x1000                	// #4096
   8e7c8:	f2bff081 	movk	x1, #0xff84, lsl #16
   8e7cc:	90000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8e7d0:	b900003f 	str	wzr, [x1]
   8e7d4:	f902701f 	str	xzr, [x0, #1248]
   8e7d8:	d65f03c0 	ret
   8e7dc:	d503201f 	nop

000000000008e7e0 <CInterruptSystem::Initialize()>:
   8e7e0:	d2a000e0 	mov	x0, #0x70000               	// #458752
   8e7e4:	f0000005 	adrp	x5, 91000 <VectorTable>
   8e7e8:	911e10a5 	add	x5, x5, #0x784
   8e7ec:	f0000006 	adrp	x6, 91000 <VectorTable>
   8e7f0:	912a20c6 	add	x6, x6, #0xa88
   8e7f4:	d2800001 	mov	x1, #0x0                   	// #0
   8e7f8:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8e7fc:	52a28004 	mov	w4, #0x14000000            	// #335544320
   8e800:	910003fd 	mov	x29, sp
   8e804:	f9000fe0 	str	x0, [sp, #24]
   8e808:	f100203f 	cmp	x1, #0x8
   8e80c:	540006a0 	b.eq	8e8e0 <CInterruptSystem::Initialize()+0x100>  // b.none
   8e810:	f9400fe0 	ldr	x0, [sp, #24]
   8e814:	d3797c22 	ubfiz	x2, x1, #7, #32
   8e818:	f9400fe3 	ldr	x3, [sp, #24]
   8e81c:	8b011c00 	add	x0, x0, x1, lsl #7
   8e820:	91000421 	add	x1, x1, #0x1
   8e824:	f100403f 	cmp	x1, #0x10
   8e828:	cb0000a0 	sub	x0, x5, x0
   8e82c:	9342fc00 	asr	x0, x0, #2
   8e830:	2a040000 	orr	w0, w0, w4
   8e834:	b8226860 	str	w0, [x3, x2]
   8e838:	54fffe81 	b.ne	8e808 <CInterruptSystem::Initialize()+0x28>  // b.any
   8e83c:	97fffe9d 	bl	8e2b0 <SyncDataAndInstructionCache>
   8e840:	d2820003 	mov	x3, #0x1000                	// #4096
   8e844:	f2bff083 	movk	x3, #0xff84, lsl #16
   8e848:	12800000 	mov	w0, #0xffffffff            	// #-1
   8e84c:	91060061 	add	x1, x3, #0x180
   8e850:	91068062 	add	x2, x3, #0x1a0
   8e854:	b900007f 	str	wzr, [x3]
   8e858:	b9000020 	str	w0, [x1]
   8e85c:	91001021 	add	x1, x1, #0x4
   8e860:	b900fc20 	str	w0, [x1, #252]
   8e864:	b901fc20 	str	w0, [x1, #508]
   8e868:	eb02003f 	cmp	x1, x2
   8e86c:	54ffff61 	b.ne	8e858 <CInterruptSystem::Initialize()+0x78>  // b.any
   8e870:	91098020 	add	x0, x1, #0x260
   8e874:	52941403 	mov	w3, #0xa0a0                	// #41120
   8e878:	72b41403 	movk	w3, #0xa0a0, lsl #16
   8e87c:	910d8021 	add	x1, x1, #0x360
   8e880:	3200c3e2 	mov	w2, #0x1010101             	// #16843009
   8e884:	d503201f 	nop
   8e888:	b9000003 	str	w3, [x0]
   8e88c:	91001000 	add	x0, x0, #0x4
   8e890:	b903fc02 	str	w2, [x0, #1020]
   8e894:	eb01001f 	cmp	x0, x1
   8e898:	54ffff81 	b.ne	8e888 <CInterruptSystem::Initialize()+0xa8>  // b.any
   8e89c:	911c0001 	add	x1, x0, #0x700
   8e8a0:	911d0000 	add	x0, x0, #0x740
   8e8a4:	d503201f 	nop
   8e8a8:	b800443f 	str	wzr, [x1], #4
   8e8ac:	eb00003f 	cmp	x1, x0
   8e8b0:	54ffffc1 	b.ne	8e8a8 <CInterruptSystem::Initialize()+0xc8>  // b.any
   8e8b4:	d1310021 	sub	x1, x1, #0xc40
   8e8b8:	52800020 	mov	w0, #0x1                   	// #1
   8e8bc:	52801e03 	mov	w3, #0xf0                  	// #240
   8e8c0:	d2840082 	mov	x2, #0x2004                	// #8196
   8e8c4:	f2bff082 	movk	x2, #0xff84, lsl #16
   8e8c8:	b9000020 	str	w0, [x1]
   8e8cc:	b9000043 	str	w3, [x2]
   8e8d0:	b9100020 	str	w0, [x1, #4096]
   8e8d4:	d50342ff 	msr	daifclr, #0x2
   8e8d8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8e8dc:	d65f03c0 	ret
   8e8e0:	f9400fe0 	ldr	x0, [sp, #24]
   8e8e4:	d2800121 	mov	x1, #0x9                   	// #9
   8e8e8:	f9400fe2 	ldr	x2, [sp, #24]
   8e8ec:	91100000 	add	x0, x0, #0x400
   8e8f0:	cb0000c0 	sub	x0, x6, x0
   8e8f4:	9342fc00 	asr	x0, x0, #2
   8e8f8:	2a040000 	orr	w0, w0, w4
   8e8fc:	b9040040 	str	w0, [x2, #1024]
   8e900:	17ffffc4 	b	8e810 <CInterruptSystem::Initialize()+0x30>
   8e904:	d503201f 	nop
   8e908:	d503201f 	nop
   8e90c:	d503201f 	nop

000000000008e910 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   8e910:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e914:	7103fc3f 	cmp	w1, #0xff
   8e918:	910003fd 	mov	x29, sp
   8e91c:	54000208 	b.hi	8e95c <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x4c>  // b.pmore
   8e920:	2a0103e6 	mov	w6, w1
   8e924:	8b214c07 	add	x7, x0, w1, uxtw #3
   8e928:	f8667804 	ldr	x4, [x0, x6, lsl #3]
   8e92c:	b5000244 	cbnz	x4, 8e974 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x64>
   8e930:	52808804 	mov	w4, #0x440                 	// #1088
   8e934:	72a7fc24 	movk	w4, #0x3fe1, lsl #16
   8e938:	f8267802 	str	x2, [x0, x6, lsl #3]
   8e93c:	0b411480 	add	w0, w4, w1, lsr #5
   8e940:	52800025 	mov	w5, #0x1                   	// #1
   8e944:	f90400e3 	str	x3, [x7, #2048]
   8e948:	1ac120a1 	lsl	w1, w5, w1
   8e94c:	531e7400 	lsl	w0, w0, #2
   8e950:	b9000001 	str	w1, [x0]
   8e954:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8e958:	d65f03c0 	ret
   8e95c:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8e960:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8e964:	91140021 	add	x1, x1, #0x500
   8e968:	91146000 	add	x0, x0, #0x518
   8e96c:	52801642 	mov	w2, #0xb2                  	// #178
   8e970:	9400038c 	bl	8f7a0 <assertion_failed>
   8e974:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8e978:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8e97c:	91140021 	add	x1, x1, #0x500
   8e980:	9114c000 	add	x0, x0, #0x530
   8e984:	52801662 	mov	w2, #0xb3                  	// #179
   8e988:	94000386 	bl	8f7a0 <assertion_failed>
   8e98c:	d503201f 	nop

000000000008e990 <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   8e990:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8e994:	7103fc3f 	cmp	w1, #0xff
   8e998:	910003fd 	mov	x29, sp
   8e99c:	54000208 	b.hi	8e9dc <CInterruptSystem::DisconnectIRQ(unsigned int)+0x4c>  // b.pmore
   8e9a0:	2a0103e4 	mov	w4, w1
   8e9a4:	8b214c05 	add	x5, x0, w1, uxtw #3
   8e9a8:	f8647802 	ldr	x2, [x0, x4, lsl #3]
   8e9ac:	b4000242 	cbz	x2, 8e9f4 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x64>
   8e9b0:	52808c02 	mov	w2, #0x460                 	// #1120
   8e9b4:	72a7fc22 	movk	w2, #0x3fe1, lsl #16
   8e9b8:	0b411442 	add	w2, w2, w1, lsr #5
   8e9bc:	52800023 	mov	w3, #0x1                   	// #1
   8e9c0:	1ac12063 	lsl	w3, w3, w1
   8e9c4:	531e7441 	lsl	w1, w2, #2
   8e9c8:	b9000023 	str	w3, [x1]
   8e9cc:	f824781f 	str	xzr, [x0, x4, lsl #3]
   8e9d0:	f90400bf 	str	xzr, [x5, #2048]
   8e9d4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8e9d8:	d65f03c0 	ret
   8e9dc:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8e9e0:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8e9e4:	91140021 	add	x1, x1, #0x500
   8e9e8:	91146000 	add	x0, x0, #0x518
   8e9ec:	528017a2 	mov	w2, #0xbd                  	// #189
   8e9f0:	9400036c 	bl	8f7a0 <assertion_failed>
   8e9f4:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8e9f8:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8e9fc:	91140021 	add	x1, x1, #0x500
   8ea00:	91154000 	add	x0, x0, #0x550
   8ea04:	528017c2 	mov	w2, #0xbe                  	// #190
   8ea08:	94000366 	bl	8f7a0 <assertion_failed>
   8ea0c:	d503201f 	nop

000000000008ea10 <CInterruptSystem::DisconnectFIQ()>:
   8ea10:	b0000102 	adrp	x2, af000 <_binary_src_fith_rc_5_start+0xdb35>
   8ea14:	9108a042 	add	x2, x2, #0x228
   8ea18:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ea1c:	910003fd 	mov	x29, sp
   8ea20:	f9400040 	ldr	x0, [x2]
   8ea24:	b4000280 	cbz	x0, 8ea74 <CInterruptSystem::DisconnectFIQ()+0x64>
   8ea28:	d2801a81 	mov	x1, #0xd4                  	// #212
   8ea2c:	528928c0 	mov	w0, #0x4946                	// #18758
   8ea30:	72aa6a20 	movk	w0, #0x5351, lsl #16
   8ea34:	f9000fe1 	str	x1, [sp, #24]
   8ea38:	f9400fe1 	ldr	x1, [sp, #24]
   8ea3c:	b9400021 	ldr	w1, [x1]
   8ea40:	6b00003f 	cmp	w1, w0
   8ea44:	54000121 	b.ne	8ea68 <CInterruptSystem::DisconnectFIQ()+0x58>  // b.any
   8ea48:	b9401040 	ldr	w0, [x2, #16]
   8ea4c:	340000e0 	cbz	w0, 8ea68 <CInterruptSystem::DisconnectFIQ()+0x58>
   8ea50:	2a0003e3 	mov	w3, w0
   8ea54:	d2800024 	mov	x4, #0x1                   	// #1
   8ea58:	aa0403e0 	mov	x0, x4
   8ea5c:	aa0303e1 	mov	x1, x3
   8ea60:	d4000003 	smc	#0x0
   8ea64:	b900105f 	str	wzr, [x2, #16]
   8ea68:	a9007c5f 	stp	xzr, xzr, [x2]
   8ea6c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ea70:	d65f03c0 	ret
   8ea74:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ea78:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ea7c:	91140021 	add	x1, x1, #0x500
   8ea80:	9115c000 	add	x0, x0, #0x570
   8ea84:	52801a82 	mov	w2, #0xd4                  	// #212
   8ea88:	94000346 	bl	8f7a0 <assertion_failed>
   8ea8c:	d503201f 	nop

000000000008ea90 <CInterruptSystem::EnableIRQ(unsigned int)>:
   8ea90:	7103fc1f 	cmp	w0, #0xff
   8ea94:	54000128 	b.hi	8eab8 <CInterruptSystem::EnableIRQ(unsigned int)+0x28>  // b.pmore
   8ea98:	52808801 	mov	w1, #0x440                 	// #1088
   8ea9c:	72a7fc21 	movk	w1, #0x3fe1, lsl #16
   8eaa0:	0b401421 	add	w1, w1, w0, lsr #5
   8eaa4:	52800022 	mov	w2, #0x1                   	// #1
   8eaa8:	1ac02042 	lsl	w2, w2, w0
   8eaac:	531e7420 	lsl	w0, w1, #2
   8eab0:	b9000002 	str	w2, [x0]
   8eab4:	d65f03c0 	ret
   8eab8:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8eabc:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8eac0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8eac4:	91140021 	add	x1, x1, #0x500
   8eac8:	910003fd 	mov	x29, sp
   8eacc:	91146000 	add	x0, x0, #0x518
   8ead0:	52801bc2 	mov	w2, #0xde                  	// #222
   8ead4:	94000333 	bl	8f7a0 <assertion_failed>
   8ead8:	d503201f 	nop
   8eadc:	d503201f 	nop

000000000008eae0 <CInterruptSystem::DisableIRQ(unsigned int)>:
   8eae0:	7103fc1f 	cmp	w0, #0xff
   8eae4:	54000128 	b.hi	8eb08 <CInterruptSystem::DisableIRQ(unsigned int)+0x28>  // b.pmore
   8eae8:	52808c01 	mov	w1, #0x460                 	// #1120
   8eaec:	72a7fc21 	movk	w1, #0x3fe1, lsl #16
   8eaf0:	0b401421 	add	w1, w1, w0, lsr #5
   8eaf4:	52800022 	mov	w2, #0x1                   	// #1
   8eaf8:	1ac02042 	lsl	w2, w2, w0
   8eafc:	531e7420 	lsl	w0, w1, #2
   8eb00:	b9000002 	str	w2, [x0]
   8eb04:	d65f03c0 	ret
   8eb08:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8eb0c:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8eb10:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8eb14:	91140021 	add	x1, x1, #0x500
   8eb18:	910003fd 	mov	x29, sp
   8eb1c:	91146000 	add	x0, x0, #0x518
   8eb20:	52801ca2 	mov	w2, #0xe5                  	// #229
   8eb24:	9400031f 	bl	8f7a0 <assertion_failed>
   8eb28:	d503201f 	nop
   8eb2c:	d503201f 	nop

000000000008eb30 <CInterruptSystem::EnableFIQ(unsigned int)>:
   8eb30:	d2801a82 	mov	x2, #0xd4                  	// #212
   8eb34:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8eb38:	910003fd 	mov	x29, sp
   8eb3c:	528928c1 	mov	w1, #0x4946                	// #18758
   8eb40:	72aa6a21 	movk	w1, #0x5351, lsl #16
   8eb44:	f9000bf3 	str	x19, [sp, #16]
   8eb48:	2a0003f3 	mov	w19, w0
   8eb4c:	f90017e2 	str	x2, [sp, #40]
   8eb50:	f94017e0 	ldr	x0, [sp, #40]
   8eb54:	b9400000 	ldr	w0, [x0]
   8eb58:	6b01001f 	cmp	w0, w1
   8eb5c:	54000100 	b.eq	8eb7c <CInterruptSystem::EnableFIQ(unsigned int)+0x4c>  // b.none
   8eb60:	97ffe454 	bl	87cb0 <CLogger::Get()>
   8eb64:	b0000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8eb68:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8eb6c:	91162063 	add	x3, x3, #0x588
   8eb70:	9116c021 	add	x1, x1, #0x5b0
   8eb74:	52800002 	mov	w2, #0x0                   	// #0
   8eb78:	97ffe632 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8eb7c:	71003e7f 	cmp	w19, #0xf
   8eb80:	540001c9 	b.ls	8ebb8 <CInterruptSystem::EnableFIQ(unsigned int)+0x88>  // b.plast
   8eb84:	7103fe7f 	cmp	w19, #0xff
   8eb88:	54000248 	b.hi	8ebd0 <CInterruptSystem::EnableFIQ(unsigned int)+0xa0>  // b.pmore
   8eb8c:	b0000100 	adrp	x0, af000 <_binary_src_fith_rc_5_start+0xdb35>
   8eb90:	9108a000 	add	x0, x0, #0x228
   8eb94:	2a1303e3 	mov	w3, w19
   8eb98:	d2800002 	mov	x2, #0x0                   	// #0
   8eb9c:	b9001013 	str	w19, [x0, #16]
   8eba0:	aa0203e0 	mov	x0, x2
   8eba4:	aa0303e1 	mov	x1, x3
   8eba8:	d4000003 	smc	#0x0
   8ebac:	f9400bf3 	ldr	x19, [sp, #16]
   8ebb0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8ebb4:	d65f03c0 	ret
   8ebb8:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ebbc:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ebc0:	91140021 	add	x1, x1, #0x500
   8ebc4:	9116e000 	add	x0, x0, #0x5b8
   8ebc8:	52801e82 	mov	w2, #0xf4                  	// #244
   8ebcc:	940002f5 	bl	8f7a0 <assertion_failed>
   8ebd0:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ebd4:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ebd8:	91140021 	add	x1, x1, #0x500
   8ebdc:	91172000 	add	x0, x0, #0x5c8
   8ebe0:	52801ea2 	mov	w2, #0xf5                  	// #245
   8ebe4:	940002ef 	bl	8f7a0 <assertion_failed>
   8ebe8:	d503201f 	nop
   8ebec:	d503201f 	nop

000000000008ebf0 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   8ebf0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8ebf4:	7104003f 	cmp	w1, #0x100
   8ebf8:	910003fd 	mov	x29, sp
   8ebfc:	54000148 	b.hi	8ec24 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x34>  // b.pmore
   8ec00:	b40001e2 	cbz	x2, 8ec3c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x4c>
   8ec04:	2a0103e0 	mov	w0, w1
   8ec08:	b0000101 	adrp	x1, af000 <_binary_src_fith_rc_5_start+0xdb35>
   8ec0c:	9108a021 	add	x1, x1, #0x228
   8ec10:	f9400024 	ldr	x4, [x1]
   8ec14:	b5000204 	cbnz	x4, 8ec54 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x64>
   8ec18:	a9000c22 	stp	x2, x3, [x1]
   8ec1c:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8ec20:	17ffffc4 	b	8eb30 <CInterruptSystem::EnableFIQ(unsigned int)>
   8ec24:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ec28:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ec2c:	91140021 	add	x1, x1, #0x500
   8ec30:	91178000 	add	x0, x0, #0x5e0
   8ec34:	52801902 	mov	w2, #0xc8                  	// #200
   8ec38:	940002da 	bl	8f7a0 <assertion_failed>
   8ec3c:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ec40:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ec44:	91140021 	add	x1, x1, #0x500
   8ec48:	9115e000 	add	x0, x0, #0x578
   8ec4c:	52801922 	mov	w2, #0xc9                  	// #201
   8ec50:	940002d4 	bl	8f7a0 <assertion_failed>
   8ec54:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ec58:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ec5c:	91140021 	add	x1, x1, #0x500
   8ec60:	9117e000 	add	x0, x0, #0x5f8
   8ec64:	52801942 	mov	w2, #0xca                  	// #202
   8ec68:	940002ce 	bl	8f7a0 <assertion_failed>
   8ec6c:	d503201f 	nop

000000000008ec70 <CInterruptSystem::DisableFIQ()>:
   8ec70:	d10043ff 	sub	sp, sp, #0x10
   8ec74:	d2801a81 	mov	x1, #0xd4                  	// #212
   8ec78:	528928c0 	mov	w0, #0x4946                	// #18758
   8ec7c:	72aa6a20 	movk	w0, #0x5351, lsl #16
   8ec80:	f90007e1 	str	x1, [sp, #8]
   8ec84:	f94007e1 	ldr	x1, [sp, #8]
   8ec88:	b9400021 	ldr	w1, [x1]
   8ec8c:	6b00003f 	cmp	w1, w0
   8ec90:	54000161 	b.ne	8ecbc <CInterruptSystem::DisableFIQ()+0x4c>  // b.any
   8ec94:	b0000102 	adrp	x2, af000 <_binary_src_fith_rc_5_start+0xdb35>
   8ec98:	9108a042 	add	x2, x2, #0x228
   8ec9c:	b9401040 	ldr	w0, [x2, #16]
   8eca0:	340000e0 	cbz	w0, 8ecbc <CInterruptSystem::DisableFIQ()+0x4c>
   8eca4:	2a0003e3 	mov	w3, w0
   8eca8:	d2800024 	mov	x4, #0x1                   	// #1
   8ecac:	aa0403e0 	mov	x0, x4
   8ecb0:	aa0303e1 	mov	x1, x3
   8ecb4:	d4000003 	smc	#0x0
   8ecb8:	b900105f 	str	wzr, [x2, #16]
   8ecbc:	910043ff 	add	sp, sp, #0x10
   8ecc0:	d65f03c0 	ret
   8ecc4:	d503201f 	nop
   8ecc8:	d503201f 	nop
   8eccc:	d503201f 	nop

000000000008ecd0 <CInterruptSystem::Get()>:
   8ecd0:	90000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8ecd4:	f9427000 	ldr	x0, [x0, #1248]
   8ecd8:	b4000040 	cbz	x0, 8ece0 <CInterruptSystem::Get()+0x10>
   8ecdc:	d65f03c0 	ret
   8ece0:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ece4:	90000020 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8ece8:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8ecec:	91140021 	add	x1, x1, #0x500
   8ecf0:	910003fd 	mov	x29, sp
   8ecf4:	91052000 	add	x0, x0, #0x148
   8ecf8:	528021e2 	mov	w2, #0x10f                 	// #271
   8ecfc:	940002a9 	bl	8f7a0 <assertion_failed>

000000000008ed00 <CInterruptSystem::CallIRQHandler(unsigned int)>:
   8ed00:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8ed04:	7103fc3f 	cmp	w1, #0xff
   8ed08:	910003fd 	mov	x29, sp
   8ed0c:	54000268 	b.hi	8ed58 <CInterruptSystem::CallIRQHandler(unsigned int)+0x58>  // b.pmore
   8ed10:	f8615802 	ldr	x2, [x0, w1, uxtw #3]
   8ed14:	8b214c00 	add	x0, x0, w1, uxtw #3
   8ed18:	b40000c2 	cbz	x2, 8ed30 <CInterruptSystem::CallIRQHandler(unsigned int)+0x30>
   8ed1c:	f9440000 	ldr	x0, [x0, #2048]
   8ed20:	d63f0040 	blr	x2
   8ed24:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8ed28:	52800020 	mov	w0, #0x1                   	// #1
   8ed2c:	d65f03c0 	ret
   8ed30:	52808c02 	mov	w2, #0x460                 	// #1120
   8ed34:	72a7fc22 	movk	w2, #0x3fe1, lsl #16
   8ed38:	0b411442 	add	w2, w2, w1, lsr #5
   8ed3c:	52800023 	mov	w3, #0x1                   	// #1
   8ed40:	52800000 	mov	w0, #0x0                   	// #0
   8ed44:	1ac12063 	lsl	w3, w3, w1
   8ed48:	531e7441 	lsl	w1, w2, #2
   8ed4c:	b9000023 	str	w3, [x1]
   8ed50:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8ed54:	d65f03c0 	ret
   8ed58:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ed5c:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ed60:	91140021 	add	x1, x1, #0x500
   8ed64:	91146000 	add	x0, x0, #0x518
   8ed68:	528022a2 	mov	w2, #0x115                 	// #277
   8ed6c:	9400028d 	bl	8f7a0 <assertion_failed>

000000000008ed70 <CInterruptSystem::InterruptHandler()>:
   8ed70:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ed74:	d2840180 	mov	x0, #0x200c                	// #8204
   8ed78:	f2bff080 	movk	x0, #0xff84, lsl #16
   8ed7c:	910003fd 	mov	x29, sp
   8ed80:	f9000bf3 	str	x19, [sp, #16]
   8ed84:	b9400013 	ldr	w19, [x0]
   8ed88:	7218067f 	tst	w19, #0x300
   8ed8c:	12002661 	and	w1, w19, #0x3ff
   8ed90:	540001a1 	b.ne	8edc4 <CInterruptSystem::InterruptHandler()+0x54>  // b.any
   8ed94:	721c167f 	tst	w19, #0x3f0
   8ed98:	540000a0 	b.eq	8edac <CInterruptSystem::InterruptHandler()+0x3c>  // b.none
   8ed9c:	90000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8eda0:	f9427000 	ldr	x0, [x0, #1248]
   8eda4:	b4000200 	cbz	x0, 8ede4 <CInterruptSystem::InterruptHandler()+0x74>
   8eda8:	97ffffd6 	bl	8ed00 <CInterruptSystem::CallIRQHandler(unsigned int)>
   8edac:	d2840200 	mov	x0, #0x2010                	// #8208
   8edb0:	f2bff080 	movk	x0, #0xff84, lsl #16
   8edb4:	b9000013 	str	w19, [x0]
   8edb8:	f9400bf3 	ldr	x19, [sp, #16]
   8edbc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8edc0:	d65f03c0 	ret
   8edc4:	710fec3f 	cmp	w1, #0x3fb
   8edc8:	54ffff88 	b.hi	8edb8 <CInterruptSystem::InterruptHandler()+0x48>  // b.pmore
   8edcc:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8edd0:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8edd4:	91140021 	add	x1, x1, #0x500
   8edd8:	91184000 	add	x0, x0, #0x610
   8eddc:	52802842 	mov	w2, #0x142                 	// #322
   8ede0:	94000270 	bl	8f7a0 <assertion_failed>
   8ede4:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ede8:	90000020 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8edec:	91140021 	add	x1, x1, #0x500
   8edf0:	91052000 	add	x0, x0, #0x148
   8edf4:	52802602 	mov	w2, #0x130                 	// #304
   8edf8:	9400026a 	bl	8f7a0 <assertion_failed>
   8edfc:	d503201f 	nop

000000000008ee00 <InterruptHandler>:
   8ee00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ee04:	d2840180 	mov	x0, #0x200c                	// #8204
   8ee08:	f2bff080 	movk	x0, #0xff84, lsl #16
   8ee0c:	910003fd 	mov	x29, sp
   8ee10:	f9000bf3 	str	x19, [sp, #16]
   8ee14:	b9400013 	ldr	w19, [x0]
   8ee18:	7218067f 	tst	w19, #0x300
   8ee1c:	12002661 	and	w1, w19, #0x3ff
   8ee20:	540001a1 	b.ne	8ee54 <InterruptHandler+0x54>  // b.any
   8ee24:	721c167f 	tst	w19, #0x3f0
   8ee28:	540000a0 	b.eq	8ee3c <InterruptHandler+0x3c>  // b.none
   8ee2c:	90000120 	adrp	x0, b2000 <appendBuf+0xa0>
   8ee30:	f9427000 	ldr	x0, [x0, #1248]
   8ee34:	b4000200 	cbz	x0, 8ee74 <InterruptHandler+0x74>
   8ee38:	97ffffb2 	bl	8ed00 <CInterruptSystem::CallIRQHandler(unsigned int)>
   8ee3c:	d2840200 	mov	x0, #0x2010                	// #8208
   8ee40:	f2bff080 	movk	x0, #0xff84, lsl #16
   8ee44:	b9000013 	str	w19, [x0]
   8ee48:	f9400bf3 	ldr	x19, [sp, #16]
   8ee4c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ee50:	d65f03c0 	ret
   8ee54:	710fec3f 	cmp	w1, #0x3fb
   8ee58:	54ffff88 	b.hi	8ee48 <InterruptHandler+0x48>  // b.pmore
   8ee5c:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ee60:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ee64:	91140021 	add	x1, x1, #0x500
   8ee68:	91184000 	add	x0, x0, #0x610
   8ee6c:	52802842 	mov	w2, #0x142                 	// #322
   8ee70:	9400024c 	bl	8f7a0 <assertion_failed>
   8ee74:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ee78:	90000020 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8ee7c:	91140021 	add	x1, x1, #0x500
   8ee80:	91052000 	add	x0, x0, #0x148
   8ee84:	52802602 	mov	w2, #0x130                 	// #304
   8ee88:	94000246 	bl	8f7a0 <assertion_failed>
   8ee8c:	d503201f 	nop

000000000008ee90 <CInterruptSystem::InitializeSecondary()>:
   8ee90:	52801e02 	mov	w2, #0xf0                  	// #240
   8ee94:	d2840080 	mov	x0, #0x2004                	// #8196
   8ee98:	f2bff080 	movk	x0, #0xff84, lsl #16
   8ee9c:	52800021 	mov	w1, #0x1                   	// #1
   8eea0:	b9000002 	str	w2, [x0]
   8eea4:	b81fc001 	stur	w1, [x0, #-4]
   8eea8:	d65f03c0 	ret
   8eeac:	d503201f 	nop

000000000008eeb0 <CInterruptSystem::SendIPI(unsigned int, unsigned int)>:
   8eeb0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8eeb4:	71001c1f 	cmp	w0, #0x7
   8eeb8:	910003fd 	mov	x29, sp
   8eebc:	54000188 	b.hi	8eeec <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x3c>  // b.pmore
   8eec0:	71003c3f 	cmp	w1, #0xf
   8eec4:	54000208 	b.hi	8ef04 <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x54>  // b.pmore
   8eec8:	52800022 	mov	w2, #0x1                   	// #1
   8eecc:	11004000 	add	w0, w0, #0x10
   8eed0:	1ac02040 	lsl	w0, w2, w0
   8eed4:	d283e002 	mov	x2, #0x1f00                	// #7936
   8eed8:	f2bff082 	movk	x2, #0xff84, lsl #16
   8eedc:	2a010001 	orr	w1, w0, w1
   8eee0:	b9000041 	str	w1, [x2]
   8eee4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8eee8:	d65f03c0 	ret
   8eeec:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8eef0:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8eef4:	91140021 	add	x1, x1, #0x500
   8eef8:	91188000 	add	x0, x0, #0x620
   8eefc:	52802aa2 	mov	w2, #0x155                 	// #341
   8ef00:	94000228 	bl	8f7a0 <assertion_failed>
   8ef04:	b0000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ef08:	b0000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ef0c:	91140021 	add	x1, x1, #0x500
   8ef10:	9118c000 	add	x0, x0, #0x630
   8ef14:	52802ac2 	mov	w2, #0x156                 	// #342
   8ef18:	94000222 	bl	8f7a0 <assertion_failed>
   8ef1c:	d503201f 	nop

000000000008ef20 <CInterruptSystem::CallSecureMonitor(unsigned int, unsigned int)>:
   8ef20:	2a0003e2 	mov	w2, w0
   8ef24:	2a0103e3 	mov	w3, w1
   8ef28:	aa0203e0 	mov	x0, x2
   8ef2c:	aa0303e1 	mov	x1, x3
   8ef30:	d4000003 	smc	#0x0
   8ef34:	d65f03c0 	ret
   8ef38:	d503201f 	nop
   8ef3c:	d503201f 	nop

000000000008ef40 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)>:
   8ef40:	53057c22 	lsr	w2, w1, #5
   8ef44:	121e7424 	and	w4, w1, #0xfffffffc
   8ef48:	531d0425 	ubfiz	w5, w1, #3, #2
   8ef4c:	52828007 	mov	w7, #0x1400                	// #5120
   8ef50:	72bff087 	movk	w7, #0xff84, lsl #16
   8ef54:	52800026 	mov	w6, #0x1                   	// #1
   8ef58:	52801fe3 	mov	w3, #0xff                  	// #255
   8ef5c:	531e7442 	lsl	w2, w2, #2
   8ef60:	0b070084 	add	w4, w4, w7
   8ef64:	1ac120c1 	lsl	w1, w6, w1
   8ef68:	1ac52063 	lsl	w3, w3, w5
   8ef6c:	350002c0 	cbnz	w0, 8efc4 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)+0x84>
   8ef70:	d2820006 	mov	x6, #0x1000                	// #4096
   8ef74:	f2bff086 	movk	x6, #0xff84, lsl #16
   8ef78:	52800068 	mov	w8, #0x3                   	// #3
   8ef7c:	52800167 	mov	w7, #0xb                   	// #11
   8ef80:	515ef840 	sub	w0, w2, #0x7be, lsl #12
   8ef84:	515ef842 	sub	w2, w2, #0x7be, lsl #12
   8ef88:	513e0000 	sub	w0, w0, #0xf80
   8ef8c:	b90000c8 	str	w8, [x6]
   8ef90:	513c0042 	sub	w2, w2, #0xf00
   8ef94:	b91000c7 	str	w7, [x6, #4096]
   8ef98:	52800806 	mov	w6, #0x40                  	// #64
   8ef9c:	b9400007 	ldr	w7, [x0]
   8efa0:	1ac520c5 	lsl	w5, w6, w5
   8efa4:	0a2100e6 	bic	w6, w7, w1
   8efa8:	b9000006 	str	w6, [x0]
   8efac:	b9400080 	ldr	w0, [x4]
   8efb0:	0a230003 	bic	w3, w0, w3
   8efb4:	2a050063 	orr	w3, w3, w5
   8efb8:	b9000083 	str	w3, [x4]
   8efbc:	b9000041 	str	w1, [x2]
   8efc0:	d65f03c0 	ret
   8efc4:	7100041f 	cmp	w0, #0x1
   8efc8:	54ffffc1 	b.ne	8efc0 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)+0x80>  // b.any
   8efcc:	515ef846 	sub	w6, w2, #0x7be, lsl #12
   8efd0:	52801400 	mov	w0, #0xa0                  	// #160
   8efd4:	513a00c6 	sub	w6, w6, #0xe80
   8efd8:	1ac52000 	lsl	w0, w0, w5
   8efdc:	515ef842 	sub	w2, w2, #0x7be, lsl #12
   8efe0:	52800045 	mov	w5, #0x2                   	// #2
   8efe4:	b90000c1 	str	w1, [x6]
   8efe8:	513e0042 	sub	w2, w2, #0xf80
   8efec:	d2840006 	mov	x6, #0x2000                	// #8192
   8eff0:	f2bff086 	movk	x6, #0xff84, lsl #16
   8eff4:	b9400088 	ldr	w8, [x4]
   8eff8:	d14004c7 	sub	x7, x6, #0x1, lsl #12
   8effc:	0a230103 	bic	w3, w8, w3
   8f000:	2a000063 	orr	w3, w3, w0
   8f004:	b9000083 	str	w3, [x4]
   8f008:	b9400040 	ldr	w0, [x2]
   8f00c:	2a000021 	orr	w1, w1, w0
   8f010:	b9000041 	str	w1, [x2]
   8f014:	b90000c5 	str	w5, [x6]
   8f018:	b90000e5 	str	w5, [x7]
   8f01c:	d65f03c0 	ret

000000000008f020 <SecureMonitorHandler>:
   8f020:	17ffffc8 	b	8ef40 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)>
	...

000000000008f030 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)>:
   8f030:	f900001f 	str	xzr, [x0]
   8f034:	b4000481 	cbz	x1, 8f0c4 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x94>
   8f038:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8f03c:	910003fd 	mov	x29, sp
   8f040:	a90153f3 	stp	x19, x20, [sp, #16]
   8f044:	aa0103f3 	mov	x19, x1
   8f048:	aa0003f4 	mov	x20, x0
   8f04c:	5281ba00 	mov	w0, #0xdd0                 	// #3536
   8f050:	72bdbfc0 	movk	w0, #0xedfe, lsl #16
   8f054:	b9400021 	ldr	w1, [x1]
   8f058:	6b00003f 	cmp	w1, w0
   8f05c:	54000181 	b.ne	8f08c <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x5c>  // b.any
   8f060:	b9401a61 	ldr	w1, [x19, #24]
   8f064:	52a20000 	mov	w0, #0x10000000            	// #268435456
   8f068:	6b00003f 	cmp	w1, w0
   8f06c:	54000101 	b.ne	8f08c <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x5c>  // b.any
   8f070:	b9400662 	ldr	w2, [x19, #4]
   8f074:	529ffb00 	mov	w0, #0xffd8                	// #65496
   8f078:	72a001e0 	movk	w0, #0xf, lsl #16
   8f07c:	5ac00842 	rev	w2, w2
   8f080:	5100a041 	sub	w1, w2, #0x28
   8f084:	6b00003f 	cmp	w1, w0
   8f088:	54000089 	b.ls	8f098 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x68>  // b.plast
   8f08c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f090:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f094:	d65f03c0 	ret
   8f098:	f90013f5 	str	x21, [sp, #32]
   8f09c:	2a0203f5 	mov	w21, w2
   8f0a0:	aa1503e0 	mov	x0, x21
   8f0a4:	97fff8d7 	bl	8d400 <operator new[](unsigned long)>
   8f0a8:	aa1503e2 	mov	x2, x21
   8f0ac:	f94013f5 	ldr	x21, [sp, #32]
   8f0b0:	aa1303e1 	mov	x1, x19
   8f0b4:	f9000280 	str	x0, [x20]
   8f0b8:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f0bc:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f0c0:	17fff80a 	b	8d0e8 <memcpy>
   8f0c4:	d65f03c0 	ret
   8f0c8:	d503201f 	nop
   8f0cc:	d503201f 	nop

000000000008f0d0 <CDeviceTreeBlob::~CDeviceTreeBlob()>:
   8f0d0:	f9400000 	ldr	x0, [x0]
   8f0d4:	b4000040 	cbz	x0, 8f0dc <CDeviceTreeBlob::~CDeviceTreeBlob()+0xc>
   8f0d8:	17fff8ea 	b	8d480 <operator delete[](void*)>
   8f0dc:	d65f03c0 	ret

000000000008f0e0 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>:
   8f0e0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8f0e4:	910003fd 	mov	x29, sp
   8f0e8:	a90153f3 	stp	x19, x20, [sp, #16]
   8f0ec:	aa0003f4 	mov	x20, x0
   8f0f0:	aa0203f3 	mov	x19, x2
   8f0f4:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f0f8:	aa0103f6 	mov	x22, x1
   8f0fc:	aa0303f5 	mov	x21, x3
   8f100:	a90363f7 	stp	x23, x24, [sp, #48]
   8f104:	b4000676 	cbz	x22, 8f1d0 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0xf0>
   8f108:	f9400280 	ldr	x0, [x20]
   8f10c:	b4001300 	cbz	x0, 8f36c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x28c>
   8f110:	b40006d3 	cbz	x19, 8f1e8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x108>
   8f114:	b9400260 	ldr	w0, [x19]
   8f118:	52a08001 	mov	w1, #0x4000000             	// #67108864
   8f11c:	6b01001f 	cmp	w0, w1
   8f120:	2a0003e2 	mov	w2, w0
   8f124:	54000081 	b.ne	8f134 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x54>  // b.any
   8f128:	b8404e60 	ldr	w0, [x19, #4]!
   8f12c:	6b02001f 	cmp	w0, w2
   8f130:	54ffffc0 	b.eq	8f128 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x48>  // b.none
   8f134:	52a02001 	mov	w1, #0x1000000             	// #16777216
   8f138:	6b01001f 	cmp	w0, w1
   8f13c:	54000d41 	b.ne	8f2e4 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x204>  // b.any
   8f140:	39c002c0 	ldrsb	w0, [x22]
   8f144:	35000100 	cbnz	w0, 8f164 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x84>
   8f148:	aa1303e0 	mov	x0, x19
   8f14c:	910003bf 	mov	sp, x29
   8f150:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f154:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f158:	a94363f7 	ldp	x23, x24, [sp, #48]
   8f15c:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8f160:	d65f03c0 	ret
   8f164:	528005e1 	mov	w1, #0x2f                  	// #47
   8f168:	aa1603e0 	mov	x0, x22
   8f16c:	97fff709 	bl	8cd90 <strchr>
   8f170:	b4000d00 	cbz	x0, 8f310 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x230>
   8f174:	cb160017 	sub	x23, x0, x22
   8f178:	b4000d57 	cbz	x23, 8f320 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x240>
   8f17c:	910042e0 	add	x0, x23, #0x10
   8f180:	aa1603e1 	mov	x1, x22
   8f184:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   8f188:	aa1703e2 	mov	x2, x23
   8f18c:	cb2063ff 	sub	sp, sp, x0
   8f190:	91001278 	add	x24, x19, #0x4
   8f194:	910003e0 	mov	x0, sp
   8f198:	97fff7d4 	bl	8d0e8 <memcpy>
   8f19c:	910003e1 	mov	x1, sp
   8f1a0:	aa1803e0 	mov	x0, x24
   8f1a4:	38376bff 	strb	wzr, [sp, x23]
   8f1a8:	97fff64e 	bl	8cae0 <strcmp>
   8f1ac:	350002e0 	cbnz	w0, 8f208 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x128>
   8f1b0:	38f76ac0 	ldrsb	w0, [x22, x23]
   8f1b4:	8b1702d7 	add	x23, x22, x23
   8f1b8:	7100bc1f 	cmp	w0, #0x2f
   8f1bc:	54fffc61 	b.ne	8f148 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x68>  // b.any
   8f1c0:	910006f6 	add	x22, x23, #0x1
   8f1c4:	d2800015 	mov	x21, #0x0                   	// #0
   8f1c8:	b5fffa16 	cbnz	x22, 8f108 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x28>
   8f1cc:	d503201f 	nop
   8f1d0:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f1d4:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8f1d8:	91190021 	add	x1, x1, #0x640
   8f1dc:	91196000 	add	x0, x0, #0x658
   8f1e0:	52801082 	mov	w2, #0x84                  	// #132
   8f1e4:	9400016f 	bl	8f7a0 <assertion_failed>
   8f1e8:	39c002c1 	ldrsb	w1, [x22]
   8f1ec:	b9400813 	ldr	w19, [x0, #8]
   8f1f0:	7100bc3f 	cmp	w1, #0x2f
   8f1f4:	5ac00a73 	rev	w19, w19
   8f1f8:	8b130013 	add	x19, x0, x19
   8f1fc:	54000a41 	b.ne	8f344 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x264>  // b.any
   8f200:	910006d6 	add	x22, x22, #0x1
   8f204:	17ffffc4 	b	8f114 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x34>
   8f208:	aa1803e0 	mov	x0, x24
   8f20c:	97fff629 	bl	8cab0 <strlen>
   8f210:	91001013 	add	x19, x0, #0x4
   8f214:	927ef673 	and	x19, x19, #0xfffffffffffffffc
   8f218:	b8736b02 	ldr	w2, [x24, x19]
   8f21c:	8b130300 	add	x0, x24, x19
   8f220:	5ac00841 	rev	w1, w2
   8f224:	51000c23 	sub	w3, w1, #0x3
   8f228:	7100047f 	cmp	w3, #0x1
   8f22c:	540001e8 	b.hi	8f268 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x188>  // b.pmore
   8f230:	7100103f 	cmp	w1, #0x4
   8f234:	d2800081 	mov	x1, #0x4                   	// #4
   8f238:	540000c0 	b.eq	8f250 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x170>  // b.none
   8f23c:	b9400401 	ldr	w1, [x0, #4]
   8f240:	5ac00821 	rev	w1, w1
   8f244:	11000c21 	add	w1, w1, #0x3
   8f248:	927e7421 	and	x1, x1, #0xfffffffc
   8f24c:	91003021 	add	x1, x1, #0xc
   8f250:	8b010000 	add	x0, x0, x1
   8f254:	b9400002 	ldr	w2, [x0]
   8f258:	5ac00841 	rev	w1, w2
   8f25c:	51000c23 	sub	w3, w1, #0x3
   8f260:	7100047f 	cmp	w3, #0x1
   8f264:	54fffe69 	b.ls	8f230 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x150>  // b.plast
   8f268:	52a02003 	mov	w3, #0x1000000             	// #16777216
   8f26c:	6b03005f 	cmp	w2, w3
   8f270:	540002c1 	b.ne	8f2c8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1e8>  // b.any
   8f274:	52a02013 	mov	w19, #0x1000000             	// #16777216
   8f278:	aa0003e2 	mov	x2, x0
   8f27c:	910123a3 	add	x3, x29, #0x48
   8f280:	f90027bf 	str	xzr, [x29, #72]
   8f284:	aa1603e1 	mov	x1, x22
   8f288:	aa1403e0 	mov	x0, x20
   8f28c:	97ffff95 	bl	8f0e0 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>
   8f290:	b5fff5e0 	cbnz	x0, 8f14c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x6c>
   8f294:	f94027a0 	ldr	x0, [x29, #72]
   8f298:	b4fff5a0 	cbz	x0, 8f14c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x6c>
   8f29c:	b9400002 	ldr	w2, [x0]
   8f2a0:	6b13005f 	cmp	w2, w19
   8f2a4:	54fffea0 	b.eq	8f278 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x198>  // b.none
   8f2a8:	52a08001 	mov	w1, #0x4000000             	// #67108864
   8f2ac:	6b01005f 	cmp	w2, w1
   8f2b0:	54000701 	b.ne	8f390 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x2b0>  // b.any
   8f2b4:	d503201f 	nop
   8f2b8:	b8404c01 	ldr	w1, [x0, #4]!
   8f2bc:	6b02003f 	cmp	w1, w2
   8f2c0:	54ffffc0 	b.eq	8f2b8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1d8>  // b.none
   8f2c4:	5ac00821 	rev	w1, w1
   8f2c8:	f10002bf 	cmp	x21, #0x0
   8f2cc:	7a421820 	ccmp	w1, #0x2, #0x0, ne	// ne = any
   8f2d0:	54000061 	b.ne	8f2dc <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1fc>  // b.any
   8f2d4:	91001000 	add	x0, x0, #0x4
   8f2d8:	f90002a0 	str	x0, [x21]
   8f2dc:	d2800000 	mov	x0, #0x0                   	// #0
   8f2e0:	17ffff9b 	b	8f14c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x6c>
   8f2e4:	97ffe273 	bl	87cb0 <CLogger::Get()>
   8f2e8:	b9400264 	ldr	w4, [x19]
   8f2ec:	90000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8f2f0:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f2f4:	911a6063 	add	x3, x3, #0x698
   8f2f8:	911cc021 	add	x1, x1, #0x730
   8f2fc:	52800042 	mov	w2, #0x2                   	// #2
   8f300:	5ac00884 	rev	w4, w4
   8f304:	97ffe44f 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f308:	d2800000 	mov	x0, #0x0                   	// #0
   8f30c:	17ffff90 	b	8f14c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x6c>
   8f310:	aa1603e0 	mov	x0, x22
   8f314:	97fff5e7 	bl	8cab0 <strlen>
   8f318:	aa0003f7 	mov	x23, x0
   8f31c:	17ffff97 	b	8f178 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x98>
   8f320:	97ffe264 	bl	87cb0 <CLogger::Get()>
   8f324:	90000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8f328:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f32c:	911ae063 	add	x3, x3, #0x6b8
   8f330:	911cc021 	add	x1, x1, #0x730
   8f334:	52800042 	mov	w2, #0x2                   	// #2
   8f338:	97ffe442 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f33c:	d2800000 	mov	x0, #0x0                   	// #0
   8f340:	17ffff83 	b	8f14c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x6c>
   8f344:	97ffe25b 	bl	87cb0 <CLogger::Get()>
   8f348:	90000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8f34c:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f350:	aa1603e4 	mov	x4, x22
   8f354:	911a0063 	add	x3, x3, #0x680
   8f358:	911cc021 	add	x1, x1, #0x730
   8f35c:	52800042 	mov	w2, #0x2                   	// #2
   8f360:	97ffe438 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f364:	d2800000 	mov	x0, #0x0                   	// #0
   8f368:	17ffff79 	b	8f14c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x6c>
   8f36c:	97ffe251 	bl	87cb0 <CLogger::Get()>
   8f370:	90000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8f374:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f378:	9119a063 	add	x3, x3, #0x668
   8f37c:	911cc021 	add	x1, x1, #0x730
   8f380:	52800042 	mov	w2, #0x2                   	// #2
   8f384:	97ffe42f 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f388:	d2800000 	mov	x0, #0x0                   	// #0
   8f38c:	17ffff70 	b	8f14c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x6c>
   8f390:	5ac00841 	rev	w1, w2
   8f394:	17ffffcd 	b	8f2c8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1e8>
   8f398:	d503201f 	nop
   8f39c:	d503201f 	nop

000000000008f3a0 <CDeviceTreeBlob::FindNode(char const*, TDeviceTreeNode const*) const>:
   8f3a0:	d2800003 	mov	x3, #0x0                   	// #0
   8f3a4:	17ffff4f 	b	8f0e0 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>
   8f3a8:	d503201f 	nop
   8f3ac:	d503201f 	nop

000000000008f3b0 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const>:
   8f3b0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8f3b4:	910003fd 	mov	x29, sp
   8f3b8:	a90153f3 	stp	x19, x20, [sp, #16]
   8f3bc:	f90013f5 	str	x21, [sp, #32]
   8f3c0:	b4000941 	cbz	x1, 8f4e8 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x138>
   8f3c4:	aa0203f4 	mov	x20, x2
   8f3c8:	b40009c2 	cbz	x2, 8f500 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x150>
   8f3cc:	aa0003f5 	mov	x21, x0
   8f3d0:	f9400000 	ldr	x0, [x0]
   8f3d4:	b4000620 	cbz	x0, 8f498 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xe8>
   8f3d8:	aa0103f3 	mov	x19, x1
   8f3dc:	b9400021 	ldr	w1, [x1]
   8f3e0:	52a02000 	mov	w0, #0x1000000             	// #16777216
   8f3e4:	6b00003f 	cmp	w1, w0
   8f3e8:	54000621 	b.ne	8f4ac <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xfc>  // b.any
   8f3ec:	91001260 	add	x0, x19, #0x4
   8f3f0:	97fff5b0 	bl	8cab0 <strlen>
   8f3f4:	91001000 	add	x0, x0, #0x4
   8f3f8:	927ef400 	and	x0, x0, #0xfffffffffffffffc
   8f3fc:	91001000 	add	x0, x0, #0x4
   8f400:	b8606a63 	ldr	w3, [x19, x0]
   8f404:	8b000273 	add	x19, x19, x0
   8f408:	5ac00863 	rev	w3, w3
   8f40c:	51000c60 	sub	w0, w3, #0x3
   8f410:	7100041f 	cmp	w0, #0x1
   8f414:	54000328 	b.hi	8f478 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xc8>  // b.pmore
   8f418:	7100107f 	cmp	w3, #0x4
   8f41c:	d2800083 	mov	x3, #0x4                   	// #4
   8f420:	54000200 	b.eq	8f460 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xb0>  // b.none
   8f424:	f94002a0 	ldr	x0, [x21]
   8f428:	aa1403e1 	mov	x1, x20
   8f42c:	b9400a63 	ldr	w3, [x19, #8]
   8f430:	b9400c02 	ldr	w2, [x0, #12]
   8f434:	5ac00863 	rev	w3, w3
   8f438:	5ac00842 	rev	w2, w2
   8f43c:	8b030042 	add	x2, x2, x3
   8f440:	8b020000 	add	x0, x0, x2
   8f444:	97fff5a7 	bl	8cae0 <strcmp>
   8f448:	34000460 	cbz	w0, 8f4d4 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x124>
   8f44c:	b9400663 	ldr	w3, [x19, #4]
   8f450:	5ac00863 	rev	w3, w3
   8f454:	11000c63 	add	w3, w3, #0x3
   8f458:	927e7463 	and	x3, x3, #0xfffffffc
   8f45c:	91003063 	add	x3, x3, #0xc
   8f460:	8b030273 	add	x19, x19, x3
   8f464:	b9400263 	ldr	w3, [x19]
   8f468:	5ac00863 	rev	w3, w3
   8f46c:	51000c61 	sub	w1, w3, #0x3
   8f470:	7100043f 	cmp	w1, #0x1
   8f474:	54fffd29 	b.ls	8f418 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x68>  // b.plast
   8f478:	97ffe20e 	bl	87cb0 <CLogger::Get()>
   8f47c:	90000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8f480:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f484:	aa1403e4 	mov	x4, x20
   8f488:	911ba063 	add	x3, x3, #0x6e8
   8f48c:	911cc021 	add	x1, x1, #0x730
   8f490:	52800042 	mov	w2, #0x2                   	// #2
   8f494:	97ffe3eb 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f498:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f49c:	d2800000 	mov	x0, #0x0                   	// #0
   8f4a0:	f94013f5 	ldr	x21, [sp, #32]
   8f4a4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f4a8:	d65f03c0 	ret
   8f4ac:	97ffe201 	bl	87cb0 <CLogger::Get()>
   8f4b0:	b9400264 	ldr	w4, [x19]
   8f4b4:	90000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8f4b8:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f4bc:	911a6063 	add	x3, x3, #0x698
   8f4c0:	911cc021 	add	x1, x1, #0x730
   8f4c4:	52800042 	mov	w2, #0x2                   	// #2
   8f4c8:	5ac00884 	rev	w4, w4
   8f4cc:	97ffe3dd 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f4d0:	17fffff2 	b	8f498 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xe8>
   8f4d4:	f94013f5 	ldr	x21, [sp, #32]
   8f4d8:	aa1303e0 	mov	x0, x19
   8f4dc:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f4e0:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8f4e4:	d65f03c0 	ret
   8f4e8:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f4ec:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8f4f0:	91190021 	add	x1, x1, #0x640
   8f4f4:	911b6000 	add	x0, x0, #0x6d8
   8f4f8:	52802162 	mov	w2, #0x10b                 	// #267
   8f4fc:	940000a9 	bl	8f7a0 <assertion_failed>
   8f500:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f504:	f0000000 	adrp	x0, 92000 <uart_putHexByte::hexDigits>
   8f508:	91190021 	add	x1, x1, #0x640
   8f50c:	91088000 	add	x0, x0, #0x220
   8f510:	52802182 	mov	w2, #0x10c                 	// #268
   8f514:	940000a3 	bl	8f7a0 <assertion_failed>
   8f518:	d503201f 	nop
   8f51c:	d503201f 	nop

000000000008f520 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const>:
   8f520:	b4000101 	cbz	x1, 8f540 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const+0x20>
   8f524:	f9400000 	ldr	x0, [x0]
   8f528:	b4000080 	cbz	x0, 8f538 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const+0x18>
   8f52c:	b9400420 	ldr	w0, [x1, #4]
   8f530:	5ac00800 	rev	w0, w0
   8f534:	d65f03c0 	ret
   8f538:	d2800000 	mov	x0, #0x0                   	// #0
   8f53c:	d65f03c0 	ret
   8f540:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f544:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8f548:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8f54c:	91190021 	add	x1, x1, #0x640
   8f550:	910003fd 	mov	x29, sp
   8f554:	911c0000 	add	x0, x0, #0x700
   8f558:	52802802 	mov	w2, #0x140                 	// #320
   8f55c:	94000091 	bl	8f7a0 <assertion_failed>

000000000008f560 <CDeviceTreeBlob::GetPropertyValue(TDeviceTreeProperty const*) const>:
   8f560:	b40000c1 	cbz	x1, 8f578 <CDeviceTreeBlob::GetPropertyValue(TDeviceTreeProperty const*) const+0x18>
   8f564:	f9400000 	ldr	x0, [x0]
   8f568:	91003021 	add	x1, x1, #0xc
   8f56c:	f100001f 	cmp	x0, #0x0
   8f570:	9a801020 	csel	x0, x1, x0, ne	// ne = any
   8f574:	d65f03c0 	ret
   8f578:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f57c:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8f580:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8f584:	91190021 	add	x1, x1, #0x640
   8f588:	910003fd 	mov	x29, sp
   8f58c:	911c0000 	add	x0, x0, #0x700
   8f590:	52802982 	mov	w2, #0x14c                 	// #332
   8f594:	94000083 	bl	8f7a0 <assertion_failed>
   8f598:	d503201f 	nop
   8f59c:	d503201f 	nop

000000000008f5a0 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>:
   8f5a0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f5a4:	910003fd 	mov	x29, sp
   8f5a8:	b40003a1 	cbz	x1, 8f61c <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x7c>
   8f5ac:	f9400000 	ldr	x0, [x0]
   8f5b0:	b4000300 	cbz	x0, 8f610 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x70>
   8f5b4:	f9000bf3 	str	x19, [sp, #16]
   8f5b8:	aa0103f3 	mov	x19, x1
   8f5bc:	11000441 	add	w1, w2, #0x1
   8f5c0:	b9400660 	ldr	w0, [x19, #4]
   8f5c4:	5ac00800 	rev	w0, w0
   8f5c8:	eb01081f 	cmp	x0, x1, lsl #2
   8f5cc:	540000e3 	b.cc	8f5e8 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x48>  // b.lo, b.ul, b.last
   8f5d0:	8b224a62 	add	x2, x19, w2, uxtw #2
   8f5d4:	b9400c40 	ldr	w0, [x2, #12]
   8f5d8:	f9400bf3 	ldr	x19, [sp, #16]
   8f5dc:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f5e0:	5ac00800 	rev	w0, w0
   8f5e4:	d65f03c0 	ret
   8f5e8:	97ffe1b2 	bl	87cb0 <CLogger::Get()>
   8f5ec:	b9400664 	ldr	w4, [x19, #4]
   8f5f0:	90000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8f5f4:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f5f8:	911c4063 	add	x3, x3, #0x710
   8f5fc:	911cc021 	add	x1, x1, #0x730
   8f600:	52800042 	mov	w2, #0x2                   	// #2
   8f604:	5ac00884 	rev	w4, w4
   8f608:	97ffe38e 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f60c:	f9400bf3 	ldr	x19, [sp, #16]
   8f610:	52800000 	mov	w0, #0x0                   	// #0
   8f614:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f618:	d65f03c0 	ret
   8f61c:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f620:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8f624:	f9000bf3 	str	x19, [sp, #16]
   8f628:	91190021 	add	x1, x1, #0x640
   8f62c:	911c0000 	add	x0, x0, #0x700
   8f630:	52802b22 	mov	w2, #0x159                 	// #345
   8f634:	9400005b 	bl	8f7a0 <assertion_failed>
	...

000000000008f640 <malloc>:
   8f640:	f0000101 	adrp	x1, b2000 <appendBuf+0xa0>
   8f644:	f9421022 	ldr	x2, [x1, #1056]
   8f648:	aa0003e1 	mov	x1, x0
   8f64c:	91006040 	add	x0, x2, #0x18
   8f650:	17fff7d8 	b	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8f654:	d503201f 	nop
   8f658:	d503201f 	nop
   8f65c:	d503201f 	nop

000000000008f660 <memalign>:
   8f660:	f101001f 	cmp	x0, #0x40
   8f664:	540000a8 	b.hi	8f678 <memalign+0x18>  // b.pmore
   8f668:	f0000100 	adrp	x0, b2000 <appendBuf+0xa0>
   8f66c:	f9421000 	ldr	x0, [x0, #1056]
   8f670:	91006000 	add	x0, x0, #0x18
   8f674:	17fff7cf 	b	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8f678:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f67c:	911ce021 	add	x1, x1, #0x738
   8f680:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8f684:	91004020 	add	x0, x1, #0x10
   8f688:	910003fd 	mov	x29, sp
   8f68c:	52800422 	mov	w2, #0x21                  	// #33
   8f690:	94000044 	bl	8f7a0 <assertion_failed>
   8f694:	d503201f 	nop
   8f698:	d503201f 	nop
   8f69c:	d503201f 	nop

000000000008f6a0 <free>:
   8f6a0:	aa0003e1 	mov	x1, x0
   8f6a4:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   8f6a8:	f0000100 	adrp	x0, b2000 <appendBuf+0xa0>
   8f6ac:	eb02003f 	cmp	x1, x2
   8f6b0:	f9421000 	ldr	x0, [x0, #1056]
   8f6b4:	54000068 	b.hi	8f6c0 <free+0x20>  // b.pmore
   8f6b8:	91006000 	add	x0, x0, #0x18
   8f6bc:	17fff81d 	b	8d730 <CHeapAllocator::Free(void*)>
   8f6c0:	91064000 	add	x0, x0, #0x190
   8f6c4:	17fff81b 	b	8d730 <CHeapAllocator::Free(void*)>
   8f6c8:	d503201f 	nop
   8f6cc:	d503201f 	nop

000000000008f6d0 <calloc>:
   8f6d0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f6d4:	910003fd 	mov	x29, sp
   8f6d8:	a90153f3 	stp	x19, x20, [sp, #16]
   8f6dc:	9b007c33 	mul	x19, x1, x0
   8f6e0:	f100027f 	cmp	x19, #0x0
   8f6e4:	9a9f1673 	csinc	x19, x19, xzr, ne	// ne = any
   8f6e8:	eb13001f 	cmp	x0, x19
   8f6ec:	540001e8 	b.hi	8f728 <calloc+0x58>  // b.pmore
   8f6f0:	f0000100 	adrp	x0, b2000 <appendBuf+0xa0>
   8f6f4:	aa1303e1 	mov	x1, x19
   8f6f8:	f9421000 	ldr	x0, [x0, #1056]
   8f6fc:	91006000 	add	x0, x0, #0x18
   8f700:	97fff7ac 	bl	8d5b0 <CHeapAllocator::Allocate(unsigned long)>
   8f704:	aa0003f4 	mov	x20, x0
   8f708:	b4000080 	cbz	x0, 8f718 <calloc+0x48>
   8f70c:	aa1303e2 	mov	x2, x19
   8f710:	52800001 	mov	w1, #0x0                   	// #0
   8f714:	97fff65d 	bl	8d088 <memset>
   8f718:	aa1403e0 	mov	x0, x20
   8f71c:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f720:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f724:	d65f03c0 	ret
   8f728:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f72c:	911ce021 	add	x1, x1, #0x738
   8f730:	9100c020 	add	x0, x1, #0x30
   8f734:	52800622 	mov	w2, #0x31                  	// #49
   8f738:	9400001a 	bl	8f7a0 <assertion_failed>
   8f73c:	d503201f 	nop

000000000008f740 <realloc>:
   8f740:	b24077e2 	mov	x2, #0x3fffffff            	// #1073741823
   8f744:	f0000103 	adrp	x3, b2000 <appendBuf+0xa0>
   8f748:	eb02001f 	cmp	x0, x2
   8f74c:	f9421063 	ldr	x3, [x3, #1056]
   8f750:	aa0103e2 	mov	x2, x1
   8f754:	aa0003e1 	mov	x1, x0
   8f758:	54000068 	b.hi	8f764 <realloc+0x24>  // b.pmore
   8f75c:	91006060 	add	x0, x3, #0x18
   8f760:	17fff824 	b	8d7f0 <CHeapAllocator::ReAllocate(void*, unsigned long)>
   8f764:	91064060 	add	x0, x3, #0x190
   8f768:	17fff822 	b	8d7f0 <CHeapAllocator::ReAllocate(void*, unsigned long)>
   8f76c:	d503201f 	nop

000000000008f770 <palloc>:
   8f770:	f0000100 	adrp	x0, b2000 <appendBuf+0xa0>
   8f774:	f9421000 	ldr	x0, [x0, #1056]
   8f778:	910c2000 	add	x0, x0, #0x308
   8f77c:	140003e9 	b	90720 <CPageAllocator::Allocate()>

000000000008f780 <pfree>:
   8f780:	f0000101 	adrp	x1, b2000 <appendBuf+0xa0>
   8f784:	f9421022 	ldr	x2, [x1, #1056]
   8f788:	aa0003e1 	mov	x1, x0
   8f78c:	910c2040 	add	x0, x2, #0x308
   8f790:	14000418 	b	907f0 <CPageAllocator::Free(void*)>
	...

000000000008f7a0 <assertion_failed>:
   8f7a0:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8f7a4:	910003fd 	mov	x29, sp
   8f7a8:	a90153f3 	stp	x19, x20, [sp, #16]
   8f7ac:	aa0003f4 	mov	x20, x0
   8f7b0:	aa0103f3 	mov	x19, x1
   8f7b4:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f7b8:	2a0203f5 	mov	w21, w2
   8f7bc:	910003f6 	mov	x22, sp
   8f7c0:	97fffd2c 	bl	8ec70 <CInterruptSystem::DisableFIQ()>
   8f7c4:	d50341ff 	msr	daifclr, #0x1
   8f7c8:	9100c3e0 	add	x0, sp, #0x30
   8f7cc:	97ffeabd 	bl	8a2c0 <CString::CString()>
   8f7d0:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f7d4:	aa1303e2 	mov	x2, x19
   8f7d8:	2a1503e3 	mov	w3, w21
   8f7dc:	911e0021 	add	x1, x1, #0x780
   8f7e0:	9100c3e0 	add	x0, sp, #0x30
   8f7e4:	97fff02f 	bl	8b8a0 <CString::Format(char const*, ...)>
   8f7e8:	9100c3e0 	add	x0, sp, #0x30
   8f7ec:	97ffeaf9 	bl	8a3d0 <CString::operator char const*() const>
   8f7f0:	aa0003e1 	mov	x1, x0
   8f7f4:	aa1603e0 	mov	x0, x22
   8f7f8:	940000ca 	bl	8fb20 <debug_stacktrace(unsigned long const*, char const*)>
   8f7fc:	97ffe12d 	bl	87cb0 <CLogger::Get()>
   8f800:	aa0003f3 	mov	x19, x0
   8f804:	9100c3e0 	add	x0, sp, #0x30
   8f808:	97ffeaf2 	bl	8a3d0 <CString::operator char const*() const>
   8f80c:	90000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8f810:	aa0003e1 	mov	x1, x0
   8f814:	aa1403e4 	mov	x4, x20
   8f818:	aa1303e0 	mov	x0, x19
   8f81c:	911e2063 	add	x3, x3, #0x788
   8f820:	52800002 	mov	w2, #0x0                   	// #0
   8f824:	97ffe307 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8f828:	14000000 	b	8f828 <assertion_failed+0x88>
   8f82c:	00000000 	udf	#0

000000000008f830 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   8f830:	2a0103e2 	mov	w2, w1
   8f834:	52800101 	mov	w1, #0x8                   	// #8
   8f838:	140008aa 	b	91ae0 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   8f83c:	d503201f 	nop

000000000008f840 <CBcmPropertyTags::~CBcmPropertyTags()>:
   8f840:	140008ac 	b	91af0 <CBcmMailBox::~CBcmMailBox()>
   8f844:	d503201f 	nop
   8f848:	d503201f 	nop
   8f84c:	d503201f 	nop

000000000008f850 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   8f850:	a9bb7bfd 	stp	x29, x30, [sp, #-80]!
   8f854:	910003fd 	mov	x29, sp
   8f858:	a90153f3 	stp	x19, x20, [sp, #16]
   8f85c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8f860:	a90363f7 	stp	x23, x24, [sp, #48]
   8f864:	f90023f9 	str	x25, [sp, #64]
   8f868:	b4000641 	cbz	x1, 8f930 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe0>
   8f86c:	71003c5f 	cmp	w2, #0xf
   8f870:	2a0203f3 	mov	w19, w2
   8f874:	54000689 	b.ls	8f944 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf4>  // b.plast
   8f878:	f240067f 	tst	x19, #0x3
   8f87c:	11003059 	add	w25, w2, #0xc
   8f880:	540006c1 	b.ne	8f958 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x108>  // b.any
   8f884:	aa0003f6 	mov	x22, x0
   8f888:	52800000 	mov	w0, #0x0                   	// #0
   8f88c:	aa0103f5 	mov	x21, x1
   8f890:	2a1303f8 	mov	w24, w19
   8f894:	97fff957 	bl	8ddf0 <CMemorySystem::GetCoherentPage(unsigned int)>
   8f898:	aa0003f4 	mov	x20, x0
   8f89c:	91002017 	add	x23, x0, #0x8
   8f8a0:	aa1803e2 	mov	x2, x24
   8f8a4:	aa1503e1 	mov	x1, x21
   8f8a8:	aa1703e0 	mov	x0, x23
   8f8ac:	29007e99 	stp	w25, wzr, [x20]
   8f8b0:	97fff60e 	bl	8d0e8 <memcpy>
   8f8b4:	b8334aff 	str	wzr, [x23, w19, uxtw]
   8f8b8:	d5033f9f 	dsb	sy
   8f8bc:	32020693 	orr	w19, w20, #0xc0000000
   8f8c0:	aa1603e0 	mov	x0, x22
   8f8c4:	2a1303e1 	mov	w1, w19
   8f8c8:	9400088e 	bl	91b00 <CBcmMailBox::WriteRead(unsigned int)>
   8f8cc:	6b13001f 	cmp	w0, w19
   8f8d0:	54000100 	b.eq	8f8f0 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa0>  // b.none
   8f8d4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f8d8:	52800000 	mov	w0, #0x0                   	// #0
   8f8dc:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f8e0:	a94363f7 	ldp	x23, x24, [sp, #48]
   8f8e4:	f94023f9 	ldr	x25, [sp, #64]
   8f8e8:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8f8ec:	d65f03c0 	ret
   8f8f0:	d5033fbf 	dmb	sy
   8f8f4:	b9400681 	ldr	w1, [x20, #4]
   8f8f8:	52b00000 	mov	w0, #0x80000000            	// #-2147483648
   8f8fc:	6b00003f 	cmp	w1, w0
   8f900:	54fffea1 	b.ne	8f8d4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x84>  // b.any
   8f904:	aa1803e2 	mov	x2, x24
   8f908:	aa1703e1 	mov	x1, x23
   8f90c:	aa1503e0 	mov	x0, x21
   8f910:	97fff5f6 	bl	8d0e8 <memcpy>
   8f914:	a94153f3 	ldp	x19, x20, [sp, #16]
   8f918:	52800020 	mov	w0, #0x1                   	// #1
   8f91c:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8f920:	a94363f7 	ldp	x23, x24, [sp, #48]
   8f924:	f94023f9 	ldr	x25, [sp, #64]
   8f928:	a8c57bfd 	ldp	x29, x30, [sp], #80
   8f92c:	d65f03c0 	ret
   8f930:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f934:	911e8021 	add	x1, x1, #0x7a0
   8f938:	91006020 	add	x0, x1, #0x18
   8f93c:	52800962 	mov	w2, #0x4b                  	// #75
   8f940:	97ffff98 	bl	8f7a0 <assertion_failed>
   8f944:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f948:	911e8021 	add	x1, x1, #0x7a0
   8f94c:	9100a020 	add	x0, x1, #0x28
   8f950:	52800982 	mov	w2, #0x4c                  	// #76
   8f954:	97ffff93 	bl	8f7a0 <assertion_failed>
   8f958:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f95c:	911e8021 	add	x1, x1, #0x7a0
   8f960:	91016020 	add	x0, x1, #0x58
   8f964:	528009c2 	mov	w2, #0x4e                  	// #78
   8f968:	97ffff8e 	bl	8f7a0 <assertion_failed>
   8f96c:	d503201f 	nop

000000000008f970 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   8f970:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8f974:	910003fd 	mov	x29, sp
   8f978:	f9000bf3 	str	x19, [sp, #16]
   8f97c:	aa0203f3 	mov	x19, x2
   8f980:	b4000282 	cbz	x2, 8f9d0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x60>
   8f984:	71003c7f 	cmp	w3, #0xf
   8f988:	2a0303e2 	mov	w2, w3
   8f98c:	540002c9 	b.ls	8f9e4 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x74>  // b.plast
   8f990:	12007884 	and	w4, w4, #0x7fffffff
   8f994:	51003063 	sub	w3, w3, #0xc
   8f998:	29000e61 	stp	w1, w3, [x19]
   8f99c:	aa1303e1 	mov	x1, x19
   8f9a0:	b9000a64 	str	w4, [x19, #8]
   8f9a4:	97ffffab 	bl	8f850 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   8f9a8:	12001c02 	and	w2, w0, #0xff
   8f9ac:	360000a0 	tbz	w0, #0, 8f9c0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x50>
   8f9b0:	b9400a61 	ldr	w1, [x19, #8]
   8f9b4:	72007821 	ands	w1, w1, #0x7fffffff
   8f9b8:	1a9f07e2 	cset	w2, ne	// ne = any
   8f9bc:	b9000a61 	str	w1, [x19, #8]
   8f9c0:	f9400bf3 	ldr	x19, [sp, #16]
   8f9c4:	2a0203e0 	mov	w0, w2
   8f9c8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8f9cc:	d65f03c0 	ret
   8f9d0:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f9d4:	911e8021 	add	x1, x1, #0x7a0
   8f9d8:	9101c020 	add	x0, x1, #0x70
   8f9dc:	52800662 	mov	w2, #0x33                  	// #51
   8f9e0:	97ffff70 	bl	8f7a0 <assertion_failed>
   8f9e4:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8f9e8:	911e8021 	add	x1, x1, #0x7a0
   8f9ec:	91020020 	add	x0, x1, #0x80
   8f9f0:	52800682 	mov	w2, #0x34                  	// #52
   8f9f4:	97ffff6b 	bl	8f7a0 <assertion_failed>
	...

000000000008fa00 <debug_hexdump(void const*, unsigned int, char const*)>:
   8fa00:	d102c3ff 	sub	sp, sp, #0xb0
   8fa04:	f100005f 	cmp	x2, #0x0
   8fa08:	a9077bfd 	stp	x29, x30, [sp, #112]
   8fa0c:	9101c3fd 	add	x29, sp, #0x70
   8fa10:	a90853f3 	stp	x19, x20, [sp, #128]
   8fa14:	aa0003f3 	mov	x19, x0
   8fa18:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8fa1c:	91238000 	add	x0, x0, #0x8e0
   8fa20:	2a0103f4 	mov	w20, w1
   8fa24:	a9095bf5 	stp	x21, x22, [sp, #144]
   8fa28:	9a820015 	csel	x21, x0, x2, eq	// eq = none
   8fa2c:	97ffe0a1 	bl	87cb0 <CLogger::Get()>
   8fa30:	90000023 	adrp	x3, 93000 <vtable for CString+0x38>
   8fa34:	aa1303e5 	mov	x5, x19
   8fa38:	2a1403e4 	mov	w4, w20
   8fa3c:	aa1503e1 	mov	x1, x21
   8fa40:	91212063 	add	x3, x3, #0x848
   8fa44:	52800082 	mov	w2, #0x4                   	// #4
   8fa48:	97ffe27e 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8fa4c:	340005f4 	cbz	w20, 8fb08 <debug_hexdump(void const*, unsigned int, char const*)+0x108>
   8fa50:	90000036 	adrp	x22, 93000 <vtable for CString+0x38>
   8fa54:	9121c2d6 	add	x22, x22, #0x870
   8fa58:	f90053f7 	str	x23, [sp, #160]
   8fa5c:	12000e97 	and	w23, w20, #0xf
   8fa60:	14000003 	b	8fa6c <debug_hexdump(void const*, unsigned int, char const*)+0x6c>
   8fa64:	71004294 	subs	w20, w20, #0x10
   8fa68:	540004e0 	b.eq	8fb04 <debug_hexdump(void const*, unsigned int, char const*)+0x104>  // b.none
   8fa6c:	97ffe091 	bl	87cb0 <CLogger::Get()>
   8fa70:	39401665 	ldrb	w5, [x19, #5]
   8fa74:	12003e64 	and	w4, w19, #0xffff
   8fa78:	aa1603e3 	mov	x3, x22
   8fa7c:	aa1503e1 	mov	x1, x21
   8fa80:	52800082 	mov	w2, #0x4                   	// #4
   8fa84:	39401267 	ldrb	w7, [x19, #4]
   8fa88:	91004273 	add	x19, x19, #0x10
   8fa8c:	385f3266 	ldurb	w6, [x19, #-13]
   8fa90:	b90013e5 	str	w5, [sp, #16]
   8fa94:	385ff265 	ldurb	w5, [x19, #-1]
   8fa98:	b9000be7 	str	w7, [sp, #8]
   8fa9c:	385fe267 	ldurb	w7, [x19, #-2]
   8faa0:	b90003e6 	str	w6, [sp]
   8faa4:	385fd266 	ldurb	w6, [x19, #-3]
   8faa8:	b90063e5 	str	w5, [sp, #96]
   8faac:	385fc265 	ldurb	w5, [x19, #-4]
   8fab0:	b9005be7 	str	w7, [sp, #88]
   8fab4:	385fb267 	ldurb	w7, [x19, #-5]
   8fab8:	b90053e6 	str	w6, [sp, #80]
   8fabc:	385fa266 	ldurb	w6, [x19, #-6]
   8fac0:	b9004be5 	str	w5, [sp, #72]
   8fac4:	385f9265 	ldurb	w5, [x19, #-7]
   8fac8:	b90043e7 	str	w7, [sp, #64]
   8facc:	385f8267 	ldurb	w7, [x19, #-8]
   8fad0:	b9003be6 	str	w6, [sp, #56]
   8fad4:	385f7266 	ldurb	w6, [x19, #-9]
   8fad8:	b90033e5 	str	w5, [sp, #48]
   8fadc:	385f6265 	ldurb	w5, [x19, #-10]
   8fae0:	b9002be7 	str	w7, [sp, #40]
   8fae4:	385f2267 	ldurb	w7, [x19, #-14]
   8fae8:	b90023e6 	str	w6, [sp, #32]
   8faec:	385f1266 	ldurb	w6, [x19, #-15]
   8faf0:	b9001be5 	str	w5, [sp, #24]
   8faf4:	385f0265 	ldurb	w5, [x19, #-16]
   8faf8:	97ffe252 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8fafc:	6b1402ff 	cmp	w23, w20
   8fb00:	54fffb21 	b.ne	8fa64 <debug_hexdump(void const*, unsigned int, char const*)+0x64>  // b.any
   8fb04:	f94053f7 	ldr	x23, [sp, #160]
   8fb08:	a9477bfd 	ldp	x29, x30, [sp, #112]
   8fb0c:	a94853f3 	ldp	x19, x20, [sp, #128]
   8fb10:	a9495bf5 	ldp	x21, x22, [sp, #144]
   8fb14:	9102c3ff 	add	sp, sp, #0xb0
   8fb18:	d65f03c0 	ret
   8fb1c:	d503201f 	nop

000000000008fb20 <debug_stacktrace(unsigned long const*, char const*)>:
   8fb20:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   8fb24:	910003fd 	mov	x29, sp
   8fb28:	f100003f 	cmp	x1, #0x0
   8fb2c:	a90153f3 	stp	x19, x20, [sp, #16]
   8fb30:	aa0003f4 	mov	x20, x0
   8fb34:	d2800013 	mov	x19, #0x0                   	// #0
   8fb38:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8fb3c:	91238000 	add	x0, x0, #0x8e0
   8fb40:	a9025bf5 	stp	x21, x22, [sp, #32]
   8fb44:	d0000016 	adrp	x22, 91000 <VectorTable>
   8fb48:	9133f2d6 	add	x22, x22, #0xcfc
   8fb4c:	b2404bf5 	mov	x21, #0x7ffff               	// #524287
   8fb50:	a90363f7 	stp	x23, x24, [sp, #48]
   8fb54:	90000038 	adrp	x24, 93000 <vtable for CString+0x38>
   8fb58:	91232318 	add	x24, x24, #0x8c8
   8fb5c:	9a810017 	csel	x23, x0, x1, eq	// eq = none
   8fb60:	14000004 	b	8fb70 <debug_stacktrace(unsigned long const*, char const*)+0x50>
   8fb64:	91000673 	add	x19, x19, #0x1
   8fb68:	f101027f 	cmp	x19, #0x40
   8fb6c:	54000240 	b.eq	8fbb4 <debug_stacktrace(unsigned long const*, char const*)+0x94>  // b.none
   8fb70:	f8737a82 	ldr	x2, [x20, x19, lsl #3]
   8fb74:	eb15005f 	cmp	x2, x21
   8fb78:	54ffff69 	b.ls	8fb64 <debug_stacktrace(unsigned long const*, char const*)+0x44>  // b.plast
   8fb7c:	eb16005f 	cmp	x2, x22
   8fb80:	54ffff22 	b.cs	8fb64 <debug_stacktrace(unsigned long const*, char const*)+0x44>  // b.hs, b.nlast
   8fb84:	f240045f 	tst	x2, #0x3
   8fb88:	54fffee1 	b.ne	8fb64 <debug_stacktrace(unsigned long const*, char const*)+0x44>  // b.any
   8fb8c:	97ffe049 	bl	87cb0 <CLogger::Get()>
   8fb90:	f8737a85 	ldr	x5, [x20, x19, lsl #3]
   8fb94:	2a1303e4 	mov	w4, w19
   8fb98:	aa1803e3 	mov	x3, x24
   8fb9c:	aa1703e1 	mov	x1, x23
   8fba0:	52800082 	mov	w2, #0x4                   	// #4
   8fba4:	91000673 	add	x19, x19, #0x1
   8fba8:	97ffe226 	bl	88440 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   8fbac:	f101027f 	cmp	x19, #0x40
   8fbb0:	54fffe01 	b.ne	8fb70 <debug_stacktrace(unsigned long const*, char const*)+0x50>  // b.any
   8fbb4:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fbb8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8fbbc:	a94363f7 	ldp	x23, x24, [sp, #48]
   8fbc0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   8fbc4:	d65f03c0 	ret
	...

000000000008fc00 <DelayLoop>:
   8fc00:	2a0103e1 	mov	w1, w1
   8fc04:	2a0203e2 	mov	w2, w2
   8fc08:	71000400 	subs	w0, w0, #0x1
   8fc0c:	54ffffa1 	b.ne	8fc00 <DelayLoop>  // b.any
   8fc10:	d65f03c0 	ret
	...

000000000008fc20 <CDevice::Read(void*, unsigned long)>:
   8fc20:	12800000 	mov	w0, #0xffffffff            	// #-1
   8fc24:	d65f03c0 	ret
   8fc28:	d503201f 	nop
   8fc2c:	d503201f 	nop

000000000008fc30 <CDevice::Seek(unsigned long)>:
   8fc30:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   8fc34:	d65f03c0 	ret
   8fc38:	d503201f 	nop
   8fc3c:	d503201f 	nop

000000000008fc40 <CDevice::GetSize() const>:
   8fc40:	92800000 	mov	x0, #0xffffffffffffffff    	// #-1
   8fc44:	d65f03c0 	ret
   8fc48:	d503201f 	nop
   8fc4c:	d503201f 	nop

000000000008fc50 <CDevice::RemoveDevice()>:
   8fc50:	52800000 	mov	w0, #0x0                   	// #0
   8fc54:	d65f03c0 	ret
   8fc58:	d503201f 	nop
   8fc5c:	d503201f 	nop

000000000008fc60 <CDevice::~CDevice()>:
   8fc60:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8fc64:	910003fd 	mov	x29, sp
   8fc68:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8fc6c:	91250021 	add	x1, x1, #0x940
   8fc70:	a9025bf5 	stp	x21, x22, [sp, #32]
   8fc74:	aa0003f5 	mov	x21, x0
   8fc78:	aa0003f6 	mov	x22, x0
   8fc7c:	a90153f3 	stp	x19, x20, [sp, #16]
   8fc80:	f80086a1 	str	x1, [x21], #8
   8fc84:	1400000a 	b	8fcac <CDevice::~CDevice()+0x4c>
   8fc88:	f9400681 	ldr	x1, [x20, #8]
   8fc8c:	aa1603e0 	mov	x0, x22
   8fc90:	d63f0040 	blr	x2
   8fc94:	aa1503e0 	mov	x0, x21
   8fc98:	aa1303e1 	mov	x1, x19
   8fc9c:	94000215 	bl	904f0 <CPtrList::Remove(TPtrListElement*)>
   8fca0:	aa1403e0 	mov	x0, x20
   8fca4:	d2800201 	mov	x1, #0x10                  	// #16
   8fca8:	97fff602 	bl	8d4b0 <operator delete(void*, unsigned long)>
   8fcac:	aa1503e0 	mov	x0, x21
   8fcb0:	9400015c 	bl	90220 <CPtrList::GetFirst()>
   8fcb4:	aa0003f3 	mov	x19, x0
   8fcb8:	b40001a0 	cbz	x0, 8fcec <CDevice::~CDevice()+0x8c>
   8fcbc:	aa1303e1 	mov	x1, x19
   8fcc0:	aa1503e0 	mov	x0, x21
   8fcc4:	94000173 	bl	90290 <CPtrList::GetPtr(TPtrListElement*)>
   8fcc8:	f9400002 	ldr	x2, [x0]
   8fccc:	aa0003f4 	mov	x20, x0
   8fcd0:	b5fffdc2 	cbnz	x2, 8fc88 <CDevice::~CDevice()+0x28>
   8fcd4:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8fcd8:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8fcdc:	9123a021 	add	x1, x1, #0x8e8
   8fce0:	9123e000 	add	x0, x0, #0x8f8
   8fce4:	52800502 	mov	w2, #0x28                  	// #40
   8fce8:	97fffeae 	bl	8f7a0 <assertion_failed>
   8fcec:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fcf0:	aa1503e0 	mov	x0, x21
   8fcf4:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8fcf8:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8fcfc:	1400013d 	b	901f0 <CPtrList::~CPtrList()>

000000000008fd00 <CDevice::~CDevice()>:
   8fd00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8fd04:	910003fd 	mov	x29, sp
   8fd08:	f9000bf3 	str	x19, [sp, #16]
   8fd0c:	aa0003f3 	mov	x19, x0
   8fd10:	97ffffd4 	bl	8fc60 <CDevice::~CDevice()>
   8fd14:	aa1303e0 	mov	x0, x19
   8fd18:	f9400bf3 	ldr	x19, [sp, #16]
   8fd1c:	d2800201 	mov	x1, #0x10                  	// #16
   8fd20:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8fd24:	17fff5e3 	b	8d4b0 <operator delete(void*, unsigned long)>
   8fd28:	d503201f 	nop
   8fd2c:	d503201f 	nop

000000000008fd30 <CDevice::CDevice()>:
   8fd30:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8fd34:	91250021 	add	x1, x1, #0x940
   8fd38:	f8008401 	str	x1, [x0], #8
   8fd3c:	14000129 	b	901e0 <CPtrList::CPtrList()>

000000000008fd40 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   8fd40:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   8fd44:	910003fd 	mov	x29, sp
   8fd48:	a90153f3 	stp	x19, x20, [sp, #16]
   8fd4c:	a9025bf5 	stp	x21, x22, [sp, #32]
   8fd50:	b4000361 	cbz	x1, 8fdbc <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x7c>
   8fd54:	aa0003f3 	mov	x19, x0
   8fd58:	d2800200 	mov	x0, #0x10                  	// #16
   8fd5c:	aa0103f5 	mov	x21, x1
   8fd60:	aa0203f6 	mov	x22, x2
   8fd64:	97fff593 	bl	8d3b0 <operator new(unsigned long)>
   8fd68:	aa0003f4 	mov	x20, x0
   8fd6c:	91002273 	add	x19, x19, #0x8
   8fd70:	aa1303e0 	mov	x0, x19
   8fd74:	a9005a95 	stp	x21, x22, [x20]
   8fd78:	9400012a 	bl	90220 <CPtrList::GetFirst()>
   8fd7c:	aa0003e1 	mov	x1, x0
   8fd80:	aa1403e2 	mov	x2, x20
   8fd84:	aa1303e0 	mov	x0, x19
   8fd88:	b40000e1 	cbz	x1, 8fda4 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)+0x64>
   8fd8c:	94000159 	bl	902f0 <CPtrList::InsertBefore(TPtrListElement*, void*)>
   8fd90:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8fd94:	aa1403e0 	mov	x0, x20
   8fd98:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fd9c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8fda0:	d65f03c0 	ret
   8fda4:	94000193 	bl	903f0 <CPtrList::InsertAfter(TPtrListElement*, void*)>
   8fda8:	a9425bf5 	ldp	x21, x22, [sp, #32]
   8fdac:	aa1403e0 	mov	x0, x20
   8fdb0:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fdb4:	a8c37bfd 	ldp	x29, x30, [sp], #48
   8fdb8:	d65f03c0 	ret
   8fdbc:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8fdc0:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8fdc4:	9123a021 	add	x1, x1, #0x8e8
   8fdc8:	9115e000 	add	x0, x0, #0x578
   8fdcc:	528009a2 	mov	w2, #0x4d                  	// #77
   8fdd0:	97fffe74 	bl	8f7a0 <assertion_failed>
   8fdd4:	d503201f 	nop
   8fdd8:	d503201f 	nop
   8fddc:	d503201f 	nop

000000000008fde0 <CDevice::UnregisterRemovedHandler(void*)>:
   8fde0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8fde4:	910003fd 	mov	x29, sp
   8fde8:	a90153f3 	stp	x19, x20, [sp, #16]
   8fdec:	b40001c1 	cbz	x1, 8fe24 <CDevice::UnregisterRemovedHandler(void*)+0x44>
   8fdf0:	91002013 	add	x19, x0, #0x8
   8fdf4:	aa0103f4 	mov	x20, x1
   8fdf8:	aa1303e0 	mov	x0, x19
   8fdfc:	94000209 	bl	90620 <CPtrList::Find(void*)>
   8fe00:	aa0003e1 	mov	x1, x0
   8fe04:	b40001c0 	cbz	x0, 8fe3c <CDevice::UnregisterRemovedHandler(void*)+0x5c>
   8fe08:	aa1303e0 	mov	x0, x19
   8fe0c:	940001b9 	bl	904f0 <CPtrList::Remove(TPtrListElement*)>
   8fe10:	aa1403e0 	mov	x0, x20
   8fe14:	a94153f3 	ldp	x19, x20, [sp, #16]
   8fe18:	d2800201 	mov	x1, #0x10                  	// #16
   8fe1c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8fe20:	17fff5a4 	b	8d4b0 <operator delete(void*, unsigned long)>
   8fe24:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8fe28:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8fe2c:	9123a021 	add	x1, x1, #0x8e8
   8fe30:	91244000 	add	x0, x0, #0x910
   8fe34:	52800c82 	mov	w2, #0x64                  	// #100
   8fe38:	97fffe5a 	bl	8f7a0 <assertion_failed>
   8fe3c:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8fe40:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8fe44:	9123a021 	add	x1, x1, #0x8e8
   8fe48:	91248000 	add	x0, x0, #0x920
   8fe4c:	52800ce2 	mov	w2, #0x67                  	// #103
   8fe50:	97fffe54 	bl	8f7a0 <assertion_failed>
	...

000000000008fe60 <CGPIOManager::CGPIOManager(CInterruptSystem*)>:
   8fe60:	91004002 	add	x2, x0, #0x10
   8fe64:	91070003 	add	x3, x0, #0x1c0
   8fe68:	f9000001 	str	x1, [x0]
   8fe6c:	3900201f 	strb	wzr, [x0, #8]
   8fe70:	f800845f 	str	xzr, [x2], #8
   8fe74:	eb03005f 	cmp	x2, x3
   8fe78:	54ffffc1 	b.ne	8fe70 <CGPIOManager::CGPIOManager(CInterruptSystem*)+0x10>  // b.any
   8fe7c:	d65f03c0 	ret

000000000008fe80 <CGPIOManager::~CGPIOManager()>:
   8fe80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8fe84:	91004001 	add	x1, x0, #0x10
   8fe88:	910003fd 	mov	x29, sp
   8fe8c:	91070003 	add	x3, x0, #0x1c0
   8fe90:	14000004 	b	8fea0 <CGPIOManager::~CGPIOManager()+0x20>
   8fe94:	91002021 	add	x1, x1, #0x8
   8fe98:	eb03003f 	cmp	x1, x3
   8fe9c:	54000120 	b.eq	8fec0 <CGPIOManager::~CGPIOManager()+0x40>  // b.none
   8fea0:	f9400022 	ldr	x2, [x1]
   8fea4:	b4ffff82 	cbz	x2, 8fe94 <CGPIOManager::~CGPIOManager()+0x14>
   8fea8:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8feac:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8feb0:	9125e021 	add	x1, x1, #0x978
   8feb4:	91262000 	add	x0, x0, #0x988
   8feb8:	52800582 	mov	w2, #0x2c                  	// #44
   8febc:	97fffe39 	bl	8f7a0 <assertion_failed>
   8fec0:	39402001 	ldrb	w1, [x0, #8]
   8fec4:	360000c1 	tbz	w1, #0, 8fedc <CGPIOManager::~CGPIOManager()+0x5c>
   8fec8:	f9400000 	ldr	x0, [x0]
   8fecc:	b40000c0 	cbz	x0, 8fee4 <CGPIOManager::~CGPIOManager()+0x64>
   8fed0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8fed4:	52801281 	mov	w1, #0x94                  	// #148
   8fed8:	17fffaae 	b	8e990 <CInterruptSystem::DisconnectIRQ(unsigned int)>
   8fedc:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8fee0:	d65f03c0 	ret
   8fee4:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8fee8:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8feec:	9125e021 	add	x1, x1, #0x978
   8fef0:	91268000 	add	x0, x0, #0x9a0
   8fef4:	52800642 	mov	w2, #0x32                  	// #50
   8fef8:	97fffe2a 	bl	8f7a0 <assertion_failed>
   8fefc:	d503201f 	nop

000000000008ff00 <CGPIOManager::Initialize()>:
   8ff00:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   8ff04:	910003fd 	mov	x29, sp
   8ff08:	f9000bf3 	str	x19, [sp, #16]
   8ff0c:	aa0003f3 	mov	x19, x0
   8ff10:	39402000 	ldrb	w0, [x0, #8]
   8ff14:	370001a0 	tbnz	w0, #0, 8ff48 <CGPIOManager::Initialize()+0x48>
   8ff18:	f9400260 	ldr	x0, [x19]
   8ff1c:	b4000220 	cbz	x0, 8ff60 <CGPIOManager::Initialize()+0x60>
   8ff20:	aa1303e3 	mov	x3, x19
   8ff24:	52801281 	mov	w1, #0x94                  	// #148
   8ff28:	b0000002 	adrp	x2, 90000 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   8ff2c:	9106c042 	add	x2, x2, #0x1b0
   8ff30:	97fffa78 	bl	8e910 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   8ff34:	52800020 	mov	w0, #0x1                   	// #1
   8ff38:	39002260 	strb	w0, [x19, #8]
   8ff3c:	f9400bf3 	ldr	x19, [sp, #16]
   8ff40:	a8c27bfd 	ldp	x29, x30, [sp], #32
   8ff44:	d65f03c0 	ret
   8ff48:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ff4c:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ff50:	9125e021 	add	x1, x1, #0x978
   8ff54:	9126e000 	add	x0, x0, #0x9b8
   8ff58:	52800762 	mov	w2, #0x3b                  	// #59
   8ff5c:	97fffe11 	bl	8f7a0 <assertion_failed>
   8ff60:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ff64:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ff68:	9125e021 	add	x1, x1, #0x978
   8ff6c:	91268000 	add	x0, x0, #0x9a0
   8ff70:	52800782 	mov	w2, #0x3c                  	// #60
   8ff74:	97fffe0b 	bl	8f7a0 <assertion_failed>
   8ff78:	d503201f 	nop
   8ff7c:	d503201f 	nop

000000000008ff80 <CGPIOManager::ConnectInterrupt(CGPIOPin*)>:
   8ff80:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   8ff84:	910003fd 	mov	x29, sp
   8ff88:	39402002 	ldrb	w2, [x0, #8]
   8ff8c:	36000162 	tbz	w2, #0, 8ffb8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x38>
   8ff90:	b4000201 	cbz	x1, 8ffd0 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x50>
   8ff94:	b9400822 	ldr	w2, [x1, #8]
   8ff98:	7100d45f 	cmp	w2, #0x35
   8ff9c:	54000268 	b.hi	8ffe8 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x68>  // b.pmore
   8ffa0:	8b224c02 	add	x2, x0, w2, uxtw #3
   8ffa4:	f9400840 	ldr	x0, [x2, #16]
   8ffa8:	b50002c0 	cbnz	x0, 90000 <CGPIOManager::ConnectInterrupt(CGPIOPin*)+0x80>
   8ffac:	f9000841 	str	x1, [x2, #16]
   8ffb0:	a8c17bfd 	ldp	x29, x30, [sp], #16
   8ffb4:	d65f03c0 	ret
   8ffb8:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ffbc:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ffc0:	9125e021 	add	x1, x1, #0x978
   8ffc4:	91274000 	add	x0, x0, #0x9d0
   8ffc8:	528008a2 	mov	w2, #0x45                  	// #69
   8ffcc:	97fffdf5 	bl	8f7a0 <assertion_failed>
   8ffd0:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ffd4:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8ffd8:	9125e021 	add	x1, x1, #0x978
   8ffdc:	91278000 	add	x0, x0, #0x9e0
   8ffe0:	528008e2 	mov	w2, #0x47                  	// #71
   8ffe4:	97fffdef 	bl	8f7a0 <assertion_failed>
   8ffe8:	90000021 	adrp	x1, 93000 <vtable for CString+0x38>
   8ffec:	90000020 	adrp	x0, 93000 <vtable for CString+0x38>
   8fff0:	9125e021 	add	x1, x1, #0x978
   8fff4:	9127c000 	add	x0, x0, #0x9f0
   8fff8:	52800922 	mov	w2, #0x49                  	// #73
   8fffc:	97fffde9 	bl	8f7a0 <assertion_failed>
   90000:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   90004:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   90008:	9125e021 	add	x1, x1, #0x978
   9000c:	91262000 	add	x0, x0, #0x988
   90010:	52800962 	mov	w2, #0x4b                  	// #75
   90014:	97fffde3 	bl	8f7a0 <assertion_failed>
   90018:	d503201f 	nop
   9001c:	d503201f 	nop

0000000000090020 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)>:
   90020:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90024:	910003fd 	mov	x29, sp
   90028:	39402002 	ldrb	w2, [x0, #8]
   9002c:	36000162 	tbz	w2, #0, 90058 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x38>
   90030:	b4000201 	cbz	x1, 90070 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x50>
   90034:	b9400821 	ldr	w1, [x1, #8]
   90038:	7100d43f 	cmp	w1, #0x35
   9003c:	54000268 	b.hi	90088 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x68>  // b.pmore
   90040:	8b214c01 	add	x1, x0, w1, uxtw #3
   90044:	f9400820 	ldr	x0, [x1, #16]
   90048:	b40002c0 	cbz	x0, 900a0 <CGPIOManager::DisconnectInterrupt(CGPIOPin*)+0x80>
   9004c:	f900083f 	str	xzr, [x1, #16]
   90050:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90054:	d65f03c0 	ret
   90058:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   9005c:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   90060:	9125e021 	add	x1, x1, #0x978
   90064:	91274000 	add	x0, x0, #0x9d0
   90068:	52800a42 	mov	w2, #0x52                  	// #82
   9006c:	97fffdcd 	bl	8f7a0 <assertion_failed>
   90070:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   90074:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   90078:	9125e021 	add	x1, x1, #0x978
   9007c:	91278000 	add	x0, x0, #0x9e0
   90080:	52800a82 	mov	w2, #0x54                  	// #84
   90084:	97fffdc7 	bl	8f7a0 <assertion_failed>
   90088:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   9008c:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   90090:	9125e021 	add	x1, x1, #0x978
   90094:	9127c000 	add	x0, x0, #0x9f0
   90098:	52800ac2 	mov	w2, #0x56                  	// #86
   9009c:	97fffdc1 	bl	8f7a0 <assertion_failed>
   900a0:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   900a4:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   900a8:	9125e021 	add	x1, x1, #0x978
   900ac:	91282000 	add	x0, x0, #0xa08
   900b0:	52800b02 	mov	w2, #0x58                  	// #88
   900b4:	97fffdbb 	bl	8f7a0 <assertion_failed>
   900b8:	d503201f 	nop
   900bc:	d503201f 	nop

00000000000900c0 <CGPIOManager::InterruptHandler()>:
   900c0:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   900c4:	910003fd 	mov	x29, sp
   900c8:	39402001 	ldrb	w1, [x0, #8]
   900cc:	a90153f3 	stp	x19, x20, [sp, #16]
   900d0:	36000621 	tbz	w1, #0, 90194 <CGPIOManager::InterruptHandler()+0xd4>
   900d4:	d2800801 	mov	x1, #0x40                  	// #64
   900d8:	f2bfc401 	movk	x1, #0xfe20, lsl #16
   900dc:	b9400021 	ldr	w1, [x1]
   900e0:	52800013 	mov	w19, #0x0                   	// #0
   900e4:	d503201f 	nop
   900e8:	37000141 	tbnz	w1, #0, 90110 <CGPIOManager::InterruptHandler()+0x50>
   900ec:	11000673 	add	w19, w19, #0x1
   900f0:	53017c21 	lsr	w1, w1, #1
   900f4:	f240127f 	tst	x19, #0x1f
   900f8:	540002c0 	b.eq	90150 <CGPIOManager::InterruptHandler()+0x90>  // b.none
   900fc:	7100da7f 	cmp	w19, #0x36
   90100:	54ffff41 	b.ne	900e8 <CGPIOManager::InterruptHandler()+0x28>  // b.any
   90104:	a94153f3 	ldp	x19, x20, [sp, #16]
   90108:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9010c:	d65f03c0 	ret
   90110:	2a1303e1 	mov	w1, w19
   90114:	91000821 	add	x1, x1, #0x2
   90118:	f8617814 	ldr	x20, [x0, x1, lsl #3]
   9011c:	b4000254 	cbz	x20, 90164 <CGPIOManager::InterruptHandler()+0xa4>
   90120:	aa1403e0 	mov	x0, x20
   90124:	97ffdc77 	bl	87300 <CGPIOPin::InterruptHandler()>
   90128:	3940e280 	ldrb	w0, [x20, #56]
   9012c:	3607fec0 	tbz	w0, #0, 90104 <CGPIOManager::InterruptHandler()+0x44>
   90130:	29418680 	ldp	w0, w1, [x20, #12]
   90134:	52800802 	mov	w2, #0x40                  	// #64
   90138:	72bfc402 	movk	w2, #0xfe20, lsl #16
   9013c:	a94153f3 	ldp	x19, x20, [sp, #16]
   90140:	0b020000 	add	w0, w0, w2
   90144:	b9000001 	str	w1, [x0]
   90148:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9014c:	d65f03c0 	ret
   90150:	d2800881 	mov	x1, #0x44                  	// #68
   90154:	f2bfc401 	movk	x1, #0xfe20, lsl #16
   90158:	b9400021 	ldr	w1, [x1]
   9015c:	52800413 	mov	w19, #0x20                  	// #32
   90160:	17ffffe2 	b	900e8 <CGPIOManager::InterruptHandler()+0x28>
   90164:	2a1303e0 	mov	w0, w19
   90168:	97ffdc8a 	bl	87390 <CGPIOPin::DisableAllInterrupts(unsigned int)>
   9016c:	52800200 	mov	w0, #0x10                  	// #16
   90170:	72a7f100 	movk	w0, #0x3f88, lsl #16
   90174:	0b531400 	add	w0, w0, w19, lsr #5
   90178:	52800021 	mov	w1, #0x1                   	// #1
   9017c:	1ad32021 	lsl	w1, w1, w19
   90180:	a94153f3 	ldp	x19, x20, [sp, #16]
   90184:	531e7400 	lsl	w0, w0, #2
   90188:	b9000001 	str	w1, [x0]
   9018c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90190:	d65f03c0 	ret
   90194:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   90198:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   9019c:	9125e021 	add	x1, x1, #0x978
   901a0:	91274000 	add	x0, x0, #0x9d0
   901a4:	52800bc2 	mov	w2, #0x5e                  	// #94
   901a8:	97fffd7e 	bl	8f7a0 <assertion_failed>
   901ac:	d503201f 	nop

00000000000901b0 <CGPIOManager::InterruptStub(void*)>:
   901b0:	b4000040 	cbz	x0, 901b8 <CGPIOManager::InterruptStub(void*)+0x8>
   901b4:	17ffffc3 	b	900c0 <CGPIOManager::InterruptHandler()>
   901b8:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   901bc:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   901c0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   901c4:	9125e021 	add	x1, x1, #0x978
   901c8:	910003fd 	mov	x29, sp
   901cc:	91288000 	add	x0, x0, #0xa20
   901d0:	528011c2 	mov	w2, #0x8e                  	// #142
   901d4:	97fffd73 	bl	8f7a0 <assertion_failed>
	...

00000000000901e0 <CPtrList::CPtrList()>:
   901e0:	f900001f 	str	xzr, [x0]
   901e4:	d65f03c0 	ret
   901e8:	d503201f 	nop
   901ec:	d503201f 	nop

00000000000901f0 <CPtrList::~CPtrList()>:
   901f0:	f9400000 	ldr	x0, [x0]
   901f4:	b5000040 	cbnz	x0, 901fc <CPtrList::~CPtrList()+0xc>
   901f8:	d65f03c0 	ret
   901fc:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   90200:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   90204:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90208:	9128c021 	add	x1, x1, #0xa30
   9020c:	910003fd 	mov	x29, sp
   90210:	91290000 	add	x0, x0, #0xa40
   90214:	52800542 	mov	w2, #0x2a                  	// #42
   90218:	97fffd62 	bl	8f7a0 <assertion_failed>
   9021c:	d503201f 	nop

0000000000090220 <CPtrList::GetFirst()>:
   90220:	f9400000 	ldr	x0, [x0]
   90224:	d65f03c0 	ret
   90228:	d503201f 	nop
   9022c:	d503201f 	nop

0000000000090230 <CPtrList::GetNext(TPtrListElement*)>:
   90230:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90234:	910003fd 	mov	x29, sp
   90238:	b4000121 	cbz	x1, 9025c <CPtrList::GetNext(TPtrListElement*)+0x2c>
   9023c:	5289a860 	mov	w0, #0x4d43                	// #19779
   90240:	72aa0980 	movk	w0, #0x504c, lsl #16
   90244:	b9400022 	ldr	w2, [x1]
   90248:	6b00005f 	cmp	w2, w0
   9024c:	54000141 	b.ne	90274 <CPtrList::GetNext(TPtrListElement*)+0x44>  // b.any
   90250:	f9400820 	ldr	x0, [x1, #16]
   90254:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90258:	d65f03c0 	ret
   9025c:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   90260:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   90264:	9128c021 	add	x1, x1, #0xa30
   90268:	91248000 	add	x0, x0, #0x920
   9026c:	52800682 	mov	w2, #0x34                  	// #52
   90270:	97fffd4c 	bl	8f7a0 <assertion_failed>
   90274:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   90278:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   9027c:	9128c021 	add	x1, x1, #0xa30
   90280:	91294000 	add	x0, x0, #0xa50
   90284:	528006a2 	mov	w2, #0x35                  	// #53
   90288:	97fffd46 	bl	8f7a0 <assertion_failed>
   9028c:	d503201f 	nop

0000000000090290 <CPtrList::GetPtr(TPtrListElement*)>:
   90290:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90294:	910003fd 	mov	x29, sp
   90298:	b4000121 	cbz	x1, 902bc <CPtrList::GetPtr(TPtrListElement*)+0x2c>
   9029c:	5289a860 	mov	w0, #0x4d43                	// #19779
   902a0:	72aa0980 	movk	w0, #0x504c, lsl #16
   902a4:	b9400022 	ldr	w2, [x1]
   902a8:	6b00005f 	cmp	w2, w0
   902ac:	54000141 	b.ne	902d4 <CPtrList::GetPtr(TPtrListElement*)+0x44>  // b.any
   902b0:	f9400c20 	ldr	x0, [x1, #24]
   902b4:	a8c17bfd 	ldp	x29, x30, [sp], #16
   902b8:	d65f03c0 	ret
   902bc:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   902c0:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   902c4:	9128c021 	add	x1, x1, #0xa30
   902c8:	91248000 	add	x0, x0, #0x920
   902cc:	52800782 	mov	w2, #0x3c                  	// #60
   902d0:	97fffd34 	bl	8f7a0 <assertion_failed>
   902d4:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   902d8:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   902dc:	9128c021 	add	x1, x1, #0xa30
   902e0:	91294000 	add	x0, x0, #0xa50
   902e4:	528007a2 	mov	w2, #0x3d                  	// #61
   902e8:	97fffd2e 	bl	8f7a0 <assertion_failed>
   902ec:	d503201f 	nop

00000000000902f0 <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   902f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   902f4:	910003fd 	mov	x29, sp
   902f8:	a90153f3 	stp	x19, x20, [sp, #16]
   902fc:	aa0003f4 	mov	x20, x0
   90300:	d2800400 	mov	x0, #0x20                  	// #32
   90304:	aa0103f3 	mov	x19, x1
   90308:	f90013f5 	str	x21, [sp, #32]
   9030c:	aa0203f5 	mov	x21, x2
   90310:	97fff428 	bl	8d3b0 <operator new(unsigned long)>
   90314:	5289a862 	mov	w2, #0x4d43                	// #19779
   90318:	72aa0982 	movk	w2, #0x504c, lsl #16
   9031c:	f9400281 	ldr	x1, [x20]
   90320:	f9000c15 	str	x21, [x0, #24]
   90324:	b9000002 	str	w2, [x0]
   90328:	b4000341 	cbz	x1, 90390 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xa0>
   9032c:	b40003f3 	cbz	x19, 903a8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb8>
   90330:	b9400263 	ldr	w3, [x19]
   90334:	6b02007f 	cmp	w3, w2
   90338:	54000441 	b.ne	903c0 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xd0>  // b.any
   9033c:	eb13003f 	cmp	x1, x19
   90340:	540001a0 	b.eq	90374 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x84>  // b.none
   90344:	f9400661 	ldr	x1, [x19, #8]
   90348:	a900cc01 	stp	x1, x19, [x0, #8]
   9034c:	b40000a1 	cbz	x1, 90360 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x70>
   90350:	b9400022 	ldr	w2, [x1]
   90354:	6b03005f 	cmp	w2, w3
   90358:	54000401 	b.ne	903d8 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe8>  // b.any
   9035c:	f9000820 	str	x0, [x1, #16]
   90360:	f94013f5 	ldr	x21, [sp, #32]
   90364:	f9000660 	str	x0, [x19, #8]
   90368:	a94153f3 	ldp	x19, x20, [sp, #16]
   9036c:	a8c37bfd 	ldp	x29, x30, [sp], #48
   90370:	d65f03c0 	ret
   90374:	f9000420 	str	x0, [x1, #8]
   90378:	f94013f5 	ldr	x21, [sp, #32]
   9037c:	f9000280 	str	x0, [x20]
   90380:	a94153f3 	ldp	x19, x20, [sp, #16]
   90384:	a900841f 	stp	xzr, x1, [x0, #8]
   90388:	a8c37bfd 	ldp	x29, x30, [sp], #48
   9038c:	d65f03c0 	ret
   90390:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   90394:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   90398:	9128c021 	add	x1, x1, #0xa30
   9039c:	9129e000 	add	x0, x0, #0xa78
   903a0:	52800982 	mov	w2, #0x4c                  	// #76
   903a4:	97fffcff 	bl	8f7a0 <assertion_failed>
   903a8:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   903ac:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   903b0:	9128c021 	add	x1, x1, #0xa30
   903b4:	912a2000 	add	x0, x0, #0xa88
   903b8:	528009a2 	mov	w2, #0x4d                  	// #77
   903bc:	97fffcf9 	bl	8f7a0 <assertion_failed>
   903c0:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   903c4:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   903c8:	9128c021 	add	x1, x1, #0xa30
   903cc:	912a6000 	add	x0, x0, #0xa98
   903d0:	528009c2 	mov	w2, #0x4e                  	// #78
   903d4:	97fffcf3 	bl	8f7a0 <assertion_failed>
   903d8:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   903dc:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   903e0:	9128c021 	add	x1, x1, #0xa30
   903e4:	912b0000 	add	x0, x0, #0xac0
   903e8:	52800c02 	mov	w2, #0x60                  	// #96
   903ec:	97fffced 	bl	8f7a0 <assertion_failed>

00000000000903f0 <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   903f0:	a9bd7bfd 	stp	x29, x30, [sp, #-48]!
   903f4:	910003fd 	mov	x29, sp
   903f8:	a90153f3 	stp	x19, x20, [sp, #16]
   903fc:	aa0003f4 	mov	x20, x0
   90400:	d2800400 	mov	x0, #0x20                  	// #32
   90404:	aa0103f3 	mov	x19, x1
   90408:	f90013f5 	str	x21, [sp, #32]
   9040c:	aa0203f5 	mov	x21, x2
   90410:	97fff3e8 	bl	8d3b0 <operator new(unsigned long)>
   90414:	5289a861 	mov	w1, #0x4d43                	// #19779
   90418:	72aa0981 	movk	w1, #0x504c, lsl #16
   9041c:	f9000c15 	str	x21, [x0, #24]
   90420:	b9000001 	str	w1, [x0]
   90424:	b4000253 	cbz	x19, 9046c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x7c>
   90428:	f9400282 	ldr	x2, [x20]
   9042c:	b4000302 	cbz	x2, 9048c <CPtrList::InsertAfter(TPtrListElement*, void*)+0x9c>
   90430:	b9400262 	ldr	w2, [x19]
   90434:	6b01005f 	cmp	w2, w1
   90438:	54000361 	b.ne	904a4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb4>  // b.any
   9043c:	f9400a61 	ldr	x1, [x19, #16]
   90440:	a9008413 	stp	x19, x1, [x0, #8]
   90444:	b40000a1 	cbz	x1, 90458 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x68>
   90448:	b9400023 	ldr	w3, [x1]
   9044c:	6b02007f 	cmp	w3, w2
   90450:	54000361 	b.ne	904bc <CPtrList::InsertAfter(TPtrListElement*, void*)+0xcc>  // b.any
   90454:	f9000420 	str	x0, [x1, #8]
   90458:	f94013f5 	ldr	x21, [sp, #32]
   9045c:	f9000a60 	str	x0, [x19, #16]
   90460:	a94153f3 	ldp	x19, x20, [sp, #16]
   90464:	a8c37bfd 	ldp	x29, x30, [sp], #48
   90468:	d65f03c0 	ret
   9046c:	f9400281 	ldr	x1, [x20]
   90470:	b5000321 	cbnz	x1, 904d4 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe4>
   90474:	f94013f5 	ldr	x21, [sp, #32]
   90478:	f9000280 	str	x0, [x20]
   9047c:	a94153f3 	ldp	x19, x20, [sp, #16]
   90480:	a900fc1f 	stp	xzr, xzr, [x0, #8]
   90484:	a8c37bfd 	ldp	x29, x30, [sp], #48
   90488:	d65f03c0 	ret
   9048c:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   90490:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   90494:	9128c021 	add	x1, x1, #0xa30
   90498:	9129e000 	add	x0, x0, #0xa78
   9049c:	52800fa2 	mov	w2, #0x7d                  	// #125
   904a0:	97fffcc0 	bl	8f7a0 <assertion_failed>
   904a4:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   904a8:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   904ac:	9128c021 	add	x1, x1, #0xa30
   904b0:	912ba000 	add	x0, x0, #0xae8
   904b4:	52800fc2 	mov	w2, #0x7e                  	// #126
   904b8:	97fffcba 	bl	8f7a0 <assertion_failed>
   904bc:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   904c0:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   904c4:	9128c021 	add	x1, x1, #0xa30
   904c8:	912c4000 	add	x0, x0, #0xb10
   904cc:	528010a2 	mov	w2, #0x85                  	// #133
   904d0:	97fffcb4 	bl	8f7a0 <assertion_failed>
   904d4:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   904d8:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   904dc:	9128c021 	add	x1, x1, #0xa30
   904e0:	91290000 	add	x0, x0, #0xa40
   904e4:	52800e82 	mov	w2, #0x74                  	// #116
   904e8:	97fffcae 	bl	8f7a0 <assertion_failed>
   904ec:	d503201f 	nop

00000000000904f0 <CPtrList::Remove(TPtrListElement*)>:
   904f0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   904f4:	910003fd 	mov	x29, sp
   904f8:	b4000541 	cbz	x1, 905a0 <CPtrList::Remove(TPtrListElement*)+0xb0>
   904fc:	5289a863 	mov	w3, #0x4d43                	// #19779
   90500:	72aa0983 	movk	w3, #0x504c, lsl #16
   90504:	b9400022 	ldr	w2, [x1]
   90508:	6b03005f 	cmp	w2, w3
   9050c:	54000561 	b.ne	905b8 <CPtrList::Remove(TPtrListElement*)+0xc8>  // b.any
   90510:	f9400003 	ldr	x3, [x0]
   90514:	eb01007f 	cmp	x3, x1
   90518:	54000220 	b.eq	9055c <CPtrList::Remove(TPtrListElement*)+0x6c>  // b.none
   9051c:	f9400420 	ldr	x0, [x1, #8]
   90520:	b4000580 	cbz	x0, 905d0 <CPtrList::Remove(TPtrListElement*)+0xe0>
   90524:	b9400003 	ldr	w3, [x0]
   90528:	6b02007f 	cmp	w3, w2
   9052c:	540002e1 	b.ne	90588 <CPtrList::Remove(TPtrListElement*)+0x98>  // b.any
   90530:	f9400822 	ldr	x2, [x1, #16]
   90534:	f9000802 	str	x2, [x0, #16]
   90538:	b40000a2 	cbz	x2, 9054c <CPtrList::Remove(TPtrListElement*)+0x5c>
   9053c:	b9400044 	ldr	w4, [x2]
   90540:	6b03009f 	cmp	w4, w3
   90544:	54000521 	b.ne	905e8 <CPtrList::Remove(TPtrListElement*)+0xf8>  // b.any
   90548:	f9000440 	str	x0, [x2, #8]
   9054c:	aa0103e0 	mov	x0, x1
   90550:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90554:	d2800401 	mov	x1, #0x20                  	// #32
   90558:	17fff3d6 	b	8d4b0 <operator delete(void*, unsigned long)>
   9055c:	f9400863 	ldr	x3, [x3, #16]
   90560:	f9000003 	str	x3, [x0]
   90564:	b4ffff43 	cbz	x3, 9054c <CPtrList::Remove(TPtrListElement*)+0x5c>
   90568:	b9400060 	ldr	w0, [x3]
   9056c:	6b02001f 	cmp	w0, w2
   90570:	54000481 	b.ne	90600 <CPtrList::Remove(TPtrListElement*)+0x110>  // b.any
   90574:	aa0103e0 	mov	x0, x1
   90578:	d2800401 	mov	x1, #0x20                  	// #32
   9057c:	f900047f 	str	xzr, [x3, #8]
   90580:	a8c17bfd 	ldp	x29, x30, [sp], #16
   90584:	17fff3cb 	b	8d4b0 <operator delete(void*, unsigned long)>
   90588:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   9058c:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   90590:	9128c021 	add	x1, x1, #0xa30
   90594:	912e2000 	add	x0, x0, #0xb88
   90598:	528013e2 	mov	w2, #0x9f                  	// #159
   9059c:	97fffc81 	bl	8f7a0 <assertion_failed>
   905a0:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   905a4:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   905a8:	9128c021 	add	x1, x1, #0xa30
   905ac:	91248000 	add	x0, x0, #0x920
   905b0:	528011e2 	mov	w2, #0x8f                  	// #143
   905b4:	97fffc7b 	bl	8f7a0 <assertion_failed>
   905b8:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   905bc:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   905c0:	9128c021 	add	x1, x1, #0xa30
   905c4:	91294000 	add	x0, x0, #0xa50
   905c8:	52801202 	mov	w2, #0x90                  	// #144
   905cc:	97fffc75 	bl	8f7a0 <assertion_failed>
   905d0:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   905d4:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   905d8:	9128c021 	add	x1, x1, #0xa30
   905dc:	912dc000 	add	x0, x0, #0xb70
   905e0:	528013c2 	mov	w2, #0x9e                  	// #158
   905e4:	97fffc6f 	bl	8f7a0 <assertion_failed>
   905e8:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   905ec:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   905f0:	9128c021 	add	x1, x1, #0xa30
   905f4:	912d0000 	add	x0, x0, #0xb40
   905f8:	52801482 	mov	w2, #0xa4                  	// #164
   905fc:	97fffc69 	bl	8f7a0 <assertion_failed>
   90600:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   90604:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   90608:	9128c021 	add	x1, x1, #0xa30
   9060c:	912d0000 	add	x0, x0, #0xb40
   90610:	52801302 	mov	w2, #0x98                  	// #152
   90614:	97fffc63 	bl	8f7a0 <assertion_failed>
   90618:	d503201f 	nop
   9061c:	d503201f 	nop

0000000000090620 <CPtrList::Find(void*)>:
   90620:	f9400000 	ldr	x0, [x0]
   90624:	b4000280 	cbz	x0, 90674 <CPtrList::Find(void*)+0x54>
   90628:	5289a863 	mov	w3, #0x4d43                	// #19779
   9062c:	72aa0983 	movk	w3, #0x504c, lsl #16
   90630:	14000006 	b	90648 <CPtrList::Find(void*)+0x28>
   90634:	f9400c02 	ldr	x2, [x0, #24]
   90638:	eb01005f 	cmp	x2, x1
   9063c:	540001c0 	b.eq	90674 <CPtrList::Find(void*)+0x54>  // b.none
   90640:	f9400800 	ldr	x0, [x0, #16]
   90644:	b4000180 	cbz	x0, 90674 <CPtrList::Find(void*)+0x54>
   90648:	b9400002 	ldr	w2, [x0]
   9064c:	6b03005f 	cmp	w2, w3
   90650:	54ffff20 	b.eq	90634 <CPtrList::Find(void*)+0x14>  // b.none
   90654:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   90658:	f0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   9065c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   90660:	9128c021 	add	x1, x1, #0xa30
   90664:	910003fd 	mov	x29, sp
   90668:	91294000 	add	x0, x0, #0xa50
   9066c:	52801662 	mov	w2, #0xb3                  	// #179
   90670:	97fffc4c 	bl	8f7a0 <assertion_failed>
   90674:	d65f03c0 	ret
	...

0000000000090680 <CPageAllocator::CPageAllocator()>:
   90680:	52800021 	mov	w1, #0x1                   	// #1
   90684:	a9007c1f 	stp	xzr, xzr, [x0]
   90688:	f900081f 	str	xzr, [x0, #16]
   9068c:	b9001801 	str	w1, [x0, #24]
   90690:	d65f03c0 	ret
   90694:	d503201f 	nop
   90698:	d503201f 	nop
   9069c:	d503201f 	nop

00000000000906a0 <CPageAllocator::~CPageAllocator()>:
   906a0:	d65f03c0 	ret
   906a4:	d503201f 	nop
   906a8:	d503201f 	nop
   906ac:	d503201f 	nop

00000000000906b0 <CPageAllocator::Setup(unsigned long, unsigned long)>:
   906b0:	d10083ff 	sub	sp, sp, #0x20
   906b4:	f9000fe0 	str	x0, [sp, #24]
   906b8:	f9000be1 	str	x1, [sp, #16]
   906bc:	f90007e2 	str	x2, [sp, #8]
   906c0:	f9400be1 	ldr	x1, [sp, #16]
   906c4:	d29fffe0 	mov	x0, #0xffff                	// #65535
   906c8:	8b000020 	add	x0, x1, x0
   906cc:	9270bc00 	and	x0, x0, #0xffffffffffff0000
   906d0:	aa0003e1 	mov	x1, x0
   906d4:	f9400fe0 	ldr	x0, [sp, #24]
   906d8:	f9000001 	str	x1, [x0]
   906dc:	f9400be1 	ldr	x1, [sp, #16]
   906e0:	f94007e0 	ldr	x0, [sp, #8]
   906e4:	8b000020 	add	x0, x1, x0
   906e8:	9270bc00 	and	x0, x0, #0xffffffffffff0000
   906ec:	aa0003e1 	mov	x1, x0
   906f0:	f9400fe0 	ldr	x0, [sp, #24]
   906f4:	f9000401 	str	x1, [x0, #8]
   906f8:	d503201f 	nop
   906fc:	910083ff 	add	sp, sp, #0x20
   90700:	d65f03c0 	ret
   90704:	d503201f 	nop
   90708:	d503201f 	nop
   9070c:	d503201f 	nop

0000000000090710 <CPageAllocator::GetFreeSpace() const>:
   90710:	a9400001 	ldp	x1, x0, [x0]
   90714:	cb010000 	sub	x0, x0, x1
   90718:	d65f03c0 	ret
   9071c:	d503201f 	nop

0000000000090720 <CPageAllocator::Allocate()>:
   90720:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   90724:	910003fd 	mov	x29, sp
   90728:	a90153f3 	stp	x19, x20, [sp, #16]
   9072c:	aa0003f3 	mov	x19, x0
   90730:	f9400000 	ldr	x0, [x0]
   90734:	b4000460 	cbz	x0, 907c0 <CPageAllocator::Allocate()+0xa0>
   90738:	b9401a60 	ldr	w0, [x19, #24]
   9073c:	35000220 	cbnz	w0, 90780 <CPageAllocator::Allocate()+0x60>
   90740:	f9400a74 	ldr	x20, [x19, #16]
   90744:	b4000254 	cbz	x20, 9078c <CPageAllocator::Allocate()+0x6c>
   90748:	b9400281 	ldr	w1, [x20]
   9074c:	5289a860 	mov	w0, #0x4d43                	// #19779
   90750:	72aa08e0 	movk	w0, #0x5047, lsl #16
   90754:	6b00003f 	cmp	w1, w0
   90758:	540003e1 	b.ne	907d4 <CPageAllocator::Allocate()+0xb4>  // b.any
   9075c:	f9400681 	ldr	x1, [x20, #8]
   90760:	b9401a60 	ldr	w0, [x19, #24]
   90764:	f9000a61 	str	x1, [x19, #16]
   90768:	b900029f 	str	wzr, [x20]
   9076c:	35000200 	cbnz	w0, 907ac <CPageAllocator::Allocate()+0x8c>
   90770:	aa1403e0 	mov	x0, x20
   90774:	a94153f3 	ldp	x19, x20, [sp, #16]
   90778:	a8c27bfd 	ldp	x29, x30, [sp], #32
   9077c:	d65f03c0 	ret
   90780:	97fff5a8 	bl	8de20 <EnterCritical>
   90784:	f9400a74 	ldr	x20, [x19, #16]
   90788:	b5fffe14 	cbnz	x20, 90748 <CPageAllocator::Allocate()+0x28>
   9078c:	a9400e62 	ldp	x2, x3, [x19]
   90790:	b9401a60 	ldr	w0, [x19, #24]
   90794:	91404041 	add	x1, x2, #0x10, lsl #12
   90798:	eb03003f 	cmp	x1, x3
   9079c:	f9000261 	str	x1, [x19]
   907a0:	54fffe68 	b.hi	9076c <CPageAllocator::Allocate()+0x4c>  // b.pmore
   907a4:	aa0203f4 	mov	x20, x2
   907a8:	34fffe40 	cbz	w0, 90770 <CPageAllocator::Allocate()+0x50>
   907ac:	97fff5cd 	bl	8dee0 <LeaveCritical>
   907b0:	aa1403e0 	mov	x0, x20
   907b4:	a94153f3 	ldp	x19, x20, [sp, #16]
   907b8:	a8c27bfd 	ldp	x29, x30, [sp], #32
   907bc:	d65f03c0 	ret
   907c0:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   907c4:	912ee021 	add	x1, x1, #0xbb8
   907c8:	91006020 	add	x0, x1, #0x18
   907cc:	528006c2 	mov	w2, #0x36                  	// #54
   907d0:	97fffbf4 	bl	8f7a0 <assertion_failed>
   907d4:	f0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   907d8:	912ee021 	add	x1, x1, #0xbb8
   907dc:	9100a020 	add	x0, x1, #0x28
   907e0:	52800882 	mov	w2, #0x44                  	// #68
   907e4:	97fffbef 	bl	8f7a0 <assertion_failed>
   907e8:	d503201f 	nop
   907ec:	d503201f 	nop

00000000000907f0 <CPageAllocator::Free(void*)>:
   907f0:	b40003a1 	cbz	x1, 90864 <CPageAllocator::Free(void*)+0x74>
   907f4:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   907f8:	910003fd 	mov	x29, sp
   907fc:	a90153f3 	stp	x19, x20, [sp, #16]
   90800:	aa0003f4 	mov	x20, x0
   90804:	aa0103f3 	mov	x19, x1
   90808:	b9401800 	ldr	w0, [x0, #24]
   9080c:	35000140 	cbnz	w0, 90834 <CPageAllocator::Free(void*)+0x44>
   90810:	f9400a80 	ldr	x0, [x20, #16]
   90814:	5289a861 	mov	w1, #0x4d43                	// #19779
   90818:	72aa08e1 	movk	w1, #0x5047, lsl #16
   9081c:	b9000261 	str	w1, [x19]
   90820:	f9000660 	str	x0, [x19, #8]
   90824:	f9000a93 	str	x19, [x20, #16]
   90828:	a94153f3 	ldp	x19, x20, [sp, #16]
   9082c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90830:	d65f03c0 	ret
   90834:	97fff57b 	bl	8de20 <EnterCritical>
   90838:	f9400a81 	ldr	x1, [x20, #16]
   9083c:	5289a862 	mov	w2, #0x4d43                	// #19779
   90840:	72aa08e2 	movk	w2, #0x5047, lsl #16
   90844:	b9401a80 	ldr	w0, [x20, #24]
   90848:	b9000262 	str	w2, [x19]
   9084c:	f9000661 	str	x1, [x19, #8]
   90850:	f9000a93 	str	x19, [x20, #16]
   90854:	34fffea0 	cbz	w0, 90828 <CPageAllocator::Free(void*)+0x38>
   90858:	a94153f3 	ldp	x19, x20, [sp, #16]
   9085c:	a8c27bfd 	ldp	x29, x30, [sp], #32
   90860:	17fff5a0 	b	8dee0 <LeaveCritical>
   90864:	d65f03c0 	ret
	...

0000000000091000 <VectorTable>:
   91000:	140001ef 	b	917bc <SynchronousStub>
   91004:	d503201f 	nop
   91008:	d503201f 	nop
   9100c:	d503201f 	nop
   91010:	d503201f 	nop
   91014:	d503201f 	nop
   91018:	d503201f 	nop
   9101c:	d503201f 	nop
   91020:	d503201f 	nop
   91024:	d503201f 	nop
   91028:	d503201f 	nop
   9102c:	d503201f 	nop
   91030:	d503201f 	nop
   91034:	d503201f 	nop
   91038:	d503201f 	nop
   9103c:	d503201f 	nop
   91040:	d503201f 	nop
   91044:	d503201f 	nop
   91048:	d503201f 	nop
   9104c:	d503201f 	nop
   91050:	d503201f 	nop
   91054:	d503201f 	nop
   91058:	d503201f 	nop
   9105c:	d503201f 	nop
   91060:	d503201f 	nop
   91064:	d503201f 	nop
   91068:	d503201f 	nop
   9106c:	d503201f 	nop
   91070:	d503201f 	nop
   91074:	d503201f 	nop
   91078:	d503201f 	nop
   9107c:	d503201f 	nop
   91080:	140001eb 	b	9182c <IRQStub>
   91084:	d503201f 	nop
   91088:	d503201f 	nop
   9108c:	d503201f 	nop
   91090:	d503201f 	nop
   91094:	d503201f 	nop
   91098:	d503201f 	nop
   9109c:	d503201f 	nop
   910a0:	d503201f 	nop
   910a4:	d503201f 	nop
   910a8:	d503201f 	nop
   910ac:	d503201f 	nop
   910b0:	d503201f 	nop
   910b4:	d503201f 	nop
   910b8:	d503201f 	nop
   910bc:	d503201f 	nop
   910c0:	d503201f 	nop
   910c4:	d503201f 	nop
   910c8:	d503201f 	nop
   910cc:	d503201f 	nop
   910d0:	d503201f 	nop
   910d4:	d503201f 	nop
   910d8:	d503201f 	nop
   910dc:	d503201f 	nop
   910e0:	d503201f 	nop
   910e4:	d503201f 	nop
   910e8:	d503201f 	nop
   910ec:	d503201f 	nop
   910f0:	d503201f 	nop
   910f4:	d503201f 	nop
   910f8:	d503201f 	nop
   910fc:	d503201f 	nop
   91100:	14000217 	b	9195c <FIQStub>
   91104:	d503201f 	nop
   91108:	d503201f 	nop
   9110c:	d503201f 	nop
   91110:	d503201f 	nop
   91114:	d503201f 	nop
   91118:	d503201f 	nop
   9111c:	d503201f 	nop
   91120:	d503201f 	nop
   91124:	d503201f 	nop
   91128:	d503201f 	nop
   9112c:	d503201f 	nop
   91130:	d503201f 	nop
   91134:	d503201f 	nop
   91138:	d503201f 	nop
   9113c:	d503201f 	nop
   91140:	d503201f 	nop
   91144:	d503201f 	nop
   91148:	d503201f 	nop
   9114c:	d503201f 	nop
   91150:	d503201f 	nop
   91154:	d503201f 	nop
   91158:	d503201f 	nop
   9115c:	d503201f 	nop
   91160:	d503201f 	nop
   91164:	d503201f 	nop
   91168:	d503201f 	nop
   9116c:	d503201f 	nop
   91170:	d503201f 	nop
   91174:	d503201f 	nop
   91178:	d503201f 	nop
   9117c:	d503201f 	nop
   91180:	1400019d 	b	917f4 <SErrorStub>
   91184:	d503201f 	nop
   91188:	d503201f 	nop
   9118c:	d503201f 	nop
   91190:	d503201f 	nop
   91194:	d503201f 	nop
   91198:	d503201f 	nop
   9119c:	d503201f 	nop
   911a0:	d503201f 	nop
   911a4:	d503201f 	nop
   911a8:	d503201f 	nop
   911ac:	d503201f 	nop
   911b0:	d503201f 	nop
   911b4:	d503201f 	nop
   911b8:	d503201f 	nop
   911bc:	d503201f 	nop
   911c0:	d503201f 	nop
   911c4:	d503201f 	nop
   911c8:	d503201f 	nop
   911cc:	d503201f 	nop
   911d0:	d503201f 	nop
   911d4:	d503201f 	nop
   911d8:	d503201f 	nop
   911dc:	d503201f 	nop
   911e0:	d503201f 	nop
   911e4:	d503201f 	nop
   911e8:	d503201f 	nop
   911ec:	d503201f 	nop
   911f0:	d503201f 	nop
   911f4:	d503201f 	nop
   911f8:	d503201f 	nop
   911fc:	d503201f 	nop
   91200:	1400016f 	b	917bc <SynchronousStub>
   91204:	d503201f 	nop
   91208:	d503201f 	nop
   9120c:	d503201f 	nop
   91210:	d503201f 	nop
   91214:	d503201f 	nop
   91218:	d503201f 	nop
   9121c:	d503201f 	nop
   91220:	d503201f 	nop
   91224:	d503201f 	nop
   91228:	d503201f 	nop
   9122c:	d503201f 	nop
   91230:	d503201f 	nop
   91234:	d503201f 	nop
   91238:	d503201f 	nop
   9123c:	d503201f 	nop
   91240:	d503201f 	nop
   91244:	d503201f 	nop
   91248:	d503201f 	nop
   9124c:	d503201f 	nop
   91250:	d503201f 	nop
   91254:	d503201f 	nop
   91258:	d503201f 	nop
   9125c:	d503201f 	nop
   91260:	d503201f 	nop
   91264:	d503201f 	nop
   91268:	d503201f 	nop
   9126c:	d503201f 	nop
   91270:	d503201f 	nop
   91274:	d503201f 	nop
   91278:	d503201f 	nop
   9127c:	d503201f 	nop
   91280:	1400016b 	b	9182c <IRQStub>
   91284:	d503201f 	nop
   91288:	d503201f 	nop
   9128c:	d503201f 	nop
   91290:	d503201f 	nop
   91294:	d503201f 	nop
   91298:	d503201f 	nop
   9129c:	d503201f 	nop
   912a0:	d503201f 	nop
   912a4:	d503201f 	nop
   912a8:	d503201f 	nop
   912ac:	d503201f 	nop
   912b0:	d503201f 	nop
   912b4:	d503201f 	nop
   912b8:	d503201f 	nop
   912bc:	d503201f 	nop
   912c0:	d503201f 	nop
   912c4:	d503201f 	nop
   912c8:	d503201f 	nop
   912cc:	d503201f 	nop
   912d0:	d503201f 	nop
   912d4:	d503201f 	nop
   912d8:	d503201f 	nop
   912dc:	d503201f 	nop
   912e0:	d503201f 	nop
   912e4:	d503201f 	nop
   912e8:	d503201f 	nop
   912ec:	d503201f 	nop
   912f0:	d503201f 	nop
   912f4:	d503201f 	nop
   912f8:	d503201f 	nop
   912fc:	d503201f 	nop
   91300:	14000197 	b	9195c <FIQStub>
   91304:	d503201f 	nop
   91308:	d503201f 	nop
   9130c:	d503201f 	nop
   91310:	d503201f 	nop
   91314:	d503201f 	nop
   91318:	d503201f 	nop
   9131c:	d503201f 	nop
   91320:	d503201f 	nop
   91324:	d503201f 	nop
   91328:	d503201f 	nop
   9132c:	d503201f 	nop
   91330:	d503201f 	nop
   91334:	d503201f 	nop
   91338:	d503201f 	nop
   9133c:	d503201f 	nop
   91340:	d503201f 	nop
   91344:	d503201f 	nop
   91348:	d503201f 	nop
   9134c:	d503201f 	nop
   91350:	d503201f 	nop
   91354:	d503201f 	nop
   91358:	d503201f 	nop
   9135c:	d503201f 	nop
   91360:	d503201f 	nop
   91364:	d503201f 	nop
   91368:	d503201f 	nop
   9136c:	d503201f 	nop
   91370:	d503201f 	nop
   91374:	d503201f 	nop
   91378:	d503201f 	nop
   9137c:	d503201f 	nop
   91380:	1400011d 	b	917f4 <SErrorStub>
   91384:	d503201f 	nop
   91388:	d503201f 	nop
   9138c:	d503201f 	nop
   91390:	d503201f 	nop
   91394:	d503201f 	nop
   91398:	d503201f 	nop
   9139c:	d503201f 	nop
   913a0:	d503201f 	nop
   913a4:	d503201f 	nop
   913a8:	d503201f 	nop
   913ac:	d503201f 	nop
   913b0:	d503201f 	nop
   913b4:	d503201f 	nop
   913b8:	d503201f 	nop
   913bc:	d503201f 	nop
   913c0:	d503201f 	nop
   913c4:	d503201f 	nop
   913c8:	d503201f 	nop
   913cc:	d503201f 	nop
   913d0:	d503201f 	nop
   913d4:	d503201f 	nop
   913d8:	d503201f 	nop
   913dc:	d503201f 	nop
   913e0:	d503201f 	nop
   913e4:	d503201f 	nop
   913e8:	d503201f 	nop
   913ec:	d503201f 	nop
   913f0:	d503201f 	nop
   913f4:	d503201f 	nop
   913f8:	d503201f 	nop
   913fc:	d503201f 	nop
   91400:	140001a8 	b	91aa0 <HVCStub>
   91404:	d503201f 	nop
   91408:	d503201f 	nop
   9140c:	d503201f 	nop
   91410:	d503201f 	nop
   91414:	d503201f 	nop
   91418:	d503201f 	nop
   9141c:	d503201f 	nop
   91420:	d503201f 	nop
   91424:	d503201f 	nop
   91428:	d503201f 	nop
   9142c:	d503201f 	nop
   91430:	d503201f 	nop
   91434:	d503201f 	nop
   91438:	d503201f 	nop
   9143c:	d503201f 	nop
   91440:	d503201f 	nop
   91444:	d503201f 	nop
   91448:	d503201f 	nop
   9144c:	d503201f 	nop
   91450:	d503201f 	nop
   91454:	d503201f 	nop
   91458:	d503201f 	nop
   9145c:	d503201f 	nop
   91460:	d503201f 	nop
   91464:	d503201f 	nop
   91468:	d503201f 	nop
   9146c:	d503201f 	nop
   91470:	d503201f 	nop
   91474:	d503201f 	nop
   91478:	d503201f 	nop
   9147c:	d503201f 	nop
   91480:	140000c1 	b	91784 <UnexpectedStub>
   91484:	d503201f 	nop
   91488:	d503201f 	nop
   9148c:	d503201f 	nop
   91490:	d503201f 	nop
   91494:	d503201f 	nop
   91498:	d503201f 	nop
   9149c:	d503201f 	nop
   914a0:	d503201f 	nop
   914a4:	d503201f 	nop
   914a8:	d503201f 	nop
   914ac:	d503201f 	nop
   914b0:	d503201f 	nop
   914b4:	d503201f 	nop
   914b8:	d503201f 	nop
   914bc:	d503201f 	nop
   914c0:	d503201f 	nop
   914c4:	d503201f 	nop
   914c8:	d503201f 	nop
   914cc:	d503201f 	nop
   914d0:	d503201f 	nop
   914d4:	d503201f 	nop
   914d8:	d503201f 	nop
   914dc:	d503201f 	nop
   914e0:	d503201f 	nop
   914e4:	d503201f 	nop
   914e8:	d503201f 	nop
   914ec:	d503201f 	nop
   914f0:	d503201f 	nop
   914f4:	d503201f 	nop
   914f8:	d503201f 	nop
   914fc:	d503201f 	nop
   91500:	140000a1 	b	91784 <UnexpectedStub>
   91504:	d503201f 	nop
   91508:	d503201f 	nop
   9150c:	d503201f 	nop
   91510:	d503201f 	nop
   91514:	d503201f 	nop
   91518:	d503201f 	nop
   9151c:	d503201f 	nop
   91520:	d503201f 	nop
   91524:	d503201f 	nop
   91528:	d503201f 	nop
   9152c:	d503201f 	nop
   91530:	d503201f 	nop
   91534:	d503201f 	nop
   91538:	d503201f 	nop
   9153c:	d503201f 	nop
   91540:	d503201f 	nop
   91544:	d503201f 	nop
   91548:	d503201f 	nop
   9154c:	d503201f 	nop
   91550:	d503201f 	nop
   91554:	d503201f 	nop
   91558:	d503201f 	nop
   9155c:	d503201f 	nop
   91560:	d503201f 	nop
   91564:	d503201f 	nop
   91568:	d503201f 	nop
   9156c:	d503201f 	nop
   91570:	d503201f 	nop
   91574:	d503201f 	nop
   91578:	d503201f 	nop
   9157c:	d503201f 	nop
   91580:	14000081 	b	91784 <UnexpectedStub>
   91584:	d503201f 	nop
   91588:	d503201f 	nop
   9158c:	d503201f 	nop
   91590:	d503201f 	nop
   91594:	d503201f 	nop
   91598:	d503201f 	nop
   9159c:	d503201f 	nop
   915a0:	d503201f 	nop
   915a4:	d503201f 	nop
   915a8:	d503201f 	nop
   915ac:	d503201f 	nop
   915b0:	d503201f 	nop
   915b4:	d503201f 	nop
   915b8:	d503201f 	nop
   915bc:	d503201f 	nop
   915c0:	d503201f 	nop
   915c4:	d503201f 	nop
   915c8:	d503201f 	nop
   915cc:	d503201f 	nop
   915d0:	d503201f 	nop
   915d4:	d503201f 	nop
   915d8:	d503201f 	nop
   915dc:	d503201f 	nop
   915e0:	d503201f 	nop
   915e4:	d503201f 	nop
   915e8:	d503201f 	nop
   915ec:	d503201f 	nop
   915f0:	d503201f 	nop
   915f4:	d503201f 	nop
   915f8:	d503201f 	nop
   915fc:	d503201f 	nop
   91600:	14000061 	b	91784 <UnexpectedStub>
   91604:	d503201f 	nop
   91608:	d503201f 	nop
   9160c:	d503201f 	nop
   91610:	d503201f 	nop
   91614:	d503201f 	nop
   91618:	d503201f 	nop
   9161c:	d503201f 	nop
   91620:	d503201f 	nop
   91624:	d503201f 	nop
   91628:	d503201f 	nop
   9162c:	d503201f 	nop
   91630:	d503201f 	nop
   91634:	d503201f 	nop
   91638:	d503201f 	nop
   9163c:	d503201f 	nop
   91640:	d503201f 	nop
   91644:	d503201f 	nop
   91648:	d503201f 	nop
   9164c:	d503201f 	nop
   91650:	d503201f 	nop
   91654:	d503201f 	nop
   91658:	d503201f 	nop
   9165c:	d503201f 	nop
   91660:	d503201f 	nop
   91664:	d503201f 	nop
   91668:	d503201f 	nop
   9166c:	d503201f 	nop
   91670:	d503201f 	nop
   91674:	d503201f 	nop
   91678:	d503201f 	nop
   9167c:	d503201f 	nop
   91680:	14000041 	b	91784 <UnexpectedStub>
   91684:	d503201f 	nop
   91688:	d503201f 	nop
   9168c:	d503201f 	nop
   91690:	d503201f 	nop
   91694:	d503201f 	nop
   91698:	d503201f 	nop
   9169c:	d503201f 	nop
   916a0:	d503201f 	nop
   916a4:	d503201f 	nop
   916a8:	d503201f 	nop
   916ac:	d503201f 	nop
   916b0:	d503201f 	nop
   916b4:	d503201f 	nop
   916b8:	d503201f 	nop
   916bc:	d503201f 	nop
   916c0:	d503201f 	nop
   916c4:	d503201f 	nop
   916c8:	d503201f 	nop
   916cc:	d503201f 	nop
   916d0:	d503201f 	nop
   916d4:	d503201f 	nop
   916d8:	d503201f 	nop
   916dc:	d503201f 	nop
   916e0:	d503201f 	nop
   916e4:	d503201f 	nop
   916e8:	d503201f 	nop
   916ec:	d503201f 	nop
   916f0:	d503201f 	nop
   916f4:	d503201f 	nop
   916f8:	d503201f 	nop
   916fc:	d503201f 	nop
   91700:	14000021 	b	91784 <UnexpectedStub>
   91704:	d503201f 	nop
   91708:	d503201f 	nop
   9170c:	d503201f 	nop
   91710:	d503201f 	nop
   91714:	d503201f 	nop
   91718:	d503201f 	nop
   9171c:	d503201f 	nop
   91720:	d503201f 	nop
   91724:	d503201f 	nop
   91728:	d503201f 	nop
   9172c:	d503201f 	nop
   91730:	d503201f 	nop
   91734:	d503201f 	nop
   91738:	d503201f 	nop
   9173c:	d503201f 	nop
   91740:	d503201f 	nop
   91744:	d503201f 	nop
   91748:	d503201f 	nop
   9174c:	d503201f 	nop
   91750:	d503201f 	nop
   91754:	d503201f 	nop
   91758:	d503201f 	nop
   9175c:	d503201f 	nop
   91760:	d503201f 	nop
   91764:	d503201f 	nop
   91768:	d503201f 	nop
   9176c:	d503201f 	nop
   91770:	d503201f 	nop
   91774:	d503201f 	nop
   91778:	d503201f 	nop
   9177c:	d503201f 	nop
   91780:	14000001 	b	91784 <UnexpectedStub>

0000000000091784 <UnexpectedStub>:
   91784:	d5385200 	mrs	x0, esr_el1
   91788:	d5384001 	mrs	x1, spsr_el1
   9178c:	aa1e03e2 	mov	x2, x30
   91790:	d5384023 	mrs	x3, elr_el1
   91794:	d5384104 	mrs	x4, sp_el0
   91798:	910003e5 	mov	x5, sp
   9179c:	d5386006 	mrs	x6, far_el1
   917a0:	f81f0fe6 	str	x6, [sp, #-16]!
   917a4:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   917a8:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   917ac:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   917b0:	d2800000 	mov	x0, #0x0                   	// #0
   917b4:	910003e1 	mov	x1, sp
   917b8:	17fff0a2 	b	8da40 <ExceptionHandler>

00000000000917bc <SynchronousStub>:
   917bc:	d5385200 	mrs	x0, esr_el1
   917c0:	d5384001 	mrs	x1, spsr_el1
   917c4:	aa1e03e2 	mov	x2, x30
   917c8:	d5384023 	mrs	x3, elr_el1
   917cc:	d5384104 	mrs	x4, sp_el0
   917d0:	910003e5 	mov	x5, sp
   917d4:	d5386006 	mrs	x6, far_el1
   917d8:	f81f0fe6 	str	x6, [sp, #-16]!
   917dc:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   917e0:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   917e4:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   917e8:	d2800020 	mov	x0, #0x1                   	// #1
   917ec:	910003e1 	mov	x1, sp
   917f0:	17fff094 	b	8da40 <ExceptionHandler>

00000000000917f4 <SErrorStub>:
   917f4:	d5385200 	mrs	x0, esr_el1
   917f8:	d5384001 	mrs	x1, spsr_el1
   917fc:	aa1e03e2 	mov	x2, x30
   91800:	d5384023 	mrs	x3, elr_el1
   91804:	d5384104 	mrs	x4, sp_el0
   91808:	910003e5 	mov	x5, sp
   9180c:	d5386006 	mrs	x6, far_el1
   91810:	f81f0fe6 	str	x6, [sp, #-16]!
   91814:	a9bf17e4 	stp	x4, x5, [sp, #-16]!
   91818:	a9bf0fe2 	stp	x2, x3, [sp, #-16]!
   9181c:	a9bf07e0 	stp	x0, x1, [sp, #-16]!
   91820:	d2800040 	mov	x0, #0x2                   	// #2
   91824:	910003e1 	mov	x1, sp
   91828:	17fff086 	b	8da40 <ExceptionHandler>

000000000009182c <IRQStub>:
   9182c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   91830:	d538403d 	mrs	x29, elr_el1
   91834:	d538401e 	mrs	x30, spsr_el1
   91838:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   9183c:	d50341ff 	msr	daifclr, #0x1
   91840:	adbf7ffe 	stp	q30, q31, [sp, #-32]!
   91844:	adbf77fc 	stp	q28, q29, [sp, #-32]!
   91848:	adbf6ffa 	stp	q26, q27, [sp, #-32]!
   9184c:	adbf67f8 	stp	q24, q25, [sp, #-32]!
   91850:	adbf5ff6 	stp	q22, q23, [sp, #-32]!
   91854:	adbf57f4 	stp	q20, q21, [sp, #-32]!
   91858:	adbf4ff2 	stp	q18, q19, [sp, #-32]!
   9185c:	adbf47f0 	stp	q16, q17, [sp, #-32]!
   91860:	adbf3fee 	stp	q14, q15, [sp, #-32]!
   91864:	adbf37ec 	stp	q12, q13, [sp, #-32]!
   91868:	adbf2fea 	stp	q10, q11, [sp, #-32]!
   9186c:	adbf27e8 	stp	q8, q9, [sp, #-32]!
   91870:	adbf1fe6 	stp	q6, q7, [sp, #-32]!
   91874:	adbf17e4 	stp	q4, q5, [sp, #-32]!
   91878:	adbf0fe2 	stp	q2, q3, [sp, #-32]!
   9187c:	adbf07e0 	stp	q0, q1, [sp, #-32]!
   91880:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   91884:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   91888:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   9188c:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   91890:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   91894:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   91898:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   9189c:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   918a0:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   918a4:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   918a8:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   918ac:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   918b0:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   918b4:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   918b8:	f81f0fe0 	str	x0, [sp, #-16]!
   918bc:	58000fe0 	ldr	x0, 91ab8 <HVCStub+0x18>
   918c0:	f900001d 	str	x29, [x0]
   918c4:	97fff54f 	bl	8ee00 <InterruptHandler>
   918c8:	f84107e0 	ldr	x0, [sp], #16
   918cc:	a8c10be1 	ldp	x1, x2, [sp], #16
   918d0:	a8c113e3 	ldp	x3, x4, [sp], #16
   918d4:	a8c11be5 	ldp	x5, x6, [sp], #16
   918d8:	a8c123e7 	ldp	x7, x8, [sp], #16
   918dc:	a8c12be9 	ldp	x9, x10, [sp], #16
   918e0:	a8c133eb 	ldp	x11, x12, [sp], #16
   918e4:	a8c13bed 	ldp	x13, x14, [sp], #16
   918e8:	a8c143ef 	ldp	x15, x16, [sp], #16
   918ec:	a8c14bf1 	ldp	x17, x18, [sp], #16
   918f0:	a8c153f3 	ldp	x19, x20, [sp], #16
   918f4:	a8c15bf5 	ldp	x21, x22, [sp], #16
   918f8:	a8c163f7 	ldp	x23, x24, [sp], #16
   918fc:	a8c16bf9 	ldp	x25, x26, [sp], #16
   91900:	a8c173fb 	ldp	x27, x28, [sp], #16
   91904:	acc107e0 	ldp	q0, q1, [sp], #32
   91908:	acc10fe2 	ldp	q2, q3, [sp], #32
   9190c:	acc117e4 	ldp	q4, q5, [sp], #32
   91910:	acc11fe6 	ldp	q6, q7, [sp], #32
   91914:	acc127e8 	ldp	q8, q9, [sp], #32
   91918:	acc12fea 	ldp	q10, q11, [sp], #32
   9191c:	acc137ec 	ldp	q12, q13, [sp], #32
   91920:	acc13fee 	ldp	q14, q15, [sp], #32
   91924:	acc147f0 	ldp	q16, q17, [sp], #32
   91928:	acc14ff2 	ldp	q18, q19, [sp], #32
   9192c:	acc157f4 	ldp	q20, q21, [sp], #32
   91930:	acc15ff6 	ldp	q22, q23, [sp], #32
   91934:	acc167f8 	ldp	q24, q25, [sp], #32
   91938:	acc16ffa 	ldp	q26, q27, [sp], #32
   9193c:	acc177fc 	ldp	q28, q29, [sp], #32
   91940:	acc17ffe 	ldp	q30, q31, [sp], #32
   91944:	d50341df 	msr	daifset, #0x1
   91948:	a8c17bfd 	ldp	x29, x30, [sp], #16
   9194c:	d518403d 	msr	elr_el1, x29
   91950:	d518401e 	msr	spsr_el1, x30
   91954:	a8c17bfd 	ldp	x29, x30, [sp], #16
   91958:	d69f03e0 	eret

000000000009195c <FIQStub>:
   9195c:	adbf7ffe 	stp	q30, q31, [sp, #-32]!
   91960:	adbf77fc 	stp	q28, q29, [sp, #-32]!
   91964:	adbf6ffa 	stp	q26, q27, [sp, #-32]!
   91968:	adbf67f8 	stp	q24, q25, [sp, #-32]!
   9196c:	adbf5ff6 	stp	q22, q23, [sp, #-32]!
   91970:	adbf57f4 	stp	q20, q21, [sp, #-32]!
   91974:	adbf4ff2 	stp	q18, q19, [sp, #-32]!
   91978:	adbf47f0 	stp	q16, q17, [sp, #-32]!
   9197c:	adbf3fee 	stp	q14, q15, [sp, #-32]!
   91980:	adbf37ec 	stp	q12, q13, [sp, #-32]!
   91984:	adbf2fea 	stp	q10, q11, [sp, #-32]!
   91988:	adbf27e8 	stp	q8, q9, [sp, #-32]!
   9198c:	adbf1fe6 	stp	q6, q7, [sp, #-32]!
   91990:	adbf17e4 	stp	q4, q5, [sp, #-32]!
   91994:	adbf0fe2 	stp	q2, q3, [sp, #-32]!
   91998:	adbf07e0 	stp	q0, q1, [sp, #-32]!
   9199c:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   919a0:	a9bf73fb 	stp	x27, x28, [sp, #-16]!
   919a4:	a9bf6bf9 	stp	x25, x26, [sp, #-16]!
   919a8:	a9bf63f7 	stp	x23, x24, [sp, #-16]!
   919ac:	a9bf5bf5 	stp	x21, x22, [sp, #-16]!
   919b0:	a9bf53f3 	stp	x19, x20, [sp, #-16]!
   919b4:	a9bf4bf1 	stp	x17, x18, [sp, #-16]!
   919b8:	a9bf43ef 	stp	x15, x16, [sp, #-16]!
   919bc:	a9bf3bed 	stp	x13, x14, [sp, #-16]!
   919c0:	a9bf33eb 	stp	x11, x12, [sp, #-16]!
   919c4:	a9bf2be9 	stp	x9, x10, [sp, #-16]!
   919c8:	a9bf23e7 	stp	x7, x8, [sp, #-16]!
   919cc:	a9bf1be5 	stp	x5, x6, [sp, #-16]!
   919d0:	a9bf13e3 	stp	x3, x4, [sp, #-16]!
   919d4:	a9bf0be1 	stp	x1, x2, [sp, #-16]!
   919d8:	f81f0fe0 	str	x0, [sp, #-16]!
   919dc:	58000722 	ldr	x2, 91ac0 <HVCStub+0x20>
   919e0:	f9400041 	ldr	x1, [x2]
   919e4:	f100003f 	cmp	x1, #0x0
   919e8:	54000480 	b.eq	91a78 <FIQStub+0x11c>  // b.none
   919ec:	f9400440 	ldr	x0, [x2, #8]
   919f0:	d63f0020 	blr	x1
   919f4:	f84107e0 	ldr	x0, [sp], #16
   919f8:	a8c10be1 	ldp	x1, x2, [sp], #16
   919fc:	a8c113e3 	ldp	x3, x4, [sp], #16
   91a00:	a8c11be5 	ldp	x5, x6, [sp], #16
   91a04:	a8c123e7 	ldp	x7, x8, [sp], #16
   91a08:	a8c12be9 	ldp	x9, x10, [sp], #16
   91a0c:	a8c133eb 	ldp	x11, x12, [sp], #16
   91a10:	a8c13bed 	ldp	x13, x14, [sp], #16
   91a14:	a8c143ef 	ldp	x15, x16, [sp], #16
   91a18:	a8c14bf1 	ldp	x17, x18, [sp], #16
   91a1c:	a8c153f3 	ldp	x19, x20, [sp], #16
   91a20:	a8c15bf5 	ldp	x21, x22, [sp], #16
   91a24:	a8c163f7 	ldp	x23, x24, [sp], #16
   91a28:	a8c16bf9 	ldp	x25, x26, [sp], #16
   91a2c:	a8c173fb 	ldp	x27, x28, [sp], #16
   91a30:	a8c17bfd 	ldp	x29, x30, [sp], #16
   91a34:	acc107e0 	ldp	q0, q1, [sp], #32
   91a38:	acc10fe2 	ldp	q2, q3, [sp], #32
   91a3c:	acc117e4 	ldp	q4, q5, [sp], #32
   91a40:	acc11fe6 	ldp	q6, q7, [sp], #32
   91a44:	acc127e8 	ldp	q8, q9, [sp], #32
   91a48:	acc12fea 	ldp	q10, q11, [sp], #32
   91a4c:	acc137ec 	ldp	q12, q13, [sp], #32
   91a50:	acc13fee 	ldp	q14, q15, [sp], #32
   91a54:	acc147f0 	ldp	q16, q17, [sp], #32
   91a58:	acc14ff2 	ldp	q18, q19, [sp], #32
   91a5c:	acc157f4 	ldp	q20, q21, [sp], #32
   91a60:	acc15ff6 	ldp	q22, q23, [sp], #32
   91a64:	acc167f8 	ldp	q24, q25, [sp], #32
   91a68:	acc16ffa 	ldp	q26, q27, [sp], #32
   91a6c:	acc177fc 	ldp	q28, q29, [sp], #32
   91a70:	acc17ffe 	ldp	q30, q31, [sp], #32
   91a74:	d69f03e0 	eret
   91a78:	58000281 	ldr	x1, 91ac8 <HVCStub+0x28>
   91a7c:	52800000 	mov	w0, #0x0                   	// #0
   91a80:	b9000020 	str	w0, [x1]
   91a84:	17ffffdc 	b	919f4 <FIQStub+0x98>

0000000000091a88 <SMCStub>:
   91a88:	58000242 	ldr	x2, 91ad0 <HVCStub+0x30>
   91a8c:	9100005f 	mov	sp, x2
   91a90:	f81f0ffe 	str	x30, [sp, #-16]!
   91a94:	97fff563 	bl	8f020 <SecureMonitorHandler>
   91a98:	f84107fe 	ldr	x30, [sp], #16
   91a9c:	d69f03e0 	eret

0000000000091aa0 <HVCStub>:
   91aa0:	d53c4000 	mrs	x0, spsr_el2
   91aa4:	927cec00 	and	x0, x0, #0xfffffffffffffff0
   91aa8:	d2800121 	mov	x1, #0x9                   	// #9
   91aac:	aa010000 	orr	x0, x0, x1
   91ab0:	d51c4000 	msr	spsr_el2, x0
   91ab4:	d69f03e0 	eret
   91ab8:	000af240 	.word	0x000af240
   91abc:	00000000 	.word	0x00000000
   91ac0:	000af228 	.word	0x000af228
   91ac4:	00000000 	.word	0x00000000
   91ac8:	fe00b20c 	.word	0xfe00b20c
   91acc:	00000000 	.word	0x00000000
   91ad0:	000b2570 	.word	0x000b2570
	...

0000000000091ae0 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   91ae0:	b9000001 	str	w1, [x0]
   91ae4:	39001002 	strb	w2, [x0, #4]
   91ae8:	d65f03c0 	ret
   91aec:	d503201f 	nop

0000000000091af0 <CBcmMailBox::~CBcmMailBox()>:
   91af0:	d65f03c0 	ret
   91af4:	d503201f 	nop
   91af8:	d503201f 	nop
   91afc:	d503201f 	nop

0000000000091b00 <CBcmMailBox::WriteRead(unsigned int)>:
   91b00:	a9bc7bfd 	stp	x29, x30, [sp, #-64]!
   91b04:	910003fd 	mov	x29, sp
   91b08:	a90153f3 	stp	x19, x20, [sp, #16]
   91b0c:	aa0003f4 	mov	x20, x0
   91b10:	39401000 	ldrb	w0, [x0, #4]
   91b14:	f90013f5 	str	x21, [sp, #32]
   91b18:	2a0103f5 	mov	w21, w1
   91b1c:	37000080 	tbnz	w0, #0, 91b2c <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   91b20:	b0000100 	adrp	x0, b2000 <appendBuf+0xa0>
   91b24:	b9457000 	ldr	w0, [x0, #1392]
   91b28:	35000580 	cbnz	w0, 91bd8 <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   91b2c:	d2971313 	mov	x19, #0xb898                	// #47256
   91b30:	f2bfc013 	movk	x19, #0xfe00, lsl #16
   91b34:	b9400260 	ldr	w0, [x19]
   91b38:	37f00120 	tbnz	w0, #30, 91b5c <CBcmMailBox::WriteRead(unsigned int)+0x5c>
   91b3c:	d1006273 	sub	x19, x19, #0x18
   91b40:	b9400261 	ldr	w1, [x19]
   91b44:	52800280 	mov	w0, #0x14                  	// #20
   91b48:	97ffeb4e 	bl	8c880 <CTimer::SimpleMsDelay(unsigned int)>
   91b4c:	d2971302 	mov	x2, #0xb898                	// #47256
   91b50:	f2bfc002 	movk	x2, #0xfe00, lsl #16
   91b54:	b9400042 	ldr	w2, [x2]
   91b58:	36f7ff42 	tbz	w2, #30, 91b40 <CBcmMailBox::WriteRead(unsigned int)+0x40>
   91b5c:	d2971700 	mov	x0, #0xb8b8                	// #47288
   91b60:	f2bfc000 	movk	x0, #0xfe00, lsl #16
   91b64:	d503201f 	nop
   91b68:	b9400002 	ldr	w2, [x0]
   91b6c:	37ffffe2 	tbnz	w2, #31, 91b68 <CBcmMailBox::WriteRead(unsigned int)+0x68>
   91b70:	f2400ebf 	tst	x21, #0xf
   91b74:	54000441 	b.ne	91bfc <CBcmMailBox::WriteRead(unsigned int)+0xfc>  // b.any
   91b78:	b9400281 	ldr	w1, [x20]
   91b7c:	d2971302 	mov	x2, #0xb898                	// #47256
   91b80:	f2bfc002 	movk	x2, #0xfe00, lsl #16
   91b84:	d1006044 	sub	x4, x2, #0x18
   91b88:	2a0102b5 	orr	w21, w21, w1
   91b8c:	b81e8015 	stur	w21, [x0, #-24]
   91b90:	b9400280 	ldr	w0, [x20]
   91b94:	d503201f 	nop
   91b98:	b9400041 	ldr	w1, [x2]
   91b9c:	37f7ffe1 	tbnz	w1, #30, 91b98 <CBcmMailBox::WriteRead(unsigned int)+0x98>
   91ba0:	b9400081 	ldr	w1, [x4]
   91ba4:	12000c23 	and	w3, w1, #0xf
   91ba8:	6b00007f 	cmp	w3, w0
   91bac:	54ffff61 	b.ne	91b98 <CBcmMailBox::WriteRead(unsigned int)+0x98>  // b.any
   91bb0:	39401282 	ldrb	w2, [x20, #4]
   91bb4:	121c6c20 	and	w0, w1, #0xfffffff0
   91bb8:	37000082 	tbnz	w2, #0, 91bc8 <CBcmMailBox::WriteRead(unsigned int)+0xc8>
   91bbc:	b0000101 	adrp	x1, b2000 <appendBuf+0xa0>
   91bc0:	b9457021 	ldr	w1, [x1, #1392]
   91bc4:	350000e1 	cbnz	w1, 91be0 <CBcmMailBox::WriteRead(unsigned int)+0xe0>
   91bc8:	a94153f3 	ldp	x19, x20, [sp, #16]
   91bcc:	f94013f5 	ldr	x21, [sp, #32]
   91bd0:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91bd4:	d65f03c0 	ret
   91bd8:	97fff092 	bl	8de20 <EnterCritical>
   91bdc:	17ffffd4 	b	91b2c <CBcmMailBox::WriteRead(unsigned int)+0x2c>
   91be0:	b9003fe0 	str	w0, [sp, #60]
   91be4:	97fff0bf 	bl	8dee0 <LeaveCritical>
   91be8:	a94153f3 	ldp	x19, x20, [sp, #16]
   91bec:	f94013f5 	ldr	x21, [sp, #32]
   91bf0:	b9403fe0 	ldr	w0, [sp, #60]
   91bf4:	a8c47bfd 	ldp	x29, x30, [sp], #64
   91bf8:	d65f03c0 	ret
   91bfc:	d0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   91c00:	d0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   91c04:	91302021 	add	x1, x1, #0xc08
   91c08:	91306000 	add	x0, x0, #0xc18
   91c0c:	52800c42 	mov	w2, #0x62                  	// #98
   91c10:	97fff6e4 	bl	8f7a0 <assertion_failed>
   91c14:	d503201f 	nop
   91c18:	d503201f 	nop
   91c1c:	d503201f 	nop

0000000000091c20 <CBcmMailBox::Flush()>:
   91c20:	a9be7bfd 	stp	x29, x30, [sp, #-32]!
   91c24:	910003fd 	mov	x29, sp
   91c28:	f9000bf3 	str	x19, [sp, #16]
   91c2c:	d2971313 	mov	x19, #0xb898                	// #47256
   91c30:	f2bfc013 	movk	x19, #0xfe00, lsl #16
   91c34:	b9400260 	ldr	w0, [x19]
   91c38:	37f00120 	tbnz	w0, #30, 91c5c <CBcmMailBox::Flush()+0x3c>
   91c3c:	d1006273 	sub	x19, x19, #0x18
   91c40:	b9400261 	ldr	w1, [x19]
   91c44:	52800280 	mov	w0, #0x14                  	// #20
   91c48:	97ffeb0e 	bl	8c880 <CTimer::SimpleMsDelay(unsigned int)>
   91c4c:	d2971300 	mov	x0, #0xb898                	// #47256
   91c50:	f2bfc000 	movk	x0, #0xfe00, lsl #16
   91c54:	b9400000 	ldr	w0, [x0]
   91c58:	36f7ff40 	tbz	w0, #30, 91c40 <CBcmMailBox::Flush()+0x20>
   91c5c:	f9400bf3 	ldr	x19, [sp, #16]
   91c60:	a8c27bfd 	ldp	x29, x30, [sp], #32
   91c64:	d65f03c0 	ret
   91c68:	d503201f 	nop
   91c6c:	d503201f 	nop

0000000000091c70 <CBcmMailBox::Read()>:
   91c70:	b9400004 	ldr	w4, [x0]
   91c74:	d2971301 	mov	x1, #0xb898                	// #47256
   91c78:	f2bfc001 	movk	x1, #0xfe00, lsl #16
   91c7c:	d1006023 	sub	x3, x1, #0x18
   91c80:	b9400020 	ldr	w0, [x1]
   91c84:	37f7ffe0 	tbnz	w0, #30, 91c80 <CBcmMailBox::Read()+0x10>
   91c88:	b9400060 	ldr	w0, [x3]
   91c8c:	12000c02 	and	w2, w0, #0xf
   91c90:	6b04005f 	cmp	w2, w4
   91c94:	54ffff61 	b.ne	91c80 <CBcmMailBox::Read()+0x10>  // b.any
   91c98:	121c6c00 	and	w0, w0, #0xfffffff0
   91c9c:	d65f03c0 	ret

0000000000091ca0 <CBcmMailBox::Write(unsigned int)>:
   91ca0:	d2971703 	mov	x3, #0xb8b8                	// #47288
   91ca4:	f2bfc003 	movk	x3, #0xfe00, lsl #16
   91ca8:	b9400062 	ldr	w2, [x3]
   91cac:	37ffffe2 	tbnz	w2, #31, 91ca8 <CBcmMailBox::Write(unsigned int)+0x8>
   91cb0:	f2400c3f 	tst	x1, #0xf
   91cb4:	540000a1 	b.ne	91cc8 <CBcmMailBox::Write(unsigned int)+0x28>  // b.any
   91cb8:	b9400000 	ldr	w0, [x0]
   91cbc:	2a000021 	orr	w1, w1, w0
   91cc0:	b81e8061 	stur	w1, [x3, #-24]
   91cc4:	d65f03c0 	ret
   91cc8:	d0000001 	adrp	x1, 93000 <vtable for CString+0x38>
   91ccc:	d0000000 	adrp	x0, 93000 <vtable for CString+0x38>
   91cd0:	a9bf7bfd 	stp	x29, x30, [sp, #-16]!
   91cd4:	91302021 	add	x1, x1, #0xc08
   91cd8:	910003fd 	mov	x29, sp
   91cdc:	91306000 	add	x0, x0, #0xc18
   91ce0:	52800c42 	mov	w2, #0x62                  	// #98
   91ce4:	97fff6af 	bl	8f7a0 <assertion_failed>
	...

0000000000091cf0 <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   91cf0:	b0000100 	adrp	x0, b2000 <appendBuf+0xa0>
   91cf4:	b905701f 	str	wzr, [x0, #1392]
   91cf8:	d65f03c0 	ret
